{"default_url":null,"content":{"state":0,"taskInstructions":null,"references":[],"isTaskInstructionsVisible":true,"isCommentMandatory":false,"fields":[],"masterFinding":{"id":488704,"exploitInstructions":"","verificationInstructions":"<b>Verification Instructions</b>\n\nInspect HTTP response headers on pages that contain some sensitive content (typically any post-authentication data) and check the Cache-Control header. If the Cache-Control header value does not contain the <ncode>no-store</ncode> directive, report the vulnerability.\n\n<b>Reporting Requirements</b>\nIf Cache-Control is set incorrectly throughout the application, remove affected URLs and add a statement to the instance's description saying that Cache-Control is set incorrectly throughout the application.\n\nInclude sample HTTP request/response for sensitive content in the application. Add the red-bold highlighting to the Cache-Control configuration in the HTTP response. \n\n<b>Additional Instructions</b>\n\n&#42;&#42;&#42; This is Legacy Information &#42;&#42;&#42;\n\nIf no-cache is used:\n\nIE will not cache the page\n\nFirefox:\nWILL cache the page if access through HTTP\nwill NOT cache the page if accessed over HTTPS\n\nabout:cache in firefox\n\n[UPDATE NEEDED]if no-store is used, Firefox and IE will both NOT cache the page, regardless of HTTP vs. HTTPS \n\nfor IE, review what files are cached here C:\\Users\\&lt;user&gt;\\AppData\\Local\\Microsoft\\Windows\\Temporary Internet Files\n\n\nExamples:\n Cache-Control: private   -- prevents load balancers from caching the response \n Cache-Control: private, max-age=0   -- prevents load balancers from caching the response (perhaps a workaround for specific load balancer)\n\nIt is a false positive if you see this (this is what the response should have if it is not vulnerable):\n\nPragma: no-cache\nCache-Control: no-cache, no-store, must-revalidate\nExpires: -1 (OR SOMETHING SIMILAR)\n\nLikelihood -  The likelihood is low to gain sensitive data from a user as an attacker will need to gain access to the local system. \n\nCWE-524 \n","remediationInstructions":"For every page that contains sensitive information, the server must instruct the browser not to cache data. Such a directive can be issued in the HTTP response headers: \n\n<ncode>Cache-Control: no-store\n</ncode>\n\nThough Meta tags can also be used to set these directives, using the header is the preferred method, as not all browsers honor the Meta tags consistently.\n\nIf the site contains file download functionality (such as a PDF or Office document download) in certain configurations, these cache control settings may interfere with downloading files in some IE browser versions. Be sure to test this functionality before implementing in production environments to ensure that cache control settings do not interfere with intended functionality. See the following for additional information and workarounds:\n<ul><li>http://support.microsoft.com/kb/812935</li>\n<li>http://support.microsoft.com/kb/2549423</li>\n<li>http://blogs.msdn.com/b/ieinternals/archive/2009/10/03/internet-explorer-cannot-download-over-https-when-no-cache.aspx</li>\n<li>http://blogs.msdn.com/b/ieinternals/archive/2010/04/21/internet-explorer-may-bypass-cache-for-cross-domain-https-content.aspx</li>\n</ul>\n","name":"Information Disclosure - Inadequate Cache Control","sourceId":"M:488704","severity":"Low","businessImpact":"Lack of adequate cache control may allow unauthorized access to sensitive data. In a configuration where both the no-store and private directives are missing for requests of user-personalized data, CDNs and proxies may leak that information to other users through cached responses. This is most commonly an issue when post-authenticated requests are cached by CDNs and proxies. Under certain circumstances, an attacker with physical access to a legitimate user's computer may be able to access sensitive information within the application. If a legitimate user logs into the application, views pages containing sensitive information, and then logs out without closing their browser, pages containing sensitive information can still be viewed using the &quot;back&quot; button or by accessing the cache directly. If the legitimate user leaves their computer unattended without locking the screen, an attacker will be able to view this information. Applications that are often accessed from shared systems will be more at risk.\n","description":"The application does not restrict caching and may save sensitive data to the local browser's cache. Sensitive data may be available by using the &quot;back&quot; button on the browser or by accessing the data on the local system. Logging out from an application does not clear the browser cache of any sensitive information that might have been stored.\nIf the private directive is not used this also means any sensitive data is now being stored intermediate hosts such as CDNs and proxies.\n"}}}