{"default_url":null,"content":{"state":0,"taskInstructions":null,"references":[],"isTaskInstructionsVisible":true,"isCommentMandatory":false,"fields":[],"masterFinding":{"id":21397,"exploitInstructions":"","verificationInstructions":"<b>Verification Instructions</b>\n\nLeave an authenticated session idle for 30 minutes to determine if sessions will time out.\n\n<b>Reporting Requirements</b>\n<ol><li>Add a description that states that the session did not expire after xx minutes of inactivity</li>\n<li>If idle sessions stay active for more than 8 hours, increase the finding severity for the project</li>\n<li>If the application handles highly sensitive data (like HIPAA, bank account info, etc.) or gives access to administrative functionality (such as user management), increase the finding severity for the project</li>\n</ol>\n<b>Note</b>\nSession expiration should not be reported for applications that use stateless authentication (like JWT); rather, the finding should be reported as a token lifetime issue.\n","remediationInstructions":"Ensure that sessions expire on both the server and the client after an appropriate period of inactivity. A session time out period of fifteen minutes or less is recommended. Although short session expiration times do not help if a stolen session is immediately used, this control will prevent an attacker from continuously using the stolen session ID. If additional controls are in place, such as disallowing concurrent logins, the chance of session theft will be greatly reduced.\n","name":"Weak Session Management - Insufficient Session Expiration","sourceId":"M:21398","severity":"Low","businessImpact":"In conjunction with other vulnerabilities, insufficient session expiration increases a web site's exposure to session theft attacks. Were an attacker to steal a user's session, they would be able to take any action in the application within the context of the user whose session was stolen.\n","description":"The application has insufficient session expiration. Proper session expiration ensures that if a user does not log out properly or leaves their computer unattended while they are logged in, their session will expire after a certain period of inactivity. Sliding expiration resets the expiration time for a valid authentication cookie if a request is made and more than half of the timeout interval has elapsed. \n\nSince HTTP is a stateless protocol, web sites commonly use session IDs to uniquely identify a user from request to request. Consequently, each session ID's confidentiality must be maintained to prevent unauthorized account access. A stolen session ID can be used to view another user's account or perform actions within the context of that user.\n"}}}