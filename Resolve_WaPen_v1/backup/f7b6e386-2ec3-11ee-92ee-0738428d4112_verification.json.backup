{"default_url":null,"content":{"state":0,"taskInstructions":null,"references":[],"isTaskInstructionsVisible":true,"isCommentMandatory":false,"fields":[],"masterFinding":{"id":17051556,"exploitInstructions":"","verificationInstructions":"","remediationInstructions":"Analyze and harden client side (JavaScript) code. Additionally, sanitize input sources which can be influenced by an attacker. For example:\n<ul><li>document.URL</li>\n<li>document.URLUnencoded</li>\n<li>document.location (and many of its properties)</li>\n<li>document.referrer</li>\n<li>window.location (and many of its properties)</li>\n</ul>\nSpecial attention should be given to scenarios in which the DOM is modified. For example: \n\nWrite raw HTML, e.g.:\n<ul><li>document.write(...)</li>\n<li>document.writeln(...)</li>\n<li>document.body.innerHtml=...</li>\n</ul>\nDirectly modifying the DOM (including DHTML events), e.g.:\n<ul><li>document.forms[0].action=... (and various other collections)</li>\n<li>document.attachEvent(...)</li>\n<li>document.create...(...)</li>\n<li>document.execCommand(...)</li>\n<li>document.body. ... (accessing the DOM through the body object)</li>\n<li>window.attachEvent(...)</li>\n</ul>\nReplacing the document URL, e.g.:\n<ul><li>document.location=... (and assigning to location's href, host</li>\n<li>and hostname)</li>\n<li>document.location.hostname=...</li>\n<li>document.location.replace(...)</li>\n<li>document.location.assign(...)</li>\n<li>document.URL=...</li>\n<li>window.navigate(...)</li>\n</ul>\nOpening/modifying a window, e.g.:\n<ul><li>document.open(...)</li>\n<li>window.open(...)</li>\n<li>window.location.href=... (and assigning to location's href, host</li>\n<li>and hostname)</li>\n</ul>\nDirectly executing script, e.g.:\n<ul><li>eval(...)</li>\n<li>window.execScript(...)</li>\n<li>window.setInterval(...)</li>\n<li>window.setTimeout(...)</li>\n</ul>\nConsider the following vulnerable script:\n\n<ncode>&lt;SCRIPT&gt;\nvar position=document.URL.indexOf(\"age=\")+4;\ndocument.write(document.URL.substring(position,document.URL.length));\n&lt;/SCRIPT&gt;\n</ncode>\nIn this example the age parameter isn't sanitized, therefore the script is susceptible to DOM Cross-Site Scripting attacks.\nA safe version of this script would be:\n\n<ncode>&lt;SCRIPT&gt;\n  var position=document.URL.indexOf(\"age=\")+4;\n  var age=document.URL.substring(position,document.URL.length);\n  if (age.match(/^[0-9]&#42;$/))\n  {\n        document.write(age);\n  }\n else\n {\n       window.alert(\"Illegal input.\\nAge parameter should be composed from numerical characters only.\");\n }\n&lt;/SCRIPT&gt;\n</ncode>\n\nIn this version, the age parameter is validated to make sure it does not contain malicious characters.\n","name":"Cross-Site Scripting - DOM Based","sourceId":"M:659e972c-f9e3-e211-ba22-001e4f12001e","severity":"Medium","businessImpact":"Successful exploitation of cross-site scripting vulnerabilities allows an attacker to run arbitrary script code in the context of the affected user. This can be used to compromise the integrity of content returned by the web server to take over a user's session, redirect the user to a malicious web site, or send requests on behalf of a user. Stolen sessions can be used to take any action the affected user could within an application.  Redirecting users to malicious web sites could be used to propagate malware, discredit the original web site, or trick users into disclosing sensitive information. Sending malicious requests on behalf of an affected user can make it difficult to discover the true origin of the attack.","description":"DOM-based cross-site scripting was discovered within the application. In DOM-based XSS, the client performs the injection of XSS into the page, as opposed to other XSS types (Reflected and Stored XSS) where the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script (such as JavaScript) that is sent to the client and performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data, and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.\n\nThe following code snippet (age.html) demonstrates a DOM Cross-Site Scripting vulnerability:\n\n<ncode>&lt;HTML&gt;\n    \t&lt;BODY&gt;\n    \t\tHello!\n    \t\t&lt;BR&gt;\n    \t\tYour age is: \n    \t\t&lt;SCRIPT&gt;\n    \t\t\tvar position=document.URL.indexOf(\"age=\")+4;\n    \t\t\tdocument.write(document.URL.substring(position,document.URL.length));\n    \t\t&lt;/SCRIPT&gt;\n    \t&lt;/BODY&gt;\n&lt;/HTML&gt;\n</ncode>\n\nNormally, this HTML page would be used for presenting the user's age, e.g.: \n<ncode>http://SERVER/age.html?age=21\n</ncode>\n\nHowever, issuing the following request will result in an XSS condition:\n<ncode>http://SERVER/age.html?age=&lt;script&gt;alert(document.cookie)&lt;/script&gt; \n</ncode>\n\nNote there is no need for malicious code to be embedded in the server's response for the attack to succeed.\n"}}}