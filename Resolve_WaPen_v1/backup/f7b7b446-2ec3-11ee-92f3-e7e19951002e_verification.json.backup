{"default_url":null,"content":{"state":0,"taskInstructions":null,"references":[],"isTaskInstructionsVisible":true,"isCommentMandatory":false,"fields":[],"masterFinding":{"id":21930,"exploitInstructions":"Attempt to read source code, configuration, and log files to identify password or vulnerabilities that will provide command execution on the affected system.","verificationInstructions":"<b>Verification Instructions</b>\n\nIdentify parameters that appear to be used to denote files or folders on the server. Inject path traversal sequences in an attempt to determine if path traversal is possible and to escape the intended file location.\n\nNo error on vulnerable system (same as file=test.doc):\nfile=./test.doc\nfile=.\\test.doc\n\nError on vulnerable system (file does not exist):\nfile=../test.doc\nfile=..\\test.doc\n\nTest if the application display directory listings if parameter is modified to be a folder:\nfile=./\nfile=.\\\n\nAttempt to access known files:\nfile=..\\..\\..\\..\\web.config\nfile=../../../../etc/passwd\n\nAdditionally, on Windows systems, try UNC paths to connect to remote resources. If UNC paths are accepted, try connecting to externally available pentester controled servers.\n\nIf plain traversal sequences do not work use Burp Intruder to determine if encoded etc. path traversal sequences can be used:\n<ol><li>Send request to Intruder and mark injection point</li>\n<li>Select Fuzzing - Path Traversal template</li>\n<li>Create Payload Processing rule Match/Replace</li>\n<li>Replace {FILE} with known file (Linux/Unix or Windows)</li>\n<li>Example: Match regex: \\{FILE\\}</li>\n<li>Example: Replace with: etc/passwd</li>\n</ol>\n\nYou can also use  PWNWIKI for a list of common file paths:\n<ul><li>Windows - http://pwnwiki.io/&#35;!presence/windows/blind.md</li>\n<li>Linux - http://pwnwiki.io/&#35;!presence/linux/blind.md</li>\n</ul>\n<b>Reporting Requirements</b>\n<ol><li>Screenshot the initial page</li>\n<li>Show the normal HTTP request</li>\n<li>Show directory traversal sequence in request parameter</li>\n<li>Show access to files that are not normally accessible via the web site</li>\n</ol>\n<b>Further Testing</b>\n\nIf directory traversal vulnerabilities found, attempt to gain access to files that contain sensitive information. Potential findings:\n<ul><li>Cleartext password in files</li>\n<li>Insufficient egress filtering</li>\n</ul>\n","remediationInstructions":"Ensure that all data used by the application is put through a data input filter that removes potentially harmful characters. Best practice recommends the use of allow lists using regular expressions.\n\nA non-privileged service account should be used to run the web server. Following the principle of least privilege when assigning permissions for the service account helps limit the impact of a successful directory traversal attack.\n","name":"Directory Traversal","sourceId":"M:21930","severity":"High","businessImpact":"Successful exploitation of the directory traversal vulnerability allows an attacker to access files located on the targeted server. This may result in disclosure of sensitive information, such as user credentials, and thus result in further compromise of the affected system.\nDirectory traversal vulnerabilities affecting file creation functionality may allow a malicious user to create and possibly overwrite files which could compromise the confidentiality, integrity, and availability of the affected system.\n","description":"The application uses unsanitized user input to access files on the affected system. By injecting path traversal sequences into the user input it is possible to gain unauthorized access to arbitrary files on the system.\n"}}}