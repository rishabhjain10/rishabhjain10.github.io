{"default_url":null,"content":{"state":0,"taskInstructions":null,"references":[],"isTaskInstructionsVisible":true,"isCommentMandatory":false,"fields":[],"masterFinding":{"id":17058084,"exploitInstructions":null,"verificationInstructions":"This finding should only be reported if the HTTP response contains something that creates a new <b>execution context </b>(think HTML document, iframes, and other embedded objects).\n\nFrom the current CSP spec:\n<blockquote>If a resource does not create a new execution context (for example, when including a script, image, or stylesheet into a document), then any policies delivered with that resource are discarded without effect.</blockquote>\n\nThis means if your HTTP response does not create an execution context (because it's a JSON object, or an image file, or a JS file, or any other reason) then this finding is a false positive.\n\nRefer to https://www.w3.org/TR/CSP2/&#35;which-policy-applies for more details.\n\n<b><u>CVSS Scoring Guidelines:</u></b>\nIf XSS was <b>not </b>found during testing\n<ul><li>0.0 (AV:N/AC:H/PR:N/UI:R/S:U/C:N/I:N/A:N)</li>\n</ul>\nIf XSS was found during testing\n<ul><li>3.7 (AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N)</li>\n</ul>\n","remediationInstructions":"It is a best practice to implement the Content-Security-Policy header throughout the application. The specific implementation of the CSP header depends on the application configuration but general instructions for CSP headers can be found at: https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html.\nAt a minimum, Content-Security-Policy should be used to restrict script execution with the script-src directive and prevent framing attacks with the frame-ancestors directive.\n","name":"Missing HTTP Header - Content-Security-Policy","sourceId":"CX:4033","severity":"Low","businessImpact":"Content-Security-Policy header provides an additional layer of security for the site from client-side attacks such as cross-site scripting. In the absence of this header, an attacker can exploit client-side vulnerabilities such as cross-site scripting, clickjacking, and packet sniffing attacks. \n","description":"The application does not explicitly set the Content-Security-Policy HTTP header. This header helps to prevent unwanted content from being injected into the application, aiding in the mitigation and prevention of XSS vulnerabilities, unintended tracking, unacceptable frames, and other potentially malicious content.\n"}}}