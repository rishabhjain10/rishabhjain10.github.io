{"default_url":null,"content":{"state":0,"taskInstructions":null,"references":[],"isTaskInstructionsVisible":true,"isCommentMandatory":false,"fields":[],"masterFinding":{"id":17062362,"exploitInstructions":"","verificationInstructions":"<h3><b>Verification Instructions:</b></h3>\nDecode the JWT token and extract the expiration time from the token. Report excessive token lifetime if the JWT stays valid for more than 15 minutes. Use local tools to decode sessions tokens - do not copy JWTs into an online tool or website.\n\n<h3><b>Reporting Requirements:</b></h3>\n<ol><li>Display JWT issue time and expiration time</li>\n<li>If the JWT is valid for more than 8 hours, increase the finding severity for the project</li>\n<li>If the application handles highly sensitive data (like HIPAA, bank account info, etc.) or gives access to administrative functionality (such as user management), increase the finding severity for the project</li>\n</ol>\n","remediationInstructions":"Issued JWTs should be configured with an 'exp' claim that adheres to modern session expiration guidelines, typically no more than fifteen minutes.\n","name":"JWT - Excessive Token Lifetime","sourceId":"M:42b55c93-e5fb-4dca-9dc4-bc52bc6bd2f5","severity":"Low","businessImpact":"Successfully compromising a JWT with a long validity period will allow an attacker to use the stolen JWT throughout the lifetime of the token. Creating tokens with a short validity period will decrease the time window during which an attacker could make use of a stolen JWT.\n","description":"The 'exp' (expiration time) claim identifies the expiration time on or after which the JWT must not be accepted for processing. If the 'exp' claim is set to a time too far in the future, the likelihood of a replay attack or session hijacking attack increases.\n\nWhile JWT bearer tokens should be short-lived, they may be used in conjunction with a refresh token which may have a longer life. A refresh token will make a request to the server in order to generate a new JWT. This process can be done as long as the application is not idle; however, the refresh token should be a one-time use token and when it is used, both the current JWT and refresh token must be invalidated.\n"}}}