{"default_url":null,"content":{"state":0,"taskInstructions":null,"references":[],"isTaskInstructionsVisible":true,"isCommentMandatory":false,"fields":[],"masterFinding":{"id":17056152,"exploitInstructions":"","verificationInstructions":"<b>Verification Instructions</b>\n\nTo test for this vulnerability the tester first needs to map out all locations in the application where user input is used to reference objects directly. For example, locations where user input is used to access a database row, a file, application pages and more. Next the tester should modify the value of the parameter used to reference objects and assess whether it is possible to retrieve objects belonging to other users or otherwise bypass authorization.\n\nThe best way to test for direct object references would be by having at least two (often more) users to cover different owned objects and functions. For example two users each having access to different objects (such as purchase information, private messages, etc.), and (if relevant) users with different privileges (for example administrator users) to see whether there are direct references to application functionality. By having multiple users the tester saves valuable testing time in guessing different object names as he can attempt to access objects that belong to the other user.\n\n<b>Reporting Requirements</b>\n<ol><li>Add multiple scenarios for \"unique\" authorization bypass issues</li>\n<li>Add a description that explains how authorization bypass is exploited</li>\n<li>Show data that is accessible to a certain user</li>\n<li>Show how data that is not accessible to the user can be accessed</li>\n<li>Show the impact</li>\n</ol>\n<b>Tools</b>\n<ul><li>Burp - Compare Site Maps</li>\n</ul>\n","remediationInstructions":"Ensure that strong access controls are in place to prevent unauthorized access to sensitive information. Authorization checks should be performed prior to providing users access to information within the application. Any part of the application that relies on user input to return data should perform server-side authorization checks. Do not rely on authorization checks that are performed client-side, as the client may be able to manipulate and bypass these checks. Ensuring that server-side authorization checks are in place will help prevent users from gaining unauthorized access to sensitive data within the application.\n","name":"Authorization Bypass - Insecure Direct Object References","sourceId":"M:fbc2a25a-4c53-e511-80d2-ecf4bbd04073","severity":"High","businessImpact":"An authenticated user could gain unauthorized access to sensitive data within the application. The impact of a user bypassing authorization checks depends on the nature of the application as well as the data that is accessed.","description":"The application does not perform adequate authorization checks. An authenticated user can gain unauthorized access to sensitive information or functionality by manipulating specific parameters within the application.\n"}}}