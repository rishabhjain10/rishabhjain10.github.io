{"default_url":null,"content":{"state":0,"taskInstructions":null,"references":[],"isTaskInstructionsVisible":true,"isCommentMandatory":false,"fields":[],"masterFinding":{"id":5050075,"exploitInstructions":"","verificationInstructions":"<b>Verification Instructions</b><br><br>Inject XML tags into user input. XML injections can typically be identified from verbose error messages. Successful XML injection requires that the underlying DTD is known; successfully injecting XML that results in a valid XML call from web server to app server is difficult.<br><br>Sample injections:<br><br>id='<br>id=\"<br>id=&lt;<br>id=test&lt;/uid&gt;&lt;uid&gt;test2<br><br>It is very difficult to exploit XML injections for anything meaningful. XML injection can typically be identified from error messages that indicate that the backend XML structure was successfully modified.<br><br><b>Reporting Requirements</b><br><br><ol><li>Screenshot the initial page</li><br><li>Show the initial HTTP request</li><br><li>Show the modified request containing the XML injection</li><br><li>Show effect of the XML injection (either error message or actual impact)</li><br></ol><br>","remediationInstructions":"Ensure all user supplied data is proper sanitized before presenting it to any XML processing interfaces. Disable detailed error messages that could give an attacker information.<br>","name":"XML Injection","sourceId":"BUR:1050368","severity":"High","businessImpact":"A remote attacker could leverage XML injection into a full compromise of integrity, availability, and confidentiality of the application depending on the XML code susceptible to the flaw. ","description":"XML or SOAP injection vulnerabilities arise when user input is inserted into a server-side XML document or SOAP message in an unsafe way. It may be possible to use XML meta-characters to modify the structure of the resulting XML. Depending on the function in which the XML is used, it may be possible to interfere with the application's logic, to perform unauthorized actions or access sensitive data. This kind of vulnerability can be difficult to detect and exploit remotely; you should review the application's response, and the purpose, which the relevant input performs within the application's functionality, to determine whether it is indeed vulnerable.<br>"}}}