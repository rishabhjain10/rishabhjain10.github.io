{"default_url":null,"content":{"state":0,"taskInstructions":null,"references":[],"isTaskInstructionsVisible":true,"isCommentMandatory":false,"fields":[],"masterFinding":{"id":21825,"exploitInstructions":"","verificationInstructions":"<h3><b>Verification Instructions:</b></h3><br>Attempt to exploit cross-site scripting by injecting JavaScript into application parameters (usually something like a parameter that contains <code>&lt;script&gt;alert(1234)&lt;/script&gt;</code>). This can usually be obtained from the tool that identified the finding; cross-site scripting identification is mainly done by automated tools.<br><br>Manually verify what kind of input filtering the application does. Attempt to obfuscate injections to avoid detection by filters (see references).<br><br>Typical XSS vulnerabilities:<br><ul><li>Standard &lt;script&gt; tag injection - <code>&lt;script&gt;alert(123)&lt;/script&gt;</code></li><br><li>Injection into existing JavaScript - <code>&quot;;alert(123);//</code></li><br><li>Injection into input tags - use JavaScript event trigger such as <code>onmouseover=alert(123)</code></li><br></ul><br><h3><b>Reporting Requirements:</b></h3><br><ol><li>Add an explanation about the persistent XSS: when is the XSS executed and which users it affects (self XSS or other users of the app too)</li><br><li>Add screenshot of the initial page</li><br><li>Add text based HTTP request/response of the request with XSS payload. Use a modified HTTP request block if necessary.</li><br><li>Add screenshot of JavaScript executing in browser</li><br></ol><br><h3><b>References:</b></h3><br>XSS Filter Evasion Cheatsheet - https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet<br>PortSwigger XSS Cheatsheet - https://portswigger.net/web-security/cross-site-scripting/cheat-sheet<br>","remediationInstructions":"The following recommendations will help reduce the risk of cross-site scripting attacks:<br><ul><li>Ensure that the server-side application code UTF-8 encodes all client supplied parameter data</li><br><li>Ensure that the server-side application code validates the data type for each parameter</li><br><li>Ensure that the server-side application code validates the length of each parameter</li><br><li>Ensure that the application code on the server validates all input parameters (cookies, headers, query strings, forms, hidden fields, etc.) against a stringent definition of expected results. Allow listing should be used as the base validation method of user input; block listing can be used as an additional layer of protection.</li><br><li>Whenever possible, limit all client-supplied data to alphanumeric data. Using this filtering scheme, if a user entered &quot;&lt;script&gt;alert('aaa') &lt;/script&gt;&quot;, it would be reduced to &quot;scriptalertaaascript&quot;. If non-alphanumeric characters must be used, encode them as HTML entities before using them in a HTTP response, so that they cannot be used to modify the structure of the HTML document.</li><br><li>Many server-side scripting languages provide built in methods to convert the value of the input variable into correct, non-interpretable HTML. These should be used to sanitize all input before displaying it to the client.</li><br></ul><br>If it is not possible to access the affected code or implement server level controls, contact the vendor of the application for any patches or fixes that may address this issue.<br>","name":"Cross-Site Scripting - Persistent","sourceId":"M:21825","severity":"High","businessImpact":"Successful exploitation of cross-site scripting vulnerabilities allows an attacker to run arbitrary script code in the context of the affected user. This can be used to compromise the integrity of content returned by the web server to take over a user's session, redirect the user to a malicious web site, or send requests on behalf of a user. Stolen sessions can be used to take any action the affected user could within an application.  Redirecting users to malicious web sites could be used to propagate malware, discredit the original web site, or trick users into disclosing sensitive information. Sending malicious requests on behalf of an affected user can make it difficult to discover the true origin of the attack.","description":"Cross-site scripting occurs when dynamically generated web pages display user input that is either improperly validated or not validated at all. This allows attackers to embed malicious script code into the generated page, which is then executed in the browser of the user viewing the page. Persistent cross-site scripting occurs when the malicious script is stored in a database by the application, and then executed whenever another user views a page that displays that malicious data.<br><br>Cross-site scripting poses risks that include, but are not limited to, the following:<br><ul><li>Users can unknowingly execute malicious scripts when viewing dynamically generated pages based on content provided by an attacker.</li><br><li>An attacker can take over a user's session before the user's session cookie expires.</li><br><li>An attacker can connect users to a malicious server of the attacker's choice.</li><br><li>An attacker who can convince a user to access a URL supplied by the attacker could cause script or HTML of the attacker's choice to be executed in the user's browser. Using this technique, an attacker can take actions with the privileges of the user who accessed the URL.</li><br></ul><br>In this case, the cross-site scripting vulnerability is persistent; once the malicious code is injected, it will be executed on every client's web browser when the user accesses the compromised web page.  Please note that the affected URLs listed in this finding may not represent every instance of the vulnerability.  For higher assurances that all instances of the vulnerability are found, conduct a secure code review.<br>"}}}