{"default_url":null,"content":{"state":0,"taskInstructions":null,"references":[],"isTaskInstructionsVisible":true,"isCommentMandatory":false,"fields":[],"masterFinding":{"id":5050858,"exploitInstructions":"","verificationInstructions":"<b>Verification Instructions</b><br><br>OS command execution always depends on the backend and the exploitation techniques can be very varied. <br><br>For simple OS command injection, attempt to inject special characters that can be used to execute multiple OS commands on a single line. These characters include semicolon, ampersand, pipe. Try to identify OS command execution from server errors or output.<br><br>Injection example if the server displays the results of the command (Linux/Unix):<br>id=doc.txt; ls /etc/<br><br>Injection example if blind command injection (Windows):<br>id=doc.txt &amp; ping pentester-ip<br>Blind injection can be detected (potentially) from time-delay or traffic.<br><br><b>Reporting Requirements</b><br><ol><li>Screenshot the initial page</li><br><li>Show initial HTTP request</li><br><li>Show modified HTTP request that includes the OS command injection</li><br><li>Show the results</li><br></ol><br><b>Further Testing</b><br><ul><li>Attempt to compromise the server and associated servers (typically database server)</li><br><li>Include findings related to the configuration such as Excessive Privileges - Service Account</li><br></ul><br><b>References</b><br><ul><li>https://www.owasp.org/index.php/Command_Injection</li><br></ul><br>","remediationInstructions":"Ensure that all data used by the application is put through a data input filter that removes potentially harmful characters. Best practice recommends the use of allowlists using regular expressions.<br><br>If possible, do not implement dynamic server-side code (using methods such as <code>eval()</code>) that accepts user input.<br>","name":"OS Command Injection","sourceId":"BUR:1048832","severity":"High","businessImpact":"By exploiting OS command injection, an attacker may be able to execute system commands on the affected host with the privileges of the affected service. In some circumstances this provides the means to take control of the server, leading to the complete compromise of the confidentiality, integrity, and availability of the affected host.<br>","description":"The application uses unsanitized user-controlled parameters to execute operating system commands. By injecting malicious characters into user input it is possible to execute arbitrary operating commands on the server.<br>"}}}