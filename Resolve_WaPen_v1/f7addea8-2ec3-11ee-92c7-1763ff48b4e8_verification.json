{"default_url":null,"content":{"state":0,"taskInstructions":null,"references":[],"isTaskInstructionsVisible":true,"isCommentMandatory":false,"fields":[],"masterFinding":{"id":21395,"exploitInstructions":"","verificationInstructions":"<b>Verification Instructions</b><br><br>Perform logout function. Repeat a request using the pre-logout session cookie value to determine if the cookie is invalidated on the server.<br><br><b>Reporting Requirements</b><br><ol><li>Show session cookie value prior to logout</li><br><li>Show logout function</li><br><li>Show authenticated request using the old cookie value</li><br></ol><br>Note that this should not be reported if the session is tracked via JWT.<br>","remediationInstructions":"Ensure that old sessions are destroyed on both the server and the client when a user logs out or resets their password. This will limit an attacker to only being able to steal the session of a user that is currently logged in. If additional controls are in place, such as disallowing concurrent logins, the chance of session theft will be reduced.<br>","name":"Weak Session Management - Insufficient Session Destruction","sourceId":"M:21396","severity":"Low","businessImpact":"In conjunction with other vulnerabilities, insufficient session destruction increases a web site's exposure to session theft attacks.  An attacker could leverage this vulnerability to steal a user's session, which may allow the attacker to take any action in the application within the context of the user whose session was stolen.","description":"The application does not properly destroy sessions on user logout or after a user resets their password. Proper session destruction on user logout or password reset ensures that the session ID cannot be replayed to gain access to a user's account after that user has logged out of the application or resets their password. Since HTTP is a stateless protocol, web sites commonly use session IDs to uniquely identify a user from request to request. Consequently, each session ID's confidentiality must be maintained in order to prevent multiple users from accessing the same account. A stolen session ID can be used to view another user's account or perform actions within the context of that user.<br>"}}}