{"default_url":null,"content":{"state":0,"taskInstructions":null,"references":[],"isTaskInstructionsVisible":true,"isCommentMandatory":false,"fields":[],"masterFinding":{"id":17054413,"exploitInstructions":"","verificationInstructions":"<b>Verification Instructions</b><br><br>Attempt to upload arbitrary files to the server. Attempt to bypass any client-side or server-side controls that are used to restrict upload capabilities:<br><ul><li>modify file extension in Burp</li><br><li>modify file content-type in Burp</li><br><li>upload valid file but include malicious content in the file (for example to match PNG file signature)</li><br></ul><br>Determine what kind of web technology is in use (php, aspx, etc.). Try to determine if the file is uploaded to the web server file system and if it's accessible directly (like https://webserver/files/cmd.php). If the file can be accessed directly, test whether it's executed server-side or if it's just returned to user without execution.<br><br><b>Reporting Requirements</b><br><ol><li>Add description to detail what kind of files are allowed to be uploaded</li><br><li>Show file upload functionality</li><br><li>Show upload of an arbitrary file</li><br><li>If necessary, show request content modification in Burp</li><br><li>Show that the uploaded file is accessible on the server</li><br><li>Show OS command execution and other access within the application environment</li><br></ol><br><b>Further Testing</b><br><br>OS command execution can be used to identify loads of other vulnerabilities.<br><br><b>Tools</b><br><ul><li>obfuscated (to avoid AV detection) fuzzdb web shells available on repo</li><br><li>fuzzdb - for web shell for different platforms</li><br><li>sqlcmd.aspx - for DB connectivity</li><br></ul><br>","remediationInstructions":"Ensure that server-side controls are put into place that validate and restrict uploaded file extensions, locations, and content to only that which is required for a defined business purpose.<br>Follow these recommendations to secure file upload functionality:<br><ul><li>Check file extension</li><br><li>Reject special characters in file names such as &quot;/&quot; and &quot;;&quot;</li><br><li>Rename user uploaded content, and add the expected file extension</li><br><li>When possible, check file signatures for binary files (such as image or PDF files)</li><br><li>When expected file upload is an image, render the content when accessed, for example by using <code>&lt;img&gt;</code> tags</li><br><li>For arbitrary files (such as executables) that can be uploaded and accessed, serve the files with the &quot;Content-Disposition: attachment&quot; header instead of rendering the file</li><br><li>If uploaded content saved as files instead of saving into a database, save uploaded content outside of webroot; don't allow direct access to uploaded files via the application</li><br><li>Don't allow execution from upload folder</li><br><li>Limit file sizes</li><br><li>Use anti-virus when possible to scan uploaded content</li><br><li>If compressed file uploads are extracted on the server, apply these directions to each file one by one</li><br></ul><br>","name":"File Upload - OS Command Execution","sourceId":"M:767f1d74-e75d-e411-8e01-001e4f12001c","severity":"Critical","businessImpact":"Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server. Depending on whether file path, file extension and file content are controllable or not, attackers may be able to:<br><ul><li>Upload web forms to the web directories to gain remote code execution.</li><br><li>Upload malware/virus to web directories to attack other users.</li><br><li>Upload large file to cause Denial-of-Service condition.</li><br><li>Overwrite critical system files, cause Denial-of-Service, backdoor system or gain remote access through other means.</li><br></ul><br>","description":"The application allows user to upload arbitrary files, including files with malicious content. <br>"}}}