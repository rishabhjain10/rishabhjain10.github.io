{"default_url":null,"content":{"state":0,"taskInstructions":null,"references":[],"isTaskInstructionsVisible":true,"isCommentMandatory":false,"fields":[],"masterFinding":{"id":21616,"exploitInstructions":"","verificationInstructions":"<b>Verification Instructions</b><br><br>Option 1:<br><br>Access the web server and determine what the session cookie(s) is. Determine whether the cookie is set prior to authentication and not reset upon successful authentication.<br><br>Options 2:<br><br>Test if session cookie can be set via URL parameter:<br>https://webserver/app?JSESSIONID=1234ASDF123ASD<br>If so, check if the cookie is reset upon successful authentication.<br><br><b>Reporting Requirements</b><br><ol><li>Show HTTP response that sets the session cookie</li><br><li>Show authentication request and response that does not reset the session cookie</li><br></ol><br><b>References</b><br><ul><li>http://www.owasp.org/index.php/Testing_for_Session_Fixation_%28OWASP-SM-003%29</li><br><li>http://shiflett.org/articles/session-fixation</li><br></ul><br>","remediationInstructions":"Ensure that existing session IDs are never reused. When a user logs in, use the following session management process to prevent session fixation attacks:<br><ul><li>Obtain and invalidate the previous session ID from the user's HTTP request, regardless of whether the user is already logged in.</li><br><li>Generate a new, non-predictable session ID and assign it to the user.</li><br></ul><br>","name":"Weak Session Management - Session Fixation","sourceId":"M:21617","severity":"Medium","businessImpact":"Session fixation vulnerabilities facilitate session hijacking attacks, which allow an attacker to take actions in the context of the user whose session was stolen. The severity of this issue depends on the level of access the user has within the application, as well as the nature of the application itself.","description":"Authenticating a user without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions. If an attacker can force a user to authenticate with a known session ID, once the user is authenticated, the attacker can use the known session ID to perform session hijacking by manipulating their own session ID to match the known session ID of the user.<br><br>This vulnerability is most commonly exploited in the following ways:<br><ul><li>The attacker visits the application on a shared workstation, records the session ID, waits for a user to logon at the same workstation, then uses the known session ID to steal the user's session</li><br><li>The application sets a session ID on a page sent over HTTP, the attacker observes and records the session ID as it travels over an unencrypted channel, the user is redirected to an HTTPS login page with the same session ID and logs in, then the attacker uses the known session ID to steal the user's session</li><br><li>The application determines the session ID's value based off user input, the attacker causes the user's input to create a session ID of the attacker's choice, the user logs in, then the attacker uses the known session ID to steal the user's session</li><br></ul><br>"}}}