{"default_url":null,"content":{"state":0,"taskInstructions":null,"references":[],"isTaskInstructionsVisible":true,"isCommentMandatory":false,"fields":[],"masterFinding":{"id":709,"exploitInstructions":"","verificationInstructions":"<h3><b>Verification Instructions:</b></h3><br>Attempt to exploit cross-site scripting by injecting JavaScript into application parameters (usually something like a parameter that contains <code>&lt;script&gt;alert(1234)&lt;/script&gt;</code>). This can usually be obtained from the tool that identified the finding; cross-site scripting identification is mainly done by automated tools.<br><br>Manually verify what kind of input filtering the application does. Attempt to obfuscate injections to avoid detection by filters (see references).<br><br>Typical XSS vulnerabilities:<br><ul><li>Standard &lt;script&gt; tag injection - <code>&lt;script&gt;alert(123)&lt;/script&gt;</code></li><br><li>Injection into existing JavaScript - <code>&quot;;alert(123);//</code></li><br><li>Injection into input tags - use JavaScript event trigger such as <code>onmouseover=alert(123)</code></li><br></ul><br><h3><b>Reporting Requirements:</b></h3><br><ol><li>Add screenshot of the initial page</li><br><li>Add text based HTTP request/response of the request with XSS payload. Use a modified HTTP request block if necessary.</li><br><li>Add screenshot of JavaScript executing in browser</li><br></ol><br><b>HTML Tag Injection:</b><br>If you are able to add HTML tags, but not exploit XSS, add the finding for HTML Tag Injection.<br><br><h3><b>References:</b></h3><br>OWASP XSS Filter Evasion Cheatsheet - https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet<br>PortSwigger XSS Cheatsheet - https://portswigger.net/web-security/cross-site-scripting/cheat-sheet<br>","remediationInstructions":"The following recommendations will help reduce the risk of cross-site scripting attacks:<br><ul><li>Validate the input only contains a set of expected characters such as digits and dashes in a phone number.</li><br><li>Reject requests that fail input validation rather than attempting to fix or clean them.</li><br><li>Context-specific encoding should be applied before the data is written to the page. For example, HTML-encoding for user-submitted data reflected in HTML and JavaScript escaping for user-submitted data reflected in JavaScript.</li><br><li>Ensure that the application code on the server validates all input locations (cookies, headers, query strings, forms, hidden fields, etc.) against a stringent definition of expected results. Allowlisting should be used as the base validation method of user input; blocklisting can be used as an additional layer of protection.</li><br><li>Many web frameworks can provide built in methods to convert input data into correct, non-interpretable HTML. These libraries should be used to sanitize all input before displaying it to the client.</li><br><li>Consider the use of a Content-Security-Policy (CSP) which is a response header that instructs the user client on what resources to load.</li><br></ul><br>","name":"Cross-Site Scripting - Reflected","sourceId":"GID:3163","severity":"Medium","businessImpact":"Successful exploitation of cross-site scripting vulnerabilities allows an attacker to run arbitrary script code in the context of the affected user. This can be used to compromise the integrity of content returned by the web server to take over a user's session, redirect the user to a malicious web site, or send requests on behalf of a user. Stolen sessions can be used to take any action the affected user could within an application.  Redirecting users to malicious web sites could be used to propagate malware, discredit the original web site, or trick users into disclosing sensitive information. Sending malicious requests on behalf of an affected user can make it difficult to discover the true origin of the attack.","description":"Cross-site scripting occurs when dynamically generated web pages display user input that is either improperly validated or not validated at all. This allows attackers to embed malicious script code into the generated page, which is then executed in the browser of the user viewing the page.<br><br>Cross-site scripting poses risks that include, but are not limited to, the following:<br><ul><li>Users can unknowingly execute malicious scripts when viewing dynamically generated pages based on content provided by an attacker.</li><br><li>An attacker can take over a user's session before the user's session cookie expires.</li><br><li>An attacker can connect users to a malicious server of the attacker's choice.</li><br><li>An attacker who can convince a user to access a URL supplied by the attacker could cause script or HTML of the attacker's choice to be executed in the user's browser. Using this technique, an attacker can take actions with the privileges of the user who accessed the URL.</li><br></ul><br>"}}}