{"default_url":null,"content":{"state":2,"taskInstructions":"<h2><b>Instructions</b></h2><br>Perform brute forcing to discover subdomains.<br><br><h2>Variation: dnsrecon</h2><br>1. Run command commands to identify subdomains.<br><code>dnsrecon -d domain.com -D /root/dnsrecon/subdomains-top1mil-20000.txt -t brt --xml /path/to/file.xml<br></code><br>or<br><code>dnsrecon -d domain.com -D /root/dnsrecon/subdomains-top1mil-20000.txt -t brt -n [name server ip] --threads 15 --xml /path/to/file.xml<br></code><br><h2>Variation: amass</h2><br>1. Install amass via apt.<br><code>sudo apt install amass<br></code><br>2. Run the following command.<br><code>amass enum -brute [-w wordlist] -d netspi.com<br></code><br><h2>Variation: gobuster</h2><br>1. Install gobuster via apt.<br><br>2. Run the following command.<br><code>gobuster dns -d netspi.com -w wordlist -t 20<br></code><br><h2>Dealing with wild card records</h2><br>When a brute force is performed against a domain using a wildcard record every request is going to come back as successful, either with a real result or that of the default record. Below is a summary of how to deal with it.<br><br>1. Determine wildcard exists by querying for a long random subdomain.  If A records are returned then a wildcard record is most likely being used.<br><code>dig adsfadfasdfasdf.domain.com<br></code><br>2. Conduct DNS brute forcing of the domain, but filter out the wildcard IP addresses from the results to obtain a list of real sub domains.<br><code>dnsrecon -d domain.com -D /root/dnsrecon/subdomains-top1mil-20000.txt -t brt --xml /path/to/file.xml<br></code><br>3. Fiter out results known wild card servers<br><code>grep -v &quot;wildcardip1&quot; file.xml | grep -v &quot;wildcardip2&quot; | grep -v &quot;wildcardip3&quot; <br></code><br><b>Reference:</b> https://digi.ninja/blog/dns_wildcard_recon.php<br><br><h2><b>Report Requirements</b></h2><br><ul><li>Record newly discovered domain names for later targeting.</li><br><li>For the task also show the command and a truncated version of the output to illustrate the attack process.</li><br></ul><br>","references":[],"isTaskInstructionsVisible":true,"isCommentMandatory":false,"fields":[],"masterFinding":{"id":17063352,"exploitInstructions":"","verificationInstructions":"<h2><b>Instructions</b></h2><br>Perform brute forcing to discover subdomains.<br><br>1. Run command commands to identify subdomains.<br><br><code>dnsrecon -d domain.com -D /root/dnsrecon/subdomains-top1mil-20000.txt -t brt --xml /path/to/file.xml<br></code><br>or <br><code>dnsrecon -d domain.com -D /root/dnsrecon/subdomains-top1mil-20000.txt -t brt -n [name server ip] --threads 15 --xml /path/to/file.xml<br></code><br><br><h2>Dealing with wild card records</h2><br>When a brute force is performed against a domain using a wildcard record every request is going to come back as successful, either with a real result or that of the default record. Below is a summary of how to deal with it.<br><br>1. Determine wildcard exists by querying for a long random subdomain.  If A records are returned then a wildcard record is most likely being used.<br><br><code>dig adsfadfasdfasdf.domain.com<br></code><br><br>2. Conduct DNS brute forcing of the domain, but filter out the wildcard IP addresses from the results to obtain a list of real sub domains.<br><br><code>dnsrecon -d domain.com -D /root/dnsrecon/subdomains-top1mil-20000.txt -t brt --xml /path/to/file.xml<br></code><br><br>3. Fiter out results known wild card servers<br><br><code>grep -v &quot;wildcardip1&quot; file.xml | grep -v &quot;wildcardip2&quot; | grep -v &quot;wildcardip3&quot; <br></code><br><br>Reference: https://digi.ninja/blog/dns_wildcard_recon.php<br><br><b>Note:  </b>GoBuster can also do domain brute forcing pretty fast and supports wildcard domain detection.<br><br>https://github.com/OJ/gobuster<br><br><h2><b>Report Requirements</b></h2><br><ul><li>Record newly discovered domain names for later targeting.</li><br><li>For the task also show the command and a truncated version of the output to illustrate the attack process.</li><br></ul><br>","remediationInstructions":"Consider processing request with a wild card domain when possible to prevent common enumeration.<br>","name":"General Information - DNS - Sub Domain Brute Forcing","sourceId":"M:0b82feff-7d51-40b1-a335-22f812994087","severity":"Informational","businessImpact":"It may be possible to target discovered subdomains in future attacks.","description":"It was possible to identify sub domains using common brute force techniques.<br>"}}}