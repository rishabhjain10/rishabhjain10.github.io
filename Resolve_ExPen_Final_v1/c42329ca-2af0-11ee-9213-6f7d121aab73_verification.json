{"default_url":null,"content":{"state":2,"taskInstructions":"<h2>Instructions</h2><br>Gain unauthorized access to systems, application functionality, and sensitive data. Try to drive all high impact vulnerabilities to code execution when possible. The goal of this objective is to illustrate impact.<br><br><h2>Read Access</h2><br>In order to use read access as an entry point you'll need to find <b>authentication tokens</b>. Those include things like passwords, session cookies, and private keys. To increase your luck, research the OS and installed applications to determine where they store that type of information by default. Then, simply use the passwords, session cookies, or keys to login.<br><br>Vulnerabilities can potentially allow read access to:<br><ul><li>Memory</li><br><li>File System</li><br><li>Registry</li><br><li>Database</li><br></ul><br><h3><b>Questions to ask yourself:</b></h3><br><ol><li>What files and paths can I read from?</li><br><li>Where does the OS and installed applications store credentials?</li><br><li>Can I read privileged files (do I have root/administrator)?</li><br><li>Can I read any authentication tokens?</li><br><li>If yes, then how do I use them to login?</li><br><li>If not, then write the finding up and move on.</li><br></ol><br><h2>Write Access</h2><br>In order to use write access as an Entry Point you'll need to write code, content, or files to locations <b>where you can control their execution or inject an authentication token</b>.  <br><br>Vulnerabilities can potentially allow write access to the follow areas:<br><ul><li>Memory</li><br><li>File System</li><br><li>Registry</li><br><li>Database</li><br></ul><br>There are primarily two scenarios you'll run into regarding file access, restricted and arbitrary write access. It can be used as a general example for the other areas.<br><br><h3><b>Restricted file write</b></h3><br>The vulnerability provides write access to files, but it is restricted to a specific file or path.<br><br><h3><b>Arbitrary file write</b></h3><br>The vulnerability provides write access any file or path. The only thing restricting write access to files in this scenario are the privileges of the acting user. In most cases that will be a service account of some kind. For example, the account running IIS may not have write access the all users startup directory.<br><br><h3><b>Questions to ask yourself</b></h3><br><ol><li>What files and paths can I write to?</li><br><li>Where are OS and application autorun locations?</li><br><li>Do I have administrative write access?</li><br><li>Can I write my own authentication tokens within the application or OS?</li><br><li>If yes, then how do I use them to login?</li><br><li>If not, then write the finding up and move on.</li><br></ol><br><h2>Remote Code Execution </h2><br>These types of issues allow direct code execution within the context of the service account. This is typically a canned exploit or unauthorized access to functionality that is intended to execute commands or code.<br><br>The general guidance is find a safe reliable exploit to run. Review the verification instructions. If a vulnerability recommendation does not already exist make sure to get a second opinion before running as exploit.<br><br>If you are targeting existing functionality in an application, database, or operating system, then read the documentation for guidance.<br><br><h2>Credentialed Access</h2><br>Attempt to log into application and management interfaces that support the authentication method. Then attempt to pivot through that medium into the internal network zones. If MFA exists, take a little to time to understand if a bypass is possible via self-service portals or other options.<br>","references":[],"isTaskInstructionsVisible":true,"isCommentMandatory":false,"fields":[],"masterFinding":null}}