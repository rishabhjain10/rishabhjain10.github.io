{"default_url":null,"content":{"state":2,"taskInstructions":"<h2>Instructions</h2><br>Search online code repositories for sensitive information and credentials.<br><h3></h3><br><h2>Variation: Manual</h2><br>1. Always search using multiple keywords. Once keyword should be client specific and one related to the data type. Common generic keywords to use with company specific information:  <br><ul><li>password</li><br><li>secret</li><br><li>key</li><br><li>private</li><br><li>user</li><br><li>account</li><br><li>connectionstring</li><br><li>confidential</li><br><li>proprietary</li><br></ul><br>2. Using Active Directory domains, applications names, and legal language specific to the client can be very effective.<br><br>3. Reuse information discovered in additional searches. Active Directory domains and legal language especially.<br><br>4. Sample data using some of the strategies below when there are million of records:<br><ul><li>Sample high value file types associated with config files, server side languages, and desktop app languages (c&#35;, java, asp, c++, .conf, .xml, ,json etc)</li><br><li>Group/sample by the same username (only review a handful of code example for any single user, and mark them for follow up as needed)</li><br><li>Group/sample by the same Repository name (many time different users will have copies of the same repository)</li><br><li>Group/sample by the same File name (only review a handful for any single filename)</li><br></ul><br><h2>Variation: Trufflehog</h2><br>1. Download the latest release.<br><ul><li>https://github.com/trufflesecurity/trufflehog</li><br></ul><br>2. Run the tool.<br><h3>Example:</h3><br><code>trufflehog github --org=netspi<br></code><br><b>Additional Checks</b><br>Review .git in relevant public repositories.<br><a href='https://github.com/liamg/gitjacker'>https://github.com/liamg/gitjacker</a><br><br><b>Reporting Requirements</b><br><ol><li>Ensure all affected URLs are included in the verification</li><br><li>Ensure a sample of redacted examples is included in the verification for each data type exposed</li><br></ol><br>","references":[],"isTaskInstructionsVisible":true,"isCommentMandatory":false,"fields":[],"masterFinding":{"id":17062676,"exploitInstructions":"","verificationInstructions":"<b>Goal</b><br>Identify sensitive data stored on github.com <br><br><b>Approach Summary</b><br>Review github.com for domains, users, companies, and applications associated with the scope.<br><br><b>Searching Tips</b><br>1. Always search using multiple keywords.  Once keyword should be client specific and one related to the data type.<br><br>   Common generic keywords to use with company specific information:<br>   password<br>   secret<br>   key   <br>   private<br>   user<br>   account<br>   connectionstring<br>   confidential<br>   proprietary<br><br>2. Using Active Directory domains, applications names, and legal language specific to the client can be very effective.<br><br>3. Reuse information discovered in additional searches. Active Directory domains and legal language especially.<br><br>4. Sample data using some of the strategies below when there are million of records:<br>   <br>   Sample high value file types associated with config files, server side languages, and desktop app languages (c&#35;, java, asp, c++, .conf, .xml, ,json etc)<br>   Group/sample by the same username (only review a handful of code example for any single user, and mark them for follow up as needed)<br>   Group/sample by the same Repository name (many time different users will have copies of the same repository)<br>   Group/sample by the same File name (only review a handful for any single filename)<br>    <br><br><b>Additional Checks</b><br>Review .git in relevant public repositories.<br><a href='https://github.com/liamg/gitjacker'>https://github.com/liamg/gitjacker</a><br><br><br><b>Reporting Requirements</b><br><ol><li>Ensure all affected URLs are included in the verification</li><br><li>Ensure a sample of redacted examples is included in the verification for each data type exposed</li><br></ol><br><br><br>","remediationInstructions":"Ensure that passwords and other sensitive data are not accessible to unauthenticated internet users via publicly accessible github.com repositories.  Consider removing the github.com repository, redacting the passwords, or making the affected repositories private.<br>","name":"Sensitive Information Disclosure - Public GitHub Repository","sourceId":"M:04701768-6256-4622-8a03-c67911e34523","severity":"Critical","businessImpact":"An attacker with access to cleartext credentials could potentially use them to gain unauthorized access to the associated systems, applications, and sensitive data.","description":"Cleartext passwords were found in files associated with a publicly accessible github.com code repository.<br>"}}}