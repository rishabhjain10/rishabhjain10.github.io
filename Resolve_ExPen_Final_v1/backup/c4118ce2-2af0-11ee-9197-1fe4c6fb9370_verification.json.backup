{"default_url":null,"content":{"state":2,"taskInstructions":"<h2>Instructions</h2><br>Enumerate known employees and emails. Using known email domains, search for employee email addresses using the https://hunter.io.<br><br>Refer to the Consultants - OSINT list in passwords for credentials/API key. <br><b>Username:</b> IT@NetSPI.com<br><b>Password:</b>  https://passwords.netspi.com/pid=20625<br><br><h3><b>Automation</b></h3><br>1.  Install PyHunter<br><code>pip install pyhunter<br></code><br>2.  Insert Hunter API key into the script. A Hunter API key is required to use this tool.<br>The NetSPI API key that needs to be inserted into the script prior to use is:<br>https://passwords.netspi.com/pid=31032<br><code>&#35; insert API key here<br>apiKey = ''<br>hunter = PyHunter(apiKey)<br></code><br>3. Run hunterio.py.<br><code>$ python3 hunterio.py netspi.com<br><br>[+] Found 10 email addresses for netspi.com domain:<br>[-] Getting page 1 of results...<br>[+] Discovered email addresses:<br>cody.wass@netspi.com<br>david.gordon@netspi.com<br>gina.price@netspi.com<br>alex@netspi.com<br>gprice@netspi.com<br>mary.braunwarth@netspi.com<br>harold@netspi.com<br>antti.rantasaari@netspi.com<br>david.schlais@netspi.com<br>karl.fosaaen@netspi.com<br></code><br><h3><b>Hunterio.py Source Code</b></h3><br><b>Source:</b> https://github.com/NetSPI/OSINT/tree/master/Hunter.io<br><code>&#35;!/usr/bin/python3<br>import argparse<br>import csv<br>from pyhunter import PyHunter<br>import sys<br><br>&#35; insert API key here<br>apiKey = ''<br>hunter = PyHunter(apiKey)<br><br>parser = argparse.ArgumentParser(description='Search hunter.io for email addresses associated with a particular domain.')<br>parser.add_argument('domain', metavar='D', help='an email domain name to search hunter.io for -- Ex: netspi.com')<br>parser.add_argument('--outputPath', metavar='O', help='file to output CSV results -- Ex: /root/tools/myoutput.csv')<br><br>args = parser.parse_args()<br><br>finalEmailList = []<br><br>def queryAPI(domainVal, limitVal = 100, emails_typeVal = 'personal', offsetVal=0):<br>  &quot;&quot;&quot;Calls the hunter.io API to search for email addresses for supplied domain<br><br>  Args:<br>    domainVal (string): Name of the domain to search -- Ex: netspi.com<br>    limitVal (int): Maximum number of results to return per query (100 max)<br>    emails_typeVal (string): 'personal' or 'generic' -- 'generic' includes<br>    addresses like 'sales@netspi.com', whereas<br>    'personal' only returns names of individuals<br>    offsetVal (int): The number of emails to skip during a query<br>  Returns:<br>    bool: (dict): raw API response dictionary<br><br>  &quot;&quot;&quot;<br>  try:<br>    return hunter.domain_search(domain=domainVal, limit=limitVal, emails_type=emails_typeVal, raw=True, offset=offsetVal).json()<br>  except:<br>   sys.exit(&quot;[x] ERROR: Failure during API search call to hunter.io. Check your API key.&quot;)<br><br><br>&#35; iterate through the first set of results and store the emails<br>pageNum = 1<br><br>try:<br>  apiResponse = queryAPI(args.domain)<br>  emailCount = apiResponse['meta']['results']<br>except:<br>  sys.exit(&quot;[x] ERROR: Failure parsing JSON API response.&quot;)<br><br>if emailCount == 0:<br>  sys.exit(&quot;[x] No email addresses found for {} domain.&quot;.format(args.domain))<br>elif emailCount == 1:<br>  print(&quot;[+] Found 1 email address for {} domain:&quot;.format(args.domain))<br>else:<br>  print(&quot;[+] Found {} email addresses for {} domain:&quot;.format(emailCount, args.domain))<br><br>print(&quot;[-] Getting page {} of results...&quot;.format(pageNum))<br>for email in apiResponse['data']['emails']:<br>  finalEmailList.append(email['value'])<br><br>pageNum += 1<br><br>&#35; if more than 100 emails exist, it requires paging through the results 100 at a time<br>if emailCount &gt; 100:<br>  offsetCount = 100<br><br>  while emailCount &gt; offsetCount:<br>    print(&quot;[-] Getting page {} of results...&quot;.format(pageNum))<br>    apiResponse = queryAPI(args.domain, offsetVal=offsetCount)<br>    for email in apiResponse['data']['emails']:<br>      finalEmailList.append(email['value'])<br><br>    offsetCount += 100<br>    pageNum += 1<br><br>if args.outputPath:<br>  &#35; output final result set to CSV<br>  print(&quot;[+] Writing output to {}&quot;.format(args.outputPath))<br>  try:<br>    with open(args.outputPath, 'w', newline='') as f:<br>      writer = csv.writer(f)<br>      for email in finalEmailList:<br>        writer.writerow([email])<br>  except:<br>    sys.exit(&quot;[x] ERROR: Could not write output file to {}&quot;.format(args.outputPath))<br>else:<br>  print(&quot;[+] Discovered email addresses:&quot;)<br>  for email in finalEmailList:<br>    print(email)<br></code><br><h2><b>Report Verification</b></h2><br>Please add this finding to the workspace and add the discovered email addresses as a verification item.<br>","references":[],"isTaskInstructionsVisible":true,"isCommentMandatory":false,"fields":[],"masterFinding":{"id":17063360,"exploitInstructions":"","verificationInstructions":"<b>Instructions</b><br><br>Using known email domains, search for employee email addresses using the https://hunter.io. <br><br>Username: IT@NetSPI.com<br>Password:  https://passwords.netspi.com/pid=20625<br><br><b>Automation</b><br><br>1.  Install PyHunter <br><br><code>pip install pyhunter<br></code><br>2.  Insert Hunter API key into script A Hunter API key is required to use this tool. <br><br>The NetSPI API key that needs to be inserted into the script prior to use is:<br>https://passwords.netspi.com/pid=31032<br><br><code>&#35; insert API key here<br>apiKey = ''<br>hunter = PyHunter(apiKey)<br></code><br><br>3. Run hunterio.py.<br><br><code>$ python3 hunterio.py netspi.com<br>[+] Found 10 email addresses for netspi.com domain:<br>[-] Getting page 1 of results...<br>[+] Discovered email addresses:<br>cody.wass@netspi.com<br>david.gordon@netspi.com<br>gina.price@netspi.com<br>alex@netspi.com<br>gprice@netspi.com<br>mary.braunwarth@netspi.com<br>harold@netspi.com<br>antti.rantasaari@netspi.com<br>david.schlais@netspi.com<br>karl.fosaaen@netspi.com<br></code><br><br><b>Hunterio.py Source Code</b><br>Source: https://github.com/NetSPI/OSINT/tree/master/Hunter.io<br><br><code>&#35;!/usr/bin/python3<br>import argparse<br>import csv<br>from pyhunter import PyHunter<br>import sys<br><br>&#35; insert API key here<br>apiKey = ''<br>hunter = PyHunter(apiKey)<br><br>parser = argparse.ArgumentParser(description='Search hunter.io for email addresses associated with a particular domain.')<br>parser.add_argument('domain', metavar='D', help='an email domain name to search hunter.io for -- Ex: netspi.com')<br>parser.add_argument('--outputPath', metavar='O', help='file to output CSV results -- Ex: /root/tools/myoutput.csv')<br><br>args = parser.parse_args()<br><br>finalEmailList = []<br><br><br>def queryAPI(domainVal, limitVal = 100, emails_typeVal = 'personal', offsetVal=0):<br>  &quot;&quot;&quot;Calls the hunter.io API to search for email addresses for supplied domain<br><br>    Args:<br>      domainVal (string): Name of the domain to search -- Ex: netspi.com<br>      limitVal (int): Maximum number of results to return per query (100 max)<br>      emails_typeVal (string): 'personal' or 'generic' -- 'generic' includes<br>                               addresses like 'sales@netspi.com', whereas<br>                               'personal' only returns names of individuals<br>      offsetVal (int): The number of emails to skip during a query<br>    Returns:<br>      bool: (dict): raw API response dictionary<br>  <br>  &quot;&quot;&quot;<br>  try:<br>    return hunter.domain_search(domain=domainVal, limit=limitVal, emails_type=emails_typeVal, raw=True, offset=offsetVal).json()<br>  except:<br>    sys.exit(&quot;[x] ERROR: Failure during API search call to hunter.io. Check your API key.&quot;)<br><br><br><br><br>&#35; iterate through the first set of results and store the emails<br>pageNum = 1<br><br>try:<br>  apiResponse = queryAPI(args.domain)<br>  emailCount = apiResponse['meta']['results']<br>except:<br>  sys.exit(&quot;[x] ERROR: Failure parsing JSON API response.&quot;)<br><br>if emailCount == 0:<br>  sys.exit(&quot;[x] No email addresses found for {} domain.&quot;.format(args.domain))<br>elif emailCount == 1:<br>  print(&quot;[+] Found 1 email address for {} domain:&quot;.format(args.domain))<br>else:<br>  print(&quot;[+] Found {} email addresses for {} domain:&quot;.format(emailCount, args.domain))<br><br>print(&quot;[-] Getting page {} of results...&quot;.format(pageNum))<br>for email in apiResponse['data']['emails']:<br>  finalEmailList.append(email['value'])<br><br>pageNum += 1<br><br><br>&#35; if more than 100 emails exist, it requires paging through the results 100 at a time<br>if emailCount &gt; 100:<br>  offsetCount = 100<br>  <br>  while emailCount &gt; offsetCount:<br>    print(&quot;[-] Getting page {} of results...&quot;.format(pageNum))<br>    apiResponse = queryAPI(args.domain, offsetVal=offsetCount)<br>    for email in apiResponse['data']['emails']:<br>      finalEmailList.append(email['value'])<br>      <br>    offsetCount += 100<br>    pageNum += 1<br><br><br>if args.outputPath:<br>  &#35; output final result set to CSV<br>  print(&quot;[+] Writing output to {}&quot;.format(args.outputPath))<br>  try:<br>    with open(args.outputPath, 'w', newline='') as f:<br>      writer = csv.writer(f)<br>      for email in finalEmailList:<br>        writer.writerow([email])<br>  except:<br>    sys.exit(&quot;[x] ERROR: Could not write output file to {}&quot;.format(args.outputPath))  <br>else:<br>  print(&quot;[+] Discovered email addresses:&quot;)<br>  for email in finalEmailList:<br>    print(email)<br></code><br><br><b>Report Verification</b><br><br>Please add this finding to the workspace and add the discovered email addresses as a verification item.<br><br><br>","remediationInstructions":"Ensure employees are aware that their information being mad public may put them and their company at risk.<br>","name":"General Information - Employee - Hunter.io","sourceId":"M:56f52b52-9d53-42a9-943b-f64edd383938","severity":"Informational","businessImpact":"An attacker maybe able to use valid employee names in future attacks.","description":"Employee information was found using Hunter.io.<br>"}}}