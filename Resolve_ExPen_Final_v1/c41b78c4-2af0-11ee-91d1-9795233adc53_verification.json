{"default_url":null,"content":{"state":2,"taskInstructions":"<h2>Instructions</h2><br>1. Identify bucket names by scanning in scope application for references, Google dorking for references, and guessing/permutating names.<br>2. Check list permission allow everyone to enumeration files.<br>3. Review files for sensitive data.<br><br><h2><b>Variation: Azure Authenticated Users</b></h2><br>Use the Dump-AzureDomainInfo-AzureRM script to review all of the Azure storage accounts. Look at the PublicFileURLs.txt files to review any available public files<br><br><h2><b>Variation: Anonymous Users</b></h2><br>Identify storage accounts that are in use in the Azure environment. Look for references to any &quot;blob.core.windows.net&quot; subdomains (IE: netspi.blob.core.windows.net). <br><br>Attempt to then enumerate valid containers within the storage account. Use Intruder to identify any live folders (IE: https://netspi.blob.core.windows.net/$BURP_Parameter?restype=container). Take the list of enumerated folders and attempt to list out all of the files (add ?restype=container&amp;comp=list to the end of the folder URL)<br><br><h2><b>Variation: MicroBurst</b></h2><br>1. Install MicroBurst from the NetSPI repository.<br><ul><li>https://github.com/NetSPI/MicroBurst</li><br></ul><br>2. Run the Invoke-EnumerateAzureBlobs command.<br>Before running the script, check the permutations.txt file and add any additional keywords (product/app names, subsidiaries, etc.) that may be applicable to the client. The company's name (or a shortened/common version of it) is typically specified using the -Base parameter, which the tool uses to build the permutations that it checks for.<br><br>Example:<br><code>PS C:\\Tools&gt; Invoke-EnumerateAzureBlobs -Base netspi -OutputFile output.txt<br>Found Storage Account -  netspiazure.blob.core.windows.net<br>Found Storage Account -  netspikeys.blob.core.windows.net<br>Found Storage Account -  netspistorage.blob.core.windows.net<br><br>Bing Found Storage Account - optivstorage.blob.core.windows.net<br><br>Found Container - netspikeys.blob.core.windows.net/$root<br>\tPublic File Available: https://netspikeys.blob.core.windows.net/$root/SuperSecretFile-1.txt<br>Found Container - netspistorage.blob.core.windows.net/test<br>\tPublic File Available: https://netspistorage.blob.core.windows.net/test/SuperSecretFile.txt<br></code><br>3. Review the discovered blobs.<br><code>PS C:\\Tools&gt; type .\\output.txt<br>netspiazure.blob.core.windows.net<br>netspikeys.blob.core.windows.net<br>netspistorage.blob.core.windows.net<br>optivstorage.blob.core.windows.net<br>https://netspikeys.blob.core.windows.net/$root/SuperSecretFile-1.txt<br>https://netspistorage.blob.core.windows.net/test/SuperSecretFile.txt<br></code><br>For any public files, just navigate to the file via the URL listed in the output.<br><br><h2>Variation: cloud_enum.py</h2><br>1. Download cloud_enum.py from https://github.com/initstring/cloud_enum and follow the installation instructions. <br><code>git clone https://github.com/initstring/cloud_enum.git<br></code><br>2. Run the following command.<br><code>python3 cloud_enum.py -k netspi -ns 1.1.1.1<br><br>&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;<br>        cloud_enum<br>   github.com/initstring<br>&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;<br><br><br>Keywords:    netspi<br>Mutations:   /home/ncroy/tools/cloud_enum/enum_tools/fuzz.txt<br>Brute-list:  /home/ncroy/tools/cloud_enum/enum_tools/fuzz.txt<br><br>[+] Mutations list imported: 242 items<br>[+] Mutated results: 1453 items<br><br><b>[TRUNCATED]</b><br>++++++++++++++++++++++++++<br>       azure checks<br>++++++++++++++++++++++++++<br><br>[+] Checking for Azure Storage Accounts<br>[&#42;] Brute-forcing a list of 471 possible DNS names<br>    [!] DNS Timeout on bigtablenetspi.blob.core.windows.net. Investigate if there are many of these.<br>    [!] DNS Timeout on netspibilling.blob.core.windows.net. Investigate if there are many of these.<br>    [!] DNS Timeout on eventsnetspi.blob.core.windows.net. Investigate if there are many of these.<br>    [!] DNS Timeout on netspinet.blob.core.windows.net. Investigate if there are many of these.<br>    [!] DNS Timeout on netnetspi.blob.core.windows.net. Investigate if there are many of these.<br>    [!] DNS Timeout on opsnetspi.blob.core.windows.net. Investigate if there are many of these.<br>    [!] DNS Timeout on netspistats.blob.core.windows.net. Investigate if there are many of these.<br>  HTTP-OK Storage Account: http://netspi.blob.core.windows.net/<br>  HTTP-OK Storage Account: http://netspistorage.blob.core.windows.net/<br><br> Elapsed time: 00:00:39<br><br>[&#42;] Checking 2 accounts for status before brute-forcing<br>[&#42;] Brute-forcing container names in 2 storage accounts<br>[&#42;] Brute-forcing 213 container names in netspistorage.blob.core.windows.net<br>[&#42;] Brute-forcing 213 container names in netspi.blob.core.windows.net<br><br> Elapsed time: 00:00:39<br><b>[TRUNCATED]</b><br></code><br><h2>Variation: Manual</h2><br>Google Dork:<br><code>site:blob.core.windows.net &quot;CLIENT_NAME&quot;<br></code><br>This search will return any public files that contain CLIENT_NAME. You can then identify the storage account and container from those files.<br>Accessing a list of anonymous files from blogs can also be done using the example below:<br><code>https://myblob.blob.core.windows.net/?comp=list&amp;timeout=60&amp;maxresults=100<br></code><br>Finally you can also review the following source for potential Azure blog usage:<br><ul><li>Github</li><br><li>Google dorks</li><br><li>Censius</li><br><li>Shodan</li><br></ul><br><b>Other Azure Services</b><br>Also, consider running enumeration against other windows.net services in Azure.<br>","references":[],"isTaskInstructionsVisible":true,"isCommentMandatory":false,"fields":[],"masterFinding":{"id":17063371,"exploitInstructions":"Use the Dump-AzureDomainInfo-AzureRM script to review all of the Azure storage accounts. Look at the PublicFileURLs.txt files to review any available public files.<br><br>Download any available files and review them for sensitive information.<br>Fun finds:<br>SQL Database backups<br>CSV files with configuration/setup credentials","verificationInstructions":"<h2><b>Variation: Find Azure Blob - Azure Authenticated User (MicroBurst)</b></h2><br>Use the<b> Dump-AzureDomainInfo-AzureRM</b> script to review all of the Azure storage accounts. Look at the PublicFileURLs.txt files to review any available public files. <br><br>1. Open PowerShell and install AzureRM.<br><code>Install-Module -Name AzureRM -AllowClobber<br></code><br><br>2. Download Dump-AzureDomainInfo.ps1<br><code>https://github.com/NetSPI/PowerShell-Private/blob/acadb19001b17d939b3964f9e94efd974b3906be/Dump-AzureDomainInfo.ps1<br></code><br><br>3. Import the module.<br><code>set-executionpolicy bypass -scope process<br>import-module ./Dump-AzureDomainInfo.ps1<br></code><br><br>4. Run using folder keyword.<br><code>PS C:\\&gt; Dump-AzureDomainInfo-AzureRM -folder Test -Verbose<br>VERBOSE: Getting Domain Users...<br>VERBOSE: 200 Domain Users were found.<br>VERBOSE: Getting Domain Groups...<br>VERBOSE: 150 Domain Groups were found.<br>VERBOSE: Getting Domain Users for each group...<br>VERBOSE: Domain Group Users were enumerated for 150 groups.<br>VERBOSE: Getting Domain Service Principals...<br>VERBOSE: 140 service principals were enumerated.<br>VERBOSE: All done with AzureRM tasks.<br></code><br><br><h2>Variation: <b>Find Azure Blob - Azure Authenticated User (</b>BlobHunter)</h2><br><br>1. Download the tool<br><code>git clone https://github.com/cyberark/BlobHunter.git<br></code><br><br>2. Download and install dependencies.<br><code>curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash<br>pip3 install -r requirements.txt<br></code><br><br>3. Run BlobHunter. If you are not logged in in the Azure CLI, a browser window will be prompted at you for inserting your Azure user credentials.<br><code>python3 BlobHunter.py<br></code><br><br><h2><b>Variation: Find Azure Blobs - Anonymous Users</b></h2><br>Identify storage accounts that are in use in the Azure environment. Look for references to any &quot;<b>blob.core.windows.net</b>&quot; subdomains (IE: <b>netspi.blob.core.windows.net</b>). <br><br>Attempt to then enumerate valid containers within the storage account. Use Intruder to identify any live folders (IE: https://netspi.blob.core.windows.net/$BURP_Parameter?restype=container). Take the list of enumerated folders and attempt to list out all of the files (add ?restype=container&amp;comp=list to the end of the folder URL)<br><br><b>Alternatively</b><br>Use the Invoke-EnumerateAzureBlobs.ps1 script available in the MicroBurst Repo:<br>https://github.com/NetSPI/MicroBurst/blob/master/Invoke-EnumerateAzureBlobs.ps1<br><br>1. Download MicroBurst from https://github.com/netspi/microburst.<br><br>2. Import the module.<br><br><code>set-executionpolicy bypass -scope process<br>import-module ./MicroBurst.psm1<br></code><br>3. Create the c:\\permutations.txt file and add any additional keywords (product/app names, subsidiaries, etc.) that may be applicable to the client.<br><br>3. Run the Invoke-EnumerateAzureBlobs function.<br><br>Additionally, we have a Bing Search API key that we can use to find additional storage accounts with the -Base variable in the results. The key is listed in the example below.<br><br>Example:<br><code>PS C:\\Tools&gt;<b> Invoke-EnumerateAzureBlobs -Base netspi -BingAPIKey 2f1d7006e8b944feab3931cfe5427a2f -OutputFile output.txt</b><br><b><red>Found Storage Account -  netspiazure.blob.core.windows.net</red></b><br><b><red>Found Storage Account -  netspikeys.blob.core.windows.net</red></b><br><b><red>Found Storage Account -  netspistorage.blob.core.windows.net</red></b><br><br>Bing Found Storage Account - optivstorage.blob.core.windows.net<br><b><red>Found Container - netspikeys.blob.core.windows.net/$root</red></b><br><b><red> Public File Available: https://netspikeys.blob.core.windows.net/$root/SuperSecretFile-1.txt</red></b><br><b><red>Found Container - netspistorage.blob.core.windows.net/test</red></b><br><b><red> Public File Available: https://netspistorage.blob.core.windows.net/test/SuperSecretFile.txt</red></b><br><br>PS C:\\Tools&gt; <b>type .\\output.txt</b><br><b><red>netspiazure.blob.core.windows.net</red></b><br><b><red>netspikeys.blob.core.windows.net</red></b><br><b><red>netspistorage.blob.core.windows.net</red></b><br><b><red>optivstorage.blob.core.windows.net</red></b><br><b><red>https://netspikeys.blob.core.windows.net/$root/SuperSecretFile-1.txt</red></b><br><b><red>https://netspistorage.blob.core.windows.net/test/SuperSecretFile.txt</red></b><br></code><br>For any public files, just navigate to the file via the URL listed in the output.<br><br>Below are some additional instructions for enumerating Azure blobs.<br>https://misconfig.io/azure-blob-container-threats-attack/<br><br><h2>Variation: Find Azure Blobs - Google Dork</h2><br>Additional GoogleDork Option - site:blob.core.windows.net &quot;CLIENT_NAME&quot;.  This search will return any public files that contain CLIENT_NAME. You can then identify the storage account and container from those files.<br><br>Accessing a list of anonymous files from blogs can also be done using the example below:<br><br><code>https://myblob.blob.core.windows.net/?comp=list&amp;timeout=60&amp;maxresults=100<br></code><br><br>Finally you can also review the following source for potential Azure blog usage:<br><ul><li>Github</li><br><li>Google dorks</li><br><li>Censius</li><br><li>Shodan</li><br></ul><br><br><h2><b>Variation: Identify Azure Services</b></h2><br>Also, consider running enumeration against other windows.net services in Azure.<br><br>1. Load script.<br><code>iex(new-object net.webclient).Downloadstring(&quot;https://raw.githubusercontent.com/NetSPI/MicroBurst/master/Invoke-EnumerateAzureSubDomains.ps1&quot;)<br></code><br><br>2. Search for client related sub domains.<br><code> Invoke-EnumerateAzureSubDomains -Base test123 -Verbose<br></code><br>","remediationInstructions":"Within the Azure portal (portal.azure.com) change the Access Policy for the container to Private.<br>Alternatively, the Set-AzureStorageContainer Azure cmdlet can be used to modify the public access permissions for containers.<br>Where possible, set alerts for the \"Create/Update Storage Account\" signals to notify Azure administrators when permissions change for private blob containers.<br>","name":"Excessive Privileges - Public Blob Permissions - Azure","sourceId":"M:7f91d45f-4e7b-4ac3-b8fb-07ed533d7d6e","severity":"Critical","businessImpact":"Unauthorized access to the files could result in the compromise of sensitive information. <br>","description":"The Azure storage blob is configured with Public (Blob or Container) permissions. These permissions could allow anonymous users to access files in the blob container. If the container is set to &quot;Container&quot; permissions, this also can allow for directory listing of the container.<br>"}}}